[["index.html", "From sequences to knowledge, improving and learning from sequence alignments Abstract Résumé", " From sequences to knowledge, improving and learning from sequence alignments Luc Blassel 2022-09-26 Abstract In this thesis we study two important problems in computational biology, one pertaining to primary analysis of sequencing data, and the second pertaining to secondary analysis of sequences to obtain biological insights using machine-learning. Sequence alignment is one of the most powerful and important tools in the field of computational biology. Read alignment is often the first step in many analyses like structural variant detection, genome assembly or variant calling. Long read sequencing technologies have improved the quality of results across all these analyses. They remain, however, plagued by sequencing errors and pose algorithmic challenges to alignment. A prevalent technique to reduce the detrimental effects of these errors is homopolymer compression, which targets the most prevalent type of long-read sequencing error. We present a more general framework than homopolymer compression, which we call mapping-friendly sequence reductions (MSR). We then show that some of these MSRs improve the accuracy of read alignments across whole human, drosophila and E. coli genomes. Improvements in sequence alignment methods are crucial for downstream analyses. For instance, multiple sequence alignments are indispensable when studying resistance in viruses. With the ever growing quantity of annotated, high quality multiple sequence alignments it has become possible and useful to study resistance in viruses with machine learning methods. We used a very large multiple sequence alignment of British HIV sequences and trained multiple classifiers to discriminate between treatment-naive and treatment-experienced sequences. By studying important classifier features we identified drug resistance mutations. We then removed known drug resistance associated signal from the data before training, kept classifying power, and identified 6 novel resistance associated mutations. Further study indicated that these were most likely accessory in nature and linked to known resistance mutations. Résumé Dans cette thèse nous étudierons deux problèmes importants en bioinformatique, le premier concernant l’analyse primaire de données de séquencage, et le second concernant l’analyse secondaire de séquence par apprentissage automatique en vue d’obtenir des connaissances biologiques. L’alignement de séquences est l’un des outils les plus puissants et les plus importants dans le domaine de la biologie computationnelle. L’alignement de lectures de séquencage est souvent la première étape de nombreuses analyses telles que la détection de variations de structure, ou l’assemblage de génomes. Les technologies de séquençage à longue lectures ont amélioré la qualité des résultats pour toutes ces analyses. Elles sont, cependant, riches en erreurs de séquençage et posent des problèms algorithmiques à l’alignement. Une technique répandue pour réduire les effets néfastes de ces erreurs est la compression d’homopolymères. Cette technique cible le type d’erreur de séquençage à longue lectures le plus répandu. Nous présentons une technique plus générale que la compression d’homopolymères, que nous appelons les “mapping-friendly sequence reductions” (MSR). Nous montrons ensuite que certaines de ces MSRs améliorent la précision des alignements de lecture sur des génomes entiers d’humains, de drosophiles et d’E. coli. L’amélioration des méthodes d’alignment de séquences est cruciale pour les analyses en aval .Par exemple, les alignements de séquences multiples sont indispensables pour étudier la résistance des virus. Grâce à la quantité toujours croissante d’alignements de séquences multiples annotés et de haute qualité, il est aujourd’hui devenu possible et utile d’étudier la résistance des virus à l’aide de méthodes d’apprentissage automatique. Nous avons utilisé un très grand alignement de séquences multiples de séquences de VIH britanniques et entraîné plusieurs classificateurs pour distinguer les séquences non-traitées des séquences traitées. En étudiant les variables importantes aux classificateurs, nous avons identifié des mutations de résistance aux médicaments. Nous avons ensuite, avant l’entraînement, supprimé le signal connu et associé à la pharmacoressitance des données. Nous conservons le pouvoir discriminant des classificateurs, et avons identifié 6 nouvelles mutations associées à la résistance. Une étude plus approfondie a indiqué que celles-ci étaient très probablement de nature accessoire et liées à des mutations de résistance connues. "],["acknowledgments.html", "Acknowledgments", " Acknowledgments Thanks everybody "],["list-of-acronyms-and-abbreviations.html", "List of Acronyms and abbreviations", " List of Acronyms and abbreviations DNA: Desoxy Ribonucleic Acid RNA: Ribonucleic Acid PCR: Polymerase Chain Reaction NGS: Next Generation Sequencing NTP: Nucleotide Triphosphate dNTP: deoxyNucleotide Triphosphate SMRT: Single Molecule Real-Time Sequencing PacBio: Pacific Biosciences ONT: Oxford Nanopore Technologies ZMW: Zero-Mode Waveguide ORF: Open Reading Frame HiFi: High-Fidelity CCS: Circular Consensus Sequencing HMM: Hidden Markov Model T2T: Telomere to Telomere Consortium HPC: Homopolymer Compression NW: Needleman Wunsch algorithm SW: Smith Waterman algorithm PAM: Point Accepted Mutation BLOSUM: Block Substitution FFT: Fast Fourier Transform WFA: WaveFront algorithm BLAST: Basic Local Alignment Search Tool MEM: Maximal Exact Match MUM: Maximal Unique Match BWT: Burrows Wheeler Transform ETR: Extra-long Tandem Repeat MSA: Multiple Sequence Alignment mapq: mapping quality MSR: Mapping-friendly sequence reduction SSR: Streaming sequence reduction RC: reverse complement HIV: Human Immunodeficiency Virus DRM: Drug Resistance Mutation AIDS: Acquired Immunodeficience Syndrome SIV: Human Immunodeficiency Virus CRF: Circulating Recombinant Form URF: Unique Recombinant Form RT: Reverse Transcriptase NRTI: Nucleoside Reverse Transcriptase Inhibitor NNRTI: Non-Nucleoside Reverse Transcriptase Inhibitor NNIBP: Non-Nucleoside Reverse Transcriptase Inhibitor Binding Pocket HAART: Highly Active Antiretroviral therapy RTI: Reverse Transcriptase Inhibitor IN: Integrase FI: Fusion Inhibitor EI: Entry Inhipitor PE: Pharmacokinetic Enhancer INSTI: Integrase Strand Transfer Inhibitor PR: Protease MA: Matrix CA: Capsid NC: Nucleocapsid SU: Surface TM: Transmembrane ART: Antiretroviral therapy PI: Protease Inhibitor FDC: Fixed-Dose Combination TAM: Thymidine analog mutation FWER: Family-wise Error Rate FDR: Flase Discovery Rate RAM: Resistance Associated Mutation SVM: Support Vector Machine KNN: k-Nearest Neighbors RF: Random Forest ANN: Artificial Neural Network PRAM: Potentially Resistance Associated Mutation NB: Naive Bayes LR: Logisitic Regression FC: Fischer Classifier AMI: Adjusted Mutual Information MI: Mutual Information ML: Machine Learning RR: Risk Ratio AA: Amino Acid "],["general-introduction.html", "General Introduction Research output", " General Introduction This manuscript is the result of my years at the Institut Pasteur, where I started as an intern in 2018 and became a PhD student in early 2020. During my time at the Institut Pasteur I have worked on two very distinct subjects: The study of drug resistance mutations in HIV sequences with machine learning. The study of sequence transformation functions to improve long-read mapping. These two subjects, though distinct, do share some common characteristics: mainly that they are based on sequence data and specifically alignments. Although the research on drug resistance in HIV was conducted before that on long-read mapping, I have forgone the chronological ordering of my work in this manuscript for the sake of thematic coherence. Through the organization of this manuscript, I have tried to link all the facets of my PhD work, and it is my hope that readers will be able to follow the flow without too much jumping around. This manuscript is articulated around seven chapters, listed as follows: An introduction to biological sequence data, how it is obtained and specific characteristics and problems inherent to long reads. An introduction to sequence alignment, and how and why read-mapping is performed. A presentation of my work on sequence transformation functions to improve long-read mapping, which was written as a standalone research article. An introduction to machine learning on sequence data, with a focus on techniques used later in the manuscript. An introduction to viruses and HIV in particular, with focus on proteins important to drug resistance. A presentation of my work on drug resistance in HIV, which was written and published as a standalone research article. A short introduction to deep learning in sequence alignment and perspectives to the work presented in chapter 3. Research output During this thesis, my work on finding drug resistance mutations with machine learning resulted in two publications: a first author article describing our method published in PLOS Computational Biology as well as a co-first author review article published in Current Opinion in Virology. The second half of my PhD work, on improving read-mapping resulted in a first-author paper, presented at the RECOMB-SEQ 2022 conference and to be published in the iScience proceedings of that conference. In 2020, during the early stages of the COVID-19 pandemic and the lockdowns, I participated in some work resulting in the COVID-Align web-service and a middle-authorship in the corresponding Bioinformatics publication. This work also led to middle-authorship on the origins of SARS-CoV-2 in the Comptes Rendus. Biologies journal of the French Science Academy. Journal publications This list contains the formal references of the publications mentioned above, along with my contribution represented using the CRediT taxonomy. Blassel, Luc, Paul Medvedev and Rayan Chikhi. 2022. “Mapping-friendly sequence reductions: going beyond homopolymer compression”. In press as part of the RECOMB-SEQ 2022 proceedings in iScience, (Adapted as Chapter 3) Contributions: Formal Analysis, Investigation, Methodology, Software, Validation, Visualization, Writing – original draft, Writing – review &amp; editing. Blassel, Luc1, Anna Zhukova1, Christian J Villabona-Arenas, Katherine E Atkins, Stéphane Hué, and Olivier Gascuel. 2021. “Drug Resistance Mutations in HIV: New Bioinformatics Approaches and Challenges.” Current Opinion in Virology 51 (December): 56–64. 10.1016/j.coviro.2021.09.009 (Used as the basis for Section 5.3.4) Contributions: Visualization, Writing – original draft, Writing – review &amp; editing. Blassel, Luc, Anna Tostevin, Christian Julian Villabona-Arenas, MartinePeeters, Stéphane Hué, and Olivier Gascuel. 2021. “Using Machine Learning and Big Data to Explore the Drug Resistance Landscape in HIV.” PLOS Computational Biology 17 (8): e1008873. 10.1371/journal.pcbi.1008873. (Adapted as Chapter 6) Contributions: Formal Analysis, Investigation, Methodology, Software, Validation, Visualization, Writing – original draft, Writing – review &amp; editing. Zhukova, Anna, Luc Blassel, Frédéric Lemoine, Marie Morel, JakubVoznica, and Olivier Gascuel. 2021. “Origin, Evolution and Global Spread of SARS-CoV-2.” Comptes Rendus. Biologies 344 (1): 57–75. 10.5802/crbiol.29. Contributions: Writing – review &amp; editing. Lemoine, Frédéric, Luc Blassel, Jakub Voznica, and Olivier Gascuel.2020. “COVID-Align: accurate online alignment of hCoV-19 genomes using a profile HMM” Bioinformatics, 37 (12): 1761-1762. 10.1093/bioinformatics/btaa871. Contributions: Software, Writing – review &amp; editing Presentations and posters “Mapping-friendly sequence reductions: going beyond homopolymer compression” proceedings talk, RECOMB-SEQ 2022. San Diego, USA (May 21st 2022) “Can we improve analyses be transforming DNA?” Joint RECOMB-SEQ RECOMB-CCB scientific communication session2. San Diego, USA (May 21st 2022). “Machine learning approaches to reveal resistance mutations in HIV” Poster at MCEB 2019. Porquerolles, France (May 29th 2019) Co-first authors: Luc Blassel and Anna Zhukova↩︎ 2nd place prize awarded↩︎ "],["what-is-sequence-data.html", "Chapter 1 What is Sequence data ? 1.1 Biological sequences, a primer 1.2 Obtaining sequence data 1.3 Sequencing errors, how to account for them ? 1.4 The special case of homopolymers 1.5 Conclusion", " Chapter 1 What is Sequence data ? 1.1 Biological sequences, a primer To fully understand the work that was done during this thesis, as well as the choices that were made, some basic knowledge of molecular biology and genetics is needed. If you are already familiar with biological sequences, feel free to skip ahead to section 1.2. 1.1.1 What is DNA ? DesoxyriboNucleic Acid (DNA) is one of the most important molecules there is, without it complex life as we know it is impossible. It contains all the genetic information of a given organism, that is to say all the information necessary for the organism to: 1) function as a living being and 2) make a perfect copy of itself. This is the case for the overwhelming majority of living organisms on planet earth, from elephants to potatoes, to micro-organisms like bacteria. DNA is a polymer, composed of monomeric units called nucleotides. Each nucleotide is composed of ribose (a five carbon sugar) on which are attached a phosphate group as well as one of four nucleobases: Adenine (A), Cytosine (C), Guanine (G) of Thymine (T). These four types of nucleotide monomers link up with one-another, through phosphate-sugar bonds, creating a single strand of DNA. The ordered sequence of these four types of nucleotides in strand encodes all the genetic information necessary for the organism to function. Nucleotides in a strand form strong complementary bonds with nucleotides from another strand, A with T and C with G. These bonds allow two strands of DNA to form the double-helix structure of DNA1 shown in Figure 1.1. The specificity of nucleotide bonds ensure that the two strands of the double helix are complementary and that the information contained in one strand can be recovered from the other. This ensures a certain structural stability to the DNA molecule and a way to recover the important information that could be lost due to a damaged strand. Figure 1.1: Double-helix structure of DNA. Each strand of DNA has a phosphate-sugar backbone on which are attached nucleobases. The two strands are linked by complementary bonds between the nucleobases of different strands (A bonding with T and C bonding with G). The amount of DNA necessary to encode the information varies greatly from organism to organism: 5400 base pairs (5.4kBp) for the \\(\\varphi X174\\) phage2, 4.9MBp for Escherichia coli3, 3.1GBp for Homo sapiens4 all the way up to almost 150GBp for Paris japonica, a Japanese mountain flowering plant5. While very small genome size tend to occur in smaller, simpler organisms, genome size does not correlate with organism complexity6. 1.1.2 From Information to action 1.1.2.1 Proteins, their structure and their role The double stranded DNA molecules present in the cells of a living organism contain information only; in order for the organism to live this information must be read and translated into actions. Most of the actions necessary for “life” are taken by large molecules called proteins, they have a very wide range of functions from catalyzing reactions in the cell to giving it its structure7. Proteins are macromolecules, that are made up of one or several chains of amino acids. These chains then link together and fold up in a specific three dimensional structure, giving the protein the shape it needs to fulfill its goal. This structure is determined by the sequence of amino acids, and a given protein can be identified by this amino acid sequence7. This sequence is directly dependent on the information contained in the DNA. First the DNA is transcripted in a similar, but single stranded, molecule called RNA (Ribonucleic Acid) which encodes the same sequence. This RNA molecule is then translated into a protein by the following process8: Nucleotides in the RNA sequence are read in groups of three called codons. These codons are read sequentially along the RNA molecule. Each codon corresponds to an amino acid, according to the genetic code. The sequence of codons in RNA (and by extension DNA) determines the sequence of amino acids. The translation process is stopped when a specific type of codon (a “Stop” codon) is read. With four types of nucleotides and codons grouping three nucleotides there are \\(4^3=64\\) possible codons. However, as stated above, proteins are only made up of 20 different amino acids, meaning that several different codons correspond to the same amino acid. This gives the translation process a certain robustness to errors that can occur when the DNA is copied to create a new cell, or when it is transformed into RNA prior to protein translation. The portion of DNA that is read to create the protein is said to be “coding”, and is called a gene. There are several thousands of genes in the human genome9 resulting in proteins executing thousands of different functions in a cell. In human beings, coding DNA represents only 1% to 2% of the total genome10,11. The large majority of the DNA in a human being is not translated into proteins, a portion of it has a regulatory role, controlling transcription and translation, but the role remains unknown for the rest of the human genome12,13. 1.1.2.2 Making mistakes Going from DNA sequence to protein is quite a complicated process involving several steps, it is therefore possible for a mistake to happen. There are several mechanisms to avoid mistakes and alteration of the genetic information: the complementary nature of the two strands of DNA, the redundant nature of the genetic code as well as error correction mechanisms in the molecules (called “polymerases”) that read and write DNA and RNA. However, despite all that, some errors in the nucleic acid (DNA and RNA) or protein sequences still make it through, these are called mutations. 1.1.2.2.1 Where can mistakes happen ? There are several sources of error that can alter the genetic information14: DNA replication: When a cell divides, or when an organism reproduces, the DNA molecule must be copied in order to preserve and transmit genetic information. This process has a very low rate of errors, with as low as one error for every billion to every hundred billion of replicated base pairs15. This is due to the fact that the DNA polymerase (the protein responsible for copying DNA molecules), has a relatively low error rate to start with, but mostly to the error correcting mechanisms that are present in certain cells and bacteria16. RNA transcription: Since errors in RNA transcripts are less important than in replicated DNA, RNA polymerases have a much higher error rate than their DNA counterparts. This error rate has been estimated to be between four errors for each million17 to two errors for each hundred thousand18 transcribed bases. Protein translation: The process of translating RNA to a protein is done by proteins called ribosomes. This is a very error prone process with a mistranslation rate estimated to be of the order of one error for every 10,000 codons translated19 Other mutagenic events: Many external events and factors have been shown to provoke mutations in exposed DNA such as Ionizing radiation20, UV rays21, Toxins22, heat Stress23, cold stress24 or oxidative stress25. 1.1.2.2.2 What kind of errors are possible? In biological sequences (nucleic acids and proteins), mutations can result from one of three error modes: Substitutions, where the original base units (nucleotide or amino acid) is mistakenly replaced by another one, for instance inserting an A instead of a G during RNA transcription. Insertions,where a new base unit not present in the original sequence is added to the newly synthesized biological sequence. deletions, where a base unit from the original sequence is skipped and not taken into account when synthesizing the new sequence. While these three types of errors occur both in nucleic acids and proteins there are some things to consider about the consequences of nucleic acid mutations on protein synthesis. Due to the redundant nature of the genetic code mentioned in Section 1.1.2.1, some mutations in the nucleic acid sequence will result in the same protein sequence and therefore not have altered protein activity. Some mutations however will result in a substitution at the amino acid level which could potentially lead to a physicochemically altered or even non-functional protein. Finally, insertion and deletion errors (collectively called indels) can have big consequences on resulting proteins. Inserting or deleting nucleotides in multiples of three will result in the insertion/deletion of amino acids in the resulting protein, any other length of indel will result in what is called a frameshift mutation26. These mutations causes changes in the codons, potentially resulting in a completely different amino-acid sequence, including premature stop codon apparition as shown in Figure 1.2. Figure 1.2: Effect of frameshift mutations. The deletion of a single C (highlighted in red) in the original DNA sequence leads to a change in the codons read during translation. The original codons (shown in green, with corresponding amino acids, above the sequence) translate to a functional protein MLIRG.... The new codons caused by the deletion (shown in blue, with corresponding amino acids, below the sequence), induce a premature STOP codon leading to a non-functional protein M. The Serine and Valine codons are not translated due to the STOP codon. 1.1.2.2.3 What effect can mutations have ? As we stated above, some mutations in DNA may have no repercussions, some others can lead to non-functional proteins. In some cases mutations can be associated with a trait in the mutated individual. For example a single mutation in a gene linked with coagulation can lead to pathological Leiden thrombophilia27, a single amino acid deletion in the CFTR protein leads to (the very deadly) cystic fibrosis28, and many mutations have been linked to complex diseases like type 2 diabetes29,30. All mutational effects are not necessarily bad for the organism though, and mutations are essential for bacteria31 or viruses like HIV32 to develop resistance to treatment (more on that in Chapters 5 and 6). While some mutations, their mechanisms and consequences have been thoroughly studied, in many cases mutations are simply linked to a trait. Since it is easier to show correlation than causation, and that the former does not necessarily imply the latter, it is important to further study mutations of notice to understand their potential consequences. 1.2 Obtaining sequence data In many fields, especially in computational biology, we need to know what genetic information the studied organism has, that is to say, what is the exact sequence of nucleotides that make up its DNA. The process of figuring out this sequence is, perhaps unsurprisingly, called sequencing. And a sequence that is inferred from this process is called a sequencing read or, more commonly, just a read. 1.2.1 Sanger sequencing, a breakthrough The first sequencing method was developed in 197733. Sanger et al. devised a simple method to read the sequence of nucleotides that make up a DNA sequence known as “chain termination sequencing” or more commonly “Sanger sequencing” (represented in Figure 1.3). Although this method is now mostly obsolete, it established some key concepts in sequencing, some of which are in action in the most modern sequencers. To understand Sanger sequencing, one must first understand how to synthesize DNA. As we stated in Section 1.1.1, DNA is built up from building blocks that we called nucleotides, more specifically deoxynucleotidetriphosphates or dNTPs. these dNTPs are made up of a sugar (deoxyribose) a nucleobase (A, T, G or C) and 3 phosphate groups. By succesively adding these dNTPs at the end of an existing DNA molecule, we extend it, linking one of the phospates of the dNTP to an oxygen atom on the last nucleotide of the DNA molecule. Let us now consider a dideoxynucleotidestriphosphate (ddNTP), which is identical to a dNTP except we remove a specific oxygen atom. This ddNTP can be added to the growing molecule of DNA like regular dNTPS, but since it is missing that one oxygen atom no more dNTPs or ddNTPs can be added to the DNA molecule after this one. The elongation is terminated and we call these ddNTPs chain-terminators. This combination of DNA synthesis followed by termination are at the heart of Sanger sequencing. It is important to note that while dNTPs and ddNTPs refer to nucleotides with any nucleobase, we can refer to specific dNTPs by replacing the “N” with the base of choice. For example, dATP refers to the dNTP that has adenine as a base. Similarly we have dCTP, dGTP and dTTP (as well as ddATP, ddCTP, ddGTP and ddTTP). The first step of Sanger sequencing (and most sequencing methods) is to amplify the DNA molecule we wish to sequence, i.e. make plenty of copies of it (usually through a process called PCR). These clones of the sequence are then separated into their two complementary brands one of which will be used as a template for the sequencing steps. The second step is to prepare 4 different sequencing environments (think of it as 4 test tubes). In each environment we introduce an equal mix of the 4 dNTPs, that will be used to elongate new DNA molecules from the amplified templates, and a single type of ddNTP. So in the first test tube we will have only ddATP, ddCTP in the second, et caetera. In addition, these ddNTP are marked, at first with radioactive isotopes, and later on with dyes. This marking means that we can observe the location of these ddNTP later on. Then an equal portion of the template is introduced in each environment with DNA polymerases (that will add the nucleotides to elongate a sequence that is complementary to the template), and short specific DNA molecules called primers that are necessary for the polymerases to start synthesizing new DNA. During synthesis the chain will be elongated with dNTPs by the polymerase and the reaction will be stopped once a ddNTP is incorporated. At the end of this process we have plenty of fragments of DNA in each test tube, and we know that these fragments end with a specific base in a given environment. For example, in the test tube where we added ddATP, we know that all the fragments end with an A, and that we have all the possible fragments that start at the beginning of the template and end with an A. If the template is AACTA, then the fragments we would get in the ddATP test tube would be A, AA, and AACTA. Then, a sample from each environment is taken and deposited in a gel, each in its own lane. A process called electrophoresis is then used to separate the fragments according to their weight. By applying an electrical current to the gel, the fragments of DNA will migrate away from where they were deposited along their lane in the gel. Lighter, shorted DNA fragments will travel further than heavier ones. We then get clusters of fragments ordered by weight (and therefore by length) called bands. With the marked ddNTP we can reveal these bands in the gel. We know that: 1) bands are ordered by weight; 2) consecutive bands correspond to the addition of a single nucleotide; 3) in a specific lane fragments corresponding to a band end with a specific base. This knowledge is enough to deduce the sequence of the template we sequenced. An example gel is shown in Figure 1.3. This process allowed Sanger et al. to sequence the first genome, of a \\(\\varphi X174\\) bacteriophage, in 19772. Although revolutionnary, this method was costly, time consuming and labor intensive. Adjustments to this method were made in order to make it faster and less expensive. An important step was to change the way ddNTPs were marked. By using fluorescent markers, each base having a distinct “color”, we can eliminate the need to have 4 different environments and lanes in the gel34,35. This also paved the way for automating sequencing, each fluorescently marked band can be excited with a laser, and the resulting specific wavelength can be recorded by optical systems and the corresponding base automatically deduced36 (Also see Figure 1.3). Other improvements were made such as using capillary electrophoresis instead of gel electrophoresis. Figure 1.3: Overview of the sanger sequencing protocol. A) The sequence to read and all the generated fragments, with highlighted ddNTP chain terminators, ordered by molecular weight (i.e. length). B) Classical Sanger sequencing. The fragments are separated by electrophoresis and the lighter fragments travel further from the wells at the botom of the gel. Each lane in the gel correpsonds to a specific ddNTP. The radioactivly marked ddNTPs appear as black band in the gel and we can reconstruct the sequence by reading the bands from top to bottom, the column in wich the band appears indicating which base is at each position. C) Automated Sanger sequencing. The fragments are also separated by electrophoresis as in panel B. Chain terminators are marked with fluorescent markers, when excited by a laser each ddNTP emits a specific wavelength. This is read by an optical sensor and the corresponding ddNTP is recorded. By exciting each band we can deduce the sequence. These gradual improvements to the Sanger sequencing protocol, allowed to sequence longer and more accurate reads, with the latest technologies resulting in reads reaching 1 ,000 base pairs with an accuracy of 99.999%37. These improvements also resulted in a lower cost for sequencing, which was greatly decreased from around $1000 per base-pair38 to only $0.5 per kilobase37. FInally these technological improvements also increased the throughput of sequencing machines from around 1 kilobase per day38 to 120 kilobases per hour39. Despite these improvements, for ambitious endeavours such as the human genome project, sequencing was a massive undertaking: the first human genome is estimated to have cost between 500 million and 1 billion US dollars to sequence40. 1.2.2 Next-generation sequencing Through these large sequencing projects and the genomics field in general, the richness and usefulness of sequence data was made ever more apparent. This growing need of sequence data ushered in a new era of sequencing with the development of many new sequencing methods designed to have a higher throughput and a lower cost than Sanger sequencing. This second generation of sequencing technologies, also referred to as Next-Generation Sequencing (NGS) or Massively parallel sequencing. While there were different technologies, there are a few common key points41: As with Sanger sequencing, we first need to amplify and clone the DNA template, however since these technologies result in shorted reads than Sanger sequencing, the DNA we want to sequence must first be randomly broken up into small template fragments before being amplified. The amplified template fragments are attached to some sort of solid support, resulting in a physical support with billions of template fragments attached to it. As in Sanger sequencing, DNA molecules, complementary to the template fragments, are elongated. This happens for billions of fragments at the same time (hence the “massively parallel” epithet). The addition of specific nucleotides to a chain are detected in real time, and there is no chain termination. There is no need for the long step of electrophoresis. These detections are simultaneous for all the molecules being elongated at once. The result of these steps is a very large number of short reads. With data analysis these short reads can be used to deduce longer sequences and eventually a fragemented approximation of the orginal whole genome sequence through a process called assembly. The main NGS method is called “sequencing by synthesis”, developed by a company: Illumina. It is commonly referred to as llumina sequencing. This method is based on reversible chain terminators, developed at the Institut Pasteur in the 90’s42. These are marked dNTPs that can be used to elongate DNA molecules, but that have an additional molecular group that makes them terminators by default. However this terminating group can be removed once the NTP is included in a DNA molecule allowing the elongation process to continue. These dNTPs are fluorescently marked and when excited with a laser they emit light with a distinctive color. During Illumina sequencing, these reversible chain terminators are included to millions of fragments at the same time, stopping elongation. At this point all the fragments are excited with a laser and an optical system takes a picture of the emitted colors for all the fragments as once. In this image, a pixel loosely corresponds to a sequenced fragment, and its color to the most recently added dNTP. The terminating groups are then cleaved and the process can start over by incorporating a new batch of reversible terminators. By observing the successive images we can deduce the sequence of added nucleotides for each sequenced fragment and obtain all of our reads. Another NGS method is called pyrosequencing, commercialized by 454 Life Sciences. Contrary to Illumina sequencing, this method does not use reversible chain terminators. Instead it uses a special enzyme called luciferase that emits light as specific dNTPs are added. This process is repeated for the 4 dNTPs (similarly to Sanger sequencing) and from the light emissions we can deduce the sequence of nucleotides43. These technologies yield reads around 150 nucleotides for Illumina and 400nt for pyrosequencing44, this is much shorter than the 1kB reads obtainable from the latest Sanger sequencing technologies. However the throughputs are much higher39: 2.5 to 12.5 Gigabases per hour for Illumina and 30 Megabases per hour for pyrosequencing. Costs are also quite low: $0.07 and $10 per Megabase for Illumina and pyrosequencing respectively. The per-base sequencing accuracies are also quite high, up to 99.9% for both Illumina45 and pyrosequencing39. A summary of the key characteristics for various sequencing technologies can be found in Table 1.1. The lower cost and higher throughput has made the Illumina sequencing technology the dominant one, the company estimating that 90% of the world’s sequencing data was generated with Illumina machines in 201546. 1.2.3 Long read sequencing Although NGS technologies revolutionized the sequencing world, recent efforts have been made to get longer reads. These third-generation methods generate reads of tens of kilobases and are commonly called long-read sequencing method. Long reads have a host of applications47 for which short NGS reads might not be well suited: De novo assembly of large complex genomes, studying complex repetitive regions such as centromeres or telomeres or detection of structural variants. They have recently been use to assemble the first truly complete human genome, including telomeric and centromeric regions4. The two available long read technologies are: Single Molecule Real Time sequencing (SMRT), commercialized by Pacific Biosciences (PacBio) and Nanopore sequencing, commercialized by Oxford Nanopore Technologies (ONT). While both technologies are quite different they result in much longer reads than even Sanger sequencing in real time, without the need for chain terminators or separate sequencing reactions, with a high throughput and at a reasonably low cost. SMRT sequencing was first developed in 200948, before being commercialized and furthered by PacBio. The basic principle is as follows: Fragment and amplify DNA to obtain a very large number of DNA templates. Link both strands of each DNA template together with known sequences called bell adapters. Denature the DNA to create a single stranded, circular DNA molecule. Primers and polymerases are attached to the circular molecule specifically on one of the bell adapters. Add the circular DNA template, primer, polymerases complexes to a SMRT chip. This chip is essentially a large aluminium surface with hundreds of thousands of microscopic wells called Zero-Mode Waveguides (ZMWs) only 100nm in diameter49. The polymerases are chemically bonded to the bottom of each of these ZMWs so we effectively get a single DNA template and polymerase per well. Fluorescently marked dNTPs are incorporated progressively in each of the wells. When a marked dNTP is incorporated in the newly synthesized DNA brand, light of a specific wavelength is emitted. The size of these ZMWs make the detection of the fluoresence possible with an optical system. Incorporation of dNTPs in each ZMW can be detected simultaneously in a parallel fashion and the resulting sequences deduced. Nanopore sequencing, though of in the eighties, further developed along the years50 and first commercialized by ONT in 201451, is completely different from all the sequencing technologies previously mentioned. Where all the other ones are based on synthesizing a complementary DNA strand and detecting specific dNTP incorporation in some way or another, there is no synthesis in nanopore sequencing. The principle relies on feeding a single strand of a DNA template through a small hole in a membrane, a nanopore, at a controlled speed. As the nucleotides go through the nanopore, the electric current is formed between both sides of the membrane. This current can be measured and is specific to the succession of 5 to 6 nucleotides inside the nanopore channel at any given time. By looking at the evolution of the electric current as the DNA strand goes through the nanopore, we can deduce the sequence of nucleotides through a process called base calling. Base calling is usually done with machine learning methods, mainly artificial neural networks52. In the flow cells used in ONT sequencers, there are hundreds of thousands of nanopores, spread out over a synthetic membrane, allowing for massively parallel sequencing as well. Theoretically, since this method is not based on synthesis, the upper limit for read length is only limited by the length of the template, and in practice ONT sequencing produces the longest reads. Both technologies yield long reads, the median and highest read lengths being 10 kilobases and 60 kilobases respectively for PacBio sequencing53. For nanopore the median read lengths of 10 to 12 kilobases54,55 are similar to PacBio, but in it can also yield ultra-long reads of 1 up to 2.3 megabases long56–58. The length of the reads and parallel nature of these two technologies allow these sequencers to have truly massive throughputs. PacBio sequencers can sequence between 2 and 11 gigabases per hour and ONT from 12.5 gigabases per hour, up to a staggering 260 gigabases per hour for the latest ONT PromethION machines55. The cost of sequencing with these machines, while higher than for Illumina sequencers, remains reasonably affordable at $0.32 and $0.13 per megabase for PacBio and ONT respectively59. These characteristics are summarized in Table 1.1 along with other sequencing technologies. The length, throughput and sequencing cost of both these technologies paint a pretty picture, and indeed they have proved useful in many settings, sequencing accuracy however is the main problem with these technologies. The per-base sequencing accuracy has been estimated to be between 85% and 92% for PacBio sequencers and 87% to 98% for ONT machines55,60,61. This accuracy is much lower than either Sanger sequencing or Illumina reads. Characterizing, correcting and accounting for these errors is widely studied and it will be discussed in more detail in Sections 1.3 and 1.4. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-b90fbd48{table-layout:auto;width:100%;}.cl-b908883e{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b908887a{font-family:'Helvetica';font-size:6.6pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;position: relative;bottom:3.3pt;}.cl-b908a5f8{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b908ee28{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b908ee32{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b908ee33{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}technologyread length (nt)throughput (nt/hour)cost ($/Mb)accuracySanger1000120 103$50099.999%Illumina1502.5-12.5 109$0.0799.9%Pyrosequencing40030 106$1099.9%PacBio SMRT10000 (up to 60000)2-11 109$0.3285-92%Nanopore12000 (up to 2.5 106)12.5-260 109$0.1387-98% Table 1.1: Comparison of sequencing technology characteristics. Characteristics for the latest sequencers were used for the Sanger sequencing entry. The length is given in nucleotides, throughputs in sequences nuctleotides per hour and cost in US dollars per megabase. While most of the mentioned technologies can also be adapted and used to sequence RNA instead of DNA62,63, directly sequencing proteins remains a challenge. The sequence of amino acids making up a protein is usually deduced from the codons in sequenced DNA or RNA after detection of potentially coding regions called open reading frames (ORFs). Development of methods to directly sequence protein molecules using mass spectrometry was started not very long after Sanger sequencing64 and improved65. New methods are still being developed66 but protein sequencing is still a challenge. 1.3 Sequencing errors, how to account for them ? Sequencing technologies are not perfect, they make errors as we can see from the various accuracy rates reported in Section 1.2. For technologies based on nucleic acid synthesis (i.e. everything except ONT), since they use polymerases it stands to reason that the same three types of errors, described in Section 1.1.2.2, occur: substitutions, insertions and deletions. For long read technologies though, most of the errors do not come from the polymerase, but from signal processing used to deduce the sequence. Since both technologies execute single molecule sequencing, the signal to noise ratio is low67,68 making base calling more complicated. This explains the discrepancy in error rates between short and long read sequencing technologies: the former getting as low as 10-4 or 10-5 after computational processing69 where the latter are between 10% and 15%. This high error rate long reads is bothersome and many efforts have been made lower this error rate, computationally or technologically. 1.3.1 Error correction methods The long read error-correction literature and toolset is rich and active70–72. There are two main ways to correct errors: 1) hybrid methods where higher-accuracy shorter reads are used to correct errors and 2) non-hybrid methods where only the long-reads are used. In Non-hybrid methods70,73, by finding regions that overlap fairly well between reads and taking the consensus (i.e. the majority nucleotide at each position) of the overlapped regions some errors can be eliminated. In many analyses and sequencing data processing pipelines, the first step is to break up the reads into all possible overlapping subsequences of length \\(k\\) called k-mers (e.g the 3-mers of the ATTGC are ATT, TTG and TGC). Rare k-mers in the read dataset, i.e. k-mers that appear only a handful of times in all the reads, are likely the result of an error and filtering them out can improve analysis. One or both of these procedures are implemented in several pieces of commonly used software such as assembler like wtdbg274, and canu75 or standalone long-read correctors like daccord76. In some cases, errors are corrected not on the raw reads but after having assembled the long reads into long continuous sequences (contigs), this process is called polishing. The ntEdit polisher77 also filters out rare kmers to correct errors. The Arrow78 and Nanopolish79 polishers correct the assembly using the raw PacBio and ONT long reads respectively. Hybrid methods, as their name suggest, makes use of short reads to correct errors in long reads. By finding similar regions between the short and long reads we can use the higher accuracy of short reads to correct the long ones. This is implemented in many pieces of software proovread80, Jabba81, PBcR82 or LoRDEC83. Short reads can also be used to polish long read assemblies with tools like Pilon84 or Racon85. The first complete human genome was assembled and polished using many different sequencing technologies including PacBIo, ONT and Illumina technologies4. 1.3.2 More accurate sequencing methods While a lot of effort is being put into error correction, another angle of attack to lower the error rate of long reads is to improve the sequencing technology. In 2019, PacBio introduced HiFi reads, based on a circular consensus (CCS) technique86. During SRMT sequencing the 2 strands are linked together by ball adapters to form a circular DNA template (c.f. Section 1.2.3), the central idea of CCS is to sequence this molecule multiple time by going over the circle multiple times. In the resulting long sequence the known bell adapter sequences can be removed, and a consensus sequence can be built from the multiple passes over the same DNA template. This results in long-read accuracies of 99.8% to 99.9%55,86. This works because PacBio sequencing errors are mostly randomly distributed along the sequenced template (more on that in Section 1.4.2), therefore it is unlikely that the same error will appear in multiple passes over the same template portion. For ONT sequencing, most improvement efforts have been focused on base-callers. These tools were originally based on Hidden Markov Models87 (HMMs), but gradually they have been shifting over to neural network based deep learning methods52,73,88,89 with faster inference times and better performance. Similarly to PacBio HiFi reads, ONT developed 2D, and 1D2 sequencing. In 2D sequencing both strands of the DNA molecule to sequence are linked with a hairpin adapter to form one long sequenced. Each strand is sequenced once and a consensus is built from these 2 passes90. 1D2 sequencing operates in a similar fashion but without the need for a hairpin adapter91. 2D sequencing produces reads with 97% accuracy albeit much shorter than 1D sequencing90. Recently, Oxford Nanopore Technologies announced the release of a new chemistry they call duplex. Using new a chemistry, new basecaller and sequencing of both strands (similarly to 2D and 1D2) they announce raw read accuracies of 99.3%92. Pre-printed research seems to confirm these numbers with one experiment yielding duplex reads with a 99.9% accuracy93. A technologically agnostic method using unique molecular identifiers added during the template preparation phase, and consensus sequencing has been shown, in specific contexts, to improve the accuracies of both ONT and PacBio CCS long reads to 99.59% and 99.93% respectively94. Finally, new sequencing technologies are being developed, like built in error-correction short-read technologies yielding error-free reads of up to 200 nucleotides95. Illumina also recently announced its own high-throughput, high-accuracy long-read sequencing technology in 202296, although details about the performance and technology are scarce. 1.4 The special case of homopolymers Despite improvement in error correction methods and sequencing technologies, certain genetic patterns are particularly difficult to process, homopolymers are one such pattern. 1.4.1 Homopolymers and the human genome Homopolymers consist of a stretch of repeated nucleotides (i.e. \\(\\geq 2\\)) occurring at some point in the genome. For example the sequence AAAA is a length 4 adenine homopolymer. In the complete human genome assembly (CHM13 v1.1 from the T2T consortium4), 50% of its three gigabases are in homopolymers of size 2 or more, and 10% are in homopolymers of size 4 or more. As can be seen in Figure 1.4, short and medium length homopolymers make up a significant part of the genome. In a previous GRCh38 human genome assembly, more than 1.9 megabases are in homopolymers of length 8 or higher97, representing about 1‰ of that assembly. The longest homopolymer run in the CHM13 v1.1 assembly is 86 (90 in GRCh3897). Figure 1.4: Homopolymer fraction of the whole human genome by homopolymer length. The homopolymer counts were calculated from the T2T consortium full human genome assembly CHM13 v1.1. This figure was inspired by Figure 3b of reference97. In the human genome, homopolymers tend to occur more often in adenine and thymine runs than guanine and cytosine. There are are approximately twice as more nucleotides within A or T homopolymers (481 Mb and 484 Mb) than G or C (278 Mb and 279 Mb). This discrepancy is even more pronounced when looking homopolymers longer than four nucleotides (Figure 1.5). Figure 1.5: Distribution of homopolymer lengths per base in the human genome, for homopolymers of length \\(\\geq\\) 4. The homopolymer counts were calculated from the T2T consortium full human genome assembly CHM13 v1.1. 1.4.2 Homopolymers and long reads Unfortunately homopolymers are a source of errors in sequencing, particularly for long-read technologies: while substitutions seem to be randomly distributed along the reads for PacBio and ONT, the main error mode seems to be indels in homopolymeric sections, i.e. reading the same nucleotide several times or skipping over one of the repeated nucleotides. Many study show that homopolymeric indels is the main type of error for PacBIO SMRT and ONT long-read sequencing67,98–100. This is even the case for PacBio HiFi reads, while the circular concensus approach eliminates the randomly distributed substitutions homopolymer indels remain86. It seems that ONT reads are more prone to this type of error than PacBIo55. The rate of these errors is independent of the length of the homopolymer for ONT, but it rises with homopolymer length for short-read and PacBio technologies101. 1.4.3 Accounting for homopolymers The fact that they make up a significant part of the human genome, and that they are a source of errors for long read technologies means that they warrant special attention and care. Methods have been devised and implemented, specifically to counter homopolymer-linked errors. 1.4.3.1 Specific error correction Homopolymer errors are taken under special consideration during assembly polishing when using certain tools like HomoPolish102, NanoPolish79 or Pilon84. Methods to improve base calling of homopolymer stretches have been developed for nanopore sequencing103,104, and implemented in state of the art base-callers such as guppy or scrappie52. Steps before sequencing can also be taken in order to reduce the effect of these errors, like avoiding homopolymers in barcode sequences105,106. or during the development of DNA based storage systems107. Improving the sequencing technologies can also be a solution by reducing the number of homopolymer errors straight from the source. The latest ONT chemistry R.10 reportedly improves accuracy in homopolymer rich regions73,108, non-biological solid-state nanopores also reduces errors in homopolymers109,110. 1.4.3.2 Homopolymer compression, a nifty trick In many cases, reads cannot be re-sequenced with newer technologies, or base-called with better base callers. Only the read sequences, potentially containing homopolymer errors, are available for usage. In order to account for this sort of error, a simple pre-processing trick was developed: homopolymer compression (HPC). The idea is very simple, for any sequence replace a repeated run of any nucleotide (i.e. homopolymers) by a single occurrence of that nucleotide. This means that after going through HPC the sequence AAACTGGG will yield the sequence ACTG. This simple pre-processing step, applied to all the reads and sequences to analyze removes all indels in homopolymers, and can resolve some ambiguities (c.f. Figure 1.6). It can also remove legitimate information contained in homopolymers, however the trade-off with the reduced error rate has been deemed advantageous. HPC has been implemented in many sequence bioinformatics software tools. The HiCanu111, MDBG112, wtdbg274, shasta113 assemblers all use HPC under the hood to provide better assemblies, and it was used to assemble the complete human genome sequence4. The first published usage of HPC, was actually in the CABOG assembler114 developed for pyrosequencing reads. HPC has also been implemented for other tasks, like clustering115, long read error correction with LSC116 and LSCPlus117, alignment with minimap2118 and winnowmap2119, or specific analysis pipelines for satellite tandem repeats120. Figure 1.6: Homopolymer compression can help resolve ambiguities due to sequencing errors. A read with homopolymer related sequencing errors can be homologous to two different regions of the reference genome, with one discrepancy for each region. After applying HPC, this ambiguity is properly accounted for and the read is homologous to only one region. This figure, however, only shows one way homopolymers can be detrimental to mapping and others are possible3. 1.5 Conclusion I hope, after reading this chapter, you will agree with me that sequencing is fundamental for furthering our knowledge of biological processes, organisms and Life in general. And as such, the sequencing field is still very active with new technologies being developed, to improve the current technologies in various aspects: Illumina promising high accuracy long reads with Infinity96, PacBio developing its own short read sequencing technology, moving away from sequencing by synthesis121,122. Finally efforts are also being made to make sequencing more affordable and available in a greater number settings with Ultima genomics promising accurate short reads for as low as $1 per gigabase123. With all these technological improvements we are approaching an era where sequencing is easy and quick, opening the door for massive projects like Tara Oceans124 or the BioGenome project125 to better understand biodiversity. Routine whole-genome sequencing could usher in an era personalized medicine126. Despite all these advancements, sequencing errors remain an obstacle to certain analyses. This is particularly true for the ever more used and useful long reads, and the important fraction of genomes made up of homopolymers. Detecting, removing or accounting for these errors in some way is a crucial step to improve any analysis based on sequencing data, and to make sure that no theory or conclusion are built upon erroneous sequence data. Finally, it is important to note (at least for the remainder of this thesis) that, from a computational standpoint, a biological sequence is simply a succession of letters and a set of reads is simply a text file. Therefore many analysis and data processing methods are inspired or directly transposed from the field of text algorithmics. References 1. Watson, J. D. &amp; Crick, F. H. C. The Structure of Dna. Cold Spring Harbor Symposia on Quantitative Biology 18, 123–131 (1953). 2. Sanger, F. et al. Nucleotide sequence of bacteriophage φX174 DNA. Nature 265, 687–695 (1977). 3. Archer, C. T. et al. The genome sequence of e. Coli w (ATCC 9637): Comparative genome analysis and an improved genome-scale reconstruction of e. coli. BMC Genomics 12, 9 (2011). 4. Nurk, S. et al. The complete sequence of a human genome. Science 376, 44–53 (2022). 5. Pellicer, J., Fay, M. F. &amp; Leitch, I. J. The largest eukaryotic genome of them all? Botanical Journal of the Linnean Society 164, 10–15 (2010). 6. Macgregor, H. C. C-Value Paradox. in (eds. Brenner, S. &amp; Miller, J. H.) 249–250 (Academic Press, 2001). doi:10.1006/rwgn.2001.0301. 7. Alberts, B. et al. Molecular Biology of the Cell. 4th edition. (Garland Science, 2002). doi:10.1201/9781315735368. 8. Crick, F. H. C., Barnett, L., Brenner, S. &amp; Watts-Tobin, R. J. General Nature of the Genetic Code for Proteins. Nature 192, 1227–1232 (1961). 9. International Human Genome Sequencing Consortium. Finishing the euchromatic sequence of the human genome. Nature 431, 931–945 (2004). 10. Elkon, R. &amp; Agami, R. Characterization of noncoding regulatory DNA in the human genome. Nature Biotechnology 35, 732–746 (2017). 11. Omenn, G. S. Reflections on the HUPO human proteome project, the flagship project of the human proteome organization, at 10 years. Molecular &amp; Cellular Proteomics : MCP 20, 100062 (2021). 12. Shabalina, S. A. &amp; Spiridonov, N. A. The mammalian transcriptome and the function of non-coding DNA sequences. Genome Biology 5, 105 (2004). 13. ENCODE Project Consortium. An integrated encyclopedia of DNA elements in the human genome. Nature 489, 57–74 (2012). 14. Chatterjee, N. &amp; Walker, G. C. Mechanisms of DNA damage, repair, and mutagenesis: DNA Damage and Repair. Environmental and Molecular Mutagenesis 58, 235–263 (2017). 15. Fijalkowska, I. J., Schaaper, R. M. &amp; Jonczyk, P. DNA replication fidelity in escherichia coli: A multi-DNA polymerase affair. FEMS microbiology reviews 36, 1105–1121 (2012). 16. Pray, L. DNA replication and causes of mutation. Nature education 1, 214 (2008). 17. Gout, J.-F., Thomas, W. K., Smith, Z., Okamoto, K. &amp; Lynch, M. Large-scale detection of in vivo transcription errors. Proceedings of the National Academy of Sciences 110, 18584–18589 (2013). 18. Gout, J.-F. et al. The landscape of transcription errors in eukaryotic cells. Science Advances 3, e1701484 (2017). 19. Shcherbakov, D. et al. Ribosomal mistranslation leads to silencing of the unfolded protein response and increased mitochondrial biogenesis. Communications Biology 2, 1–16 (2019). 20. Desouky, O., Ding, N. &amp; Zhou, G. Targeted and non-targeted effects of ionizing radiation. Journal of Radiation Research and Applied Sciences 8, 247–254 (2015). 21. Kiefer, J. Effects of Ultraviolet Radiation on DNA. in (eds. Obe, G. &amp; Vijayalaxmi) 39–53 (Springer, 2007). doi:10.1007/978-3-540-71414-9_3. 22. Bennett, J. W. &amp; Klich, M. Mycotoxins. Clinical Microbiology Reviews 16, 497–516 (2003). 23. Kantidze, O. L., Velichko, A. K., Luzhin, A. V. &amp; Razin, S. V. Heat stress-induced DNA damage. Acta Naturae 8, 75–78 (2016). 24. Gregory, C. D. &amp; Milner, A. E. Regulation of cell survival in Burkitt lymphoma: implications from studies of apoptosis following cold-shock treatment. International Journal of Cancer 57, 419–426 (1994). 25. Gafter-Gvili, A. et al. Oxidative stress-induced DNA damage and repair in human peripheral blood mononuclear cells: Protective role of hemoglobin. PLoS ONE 8, e68341 (2013). 26. Roth, J. R. Frameshift mutations. Annual Review of Genetics 8, 319–346 (1974). 27. Kujovich, J. L. Factor V Leiden thrombophilia. Genetics in Medicine 13, 1–16 (2011). 28. Cutting, G. R. Cystic fibrosis genetics: from molecular understanding to clinical application. Nature Reviews Genetics 16, 45–56 (2015). 29. Fuchsberger, C. et al. The genetic architecture of type 2 diabetes. Nature 536, 41–47 (2016). 30. Morris, A. P. et al. Large-scale association analysis provides insights into the genetic architecture and pathophysiology of type 2 diabetes. Nature genetics 44, 981–990 (2012). 31. Woodford, N. &amp; Ellington, M. J. The emergence of antibiotic resistance by mutation. Clinical Microbiology and Infection 13, 5–18 (2007). 32. Rhee, S.-Y. et al. Human immunodeficiency virus reverse transcriptase and protease sequence database. Nucleic Acids Research 31, 298–303 (2003). 33. Sanger, F., Nicklen, S. &amp; Coulson, A. R. DNA sequencing with chain-terminating inhibitors. Proceedings of the National Academy of Sciences 74, 5463–5467 (1977). 34. Smith, L. M., Fung, S., Hunkapiller, M. W., Hunkapiller, T. J. &amp; Hood, L. E. The synthesis of oligonucleotides containing an aliphatic amino group at the 5′ terminus: Synthesis of fluorescent DNA primers for use in DNA sequence analysis. Nucleic Acids Research 13, 2399–2412 (1985). 35. Smith, L. M. et al. Fluorescence detection in automated DNA sequence analysis. Nature 321, 674–679 (1986). 36. Ansorge, W., Sproat, B., Stegemann, J., Schwager, C. &amp; Zenke, M. Automated DNA sequencing: Ultrasensitive detection of fluorescent bands during electrophoresis. Nucleic Acids Research 15, 4593–4602 (1987). 37. Shendure, J. &amp; Ji, H. Next-generation DNA sequencing. Nature Biotechnology 26, 1135–1145 (2008). 38. Collins, F. S., Morgan, M. &amp; Patrinos, A. The human genome project: Lessons from large-scale biology. Science 300, 286–290 (2003). 39. Liu, L. et al. Comparison of Next-Generation Sequencing Systems. Journal of Biomedicine and Biotechnology 2012, e251364 (2012). 40. The Cost of Sequencing a Human Genome. 41. Metzker, M. L. Sequencing technologies — the next generation. Nat Rev Genet 11, 31–46 (2010). 42. Canard, B. &amp; Sarfati, R. S. DNA polymerase fluorescent substrates with reversible 3’-tags. Gene 148, 1–6 (1994). 43. Nyren, P., Pettersson, B. &amp; Uhlen, M. Solid Phase DNA Minisequencing by an Enzymatic Luminometric Inorganic Pyrophosphate Detection Assay. Analytical Biochemistry 208, 171–175 (1993). 44. Mardis, E. R. A decade’s perspective on DNA sequencing technology. Nature 470, 198–203 (2011). 45. Stoler, N. &amp; Nekrutenko, A. Sequencing error profiles of illumina sequencing instruments. NAR Genomics and Bioinformatics 3, lqab019 (2021). 46. Sequencing Technology | Sequencing by synthesis. 47. Pollard, M. O., Gurdasani, D., Mentzer, A. J., Porter, T. &amp; Sandhu, M. S. Long reads: Their purpose and place. Human Molecular Genetics 27, R234–R241 (2018). 48. Eid, J. et al. Real-time DNA sequencing from single polymerase molecules. Science 323, 133–138 (2009). 49. Levene, M. J. et al. Zero-mode waveguides for single-molecule analysis at high concentrations. Science 299, 682–686 (2003). 50. Clarke, J. et al. Continuous base identification for single-molecule nanopore DNA sequencing. Nature Nanotechnology 4, 265–270 (2009). 51. Deamer, D., Akeson, M. &amp; Branton, D. Three decades of nanopore sequencing. Nature Biotechnology 34, 518–524 (2016). 52. Wick, R. R., Judd, L. M. &amp; Holt, K. E. Performance of neural network basecalling tools for Oxford Nanopore sequencing. Genome Biology 20, 129 (2019). 53. Rhoads, A. &amp; Au, K. F. PacBio Sequencing and Its Applications. Genomics, Proteomics &amp; Bioinformatics 13, 278–289 (2015). 54. Ip, C. L. C. et al. MinION analysis and reference consortium: Phase 1 data release and analysis. F1000Research 4, 1075 (2015). 55. Logsdon, G. A., Vollger, M. R. &amp; Eichler, E. E. Long-read human genome sequencing and its applications. Nat Rev Genet 21, 597–614 (2020). 56. Jain, M. et al. Nanopore sequencing and assembly of a human genome with ultra-long reads. Nature Biotechnology 36, 338–345 (2018). 58. Payne, A., Holmes, N., Rakyan, V. &amp; Loose, M. BulkVis: A graphical viewer for oxford nanopore bulk FAST5 files. Bioinformatics 35, 2193–2198 (2019). 59. Murigneux, V. et al. Comparison of long-read methods for sequencing and assembly of a plant genome. GigaScience 9, giaa146 (2020). 60. Chaisson, M. J. P. et al. Resolving the complexity of the human genome using single-molecule sequencing. Nature 517, 608–611 (2015). 61. Jain, M., Olsen, H. E., Paten, B. &amp; Akeson, M. The Oxford Nanopore MinION: delivery of nanopore sequencing to the genomics community. Genome Biology 17, 239 (2016). 62. Hong, M. et al. RNA sequencing: New technologies and applications in cancer research. Journal of Hematology &amp; Oncology 13, 166 (2020). 63. Ozsolak, F. &amp; Milos, P. M. RNA sequencing: advances, challenges and opportunities. Nature Reviews Genetics 12, 87–98 (2011). 64. Hunt, D. F., Yates, J. R., Shabanowitz, J., Winston, S. &amp; Hauer, C. R. Protein sequencing by tandem mass spectrometry. Proceedings of the National Academy of Sciences 83, 6233–6237 (1986). 65. Smith, B. J. Protein Sequencing Protocols. (Springer Science &amp; Business Media, 2002). doi:10.1385/1592593429. 66. Restrepo-Pérez, L., Joo, C. &amp; Dekker, C. Paving the way to single-molecule protein sequencing. Nature Nanotechnology 13, 786–796 (2018). 67. Weirather, J. L. et al. Comprehensive comparison of pacific biosciences and oxford nanopore technologies and their applications to transcriptome analysis. F1000Research 6, 100 (2017). 68. Wang, Y., Zhao, Y., Bollas, A., Wang, Y. &amp; Au, K. F. Nanopore sequencing technology, bioinformatics and applications. Nature Biotechnology 39, 1348–1365 (2021). 69. Ma, X. et al. Analysis of error profiles in deep next-generation sequencing data. Genome Biology 20, 50 (2019). 70. Lima, L. et al. Comparative assessment of long-read error correction software applied to nanopore RNA-sequencing data. Briefings in Bioinformatics 21, 1164–1181 (2020). 72. Zhang, H., Jain, C. &amp; Aluru, S. A comprehensive evaluation of long read error correction methods. BMC Genomics 21, 889 (2020). 73. Amarasinghe, S. L. et al. Opportunities and challenges in long-read sequencing data analysis. Genome Biology 21, 30 (2020). 74. Ruan, J. &amp; Li, H. Fast and accurate long-read assembly with wtdbg2. Nature Methods 17, 155–158 (2020). 75. Koren, S. et al. Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. Genome Research 27, 722–736 (2017). 76. Tischler, G. &amp; Myers, E. W. Non Hybrid Long Read Consensus Using Local De Bruijn Graph Assembly. 106252 (2017) doi:10.1101/106252. 77. Warren, R. L. et al. ntEdit: Scalable genome sequence polishing. Bioinformatics 35, 4430–4432 (2019). 78. Hepler, N. L. et al. An improved circular consensus algorithm with an application to detect HIV-1 drug-resistance associated mutations (DRAMs). in (2016). 79. Simpson, J. T. et al. Detecting DNA cytosine methylation using nanopore sequencing. Nature Methods 14, 407–410 (2017). 80. Hackl, T., Hedrich, R., Schultz, J. &amp; Förster, F. Proovread : Large-scale high-accuracy PacBio correction through iterative short read consensus. Bioinformatics 30, 3004–3011 (2014). 81. Miclotte, G. et al. Jabba: Hybrid error correction for long sequencing reads. Algorithms for Molecular Biology 11, 10 (2016). 82. Koren, S. et al. Hybrid error correction and de novo assembly of single-molecule sequencing reads. Nature Biotechnology 30, 693–700 (2012). 83. Salmela, L. &amp; Rivals, E. LoRDEC: Accurate and efficient long read error correction. Bioinformatics 30, 3506–3514 (2014). 84. Walker, B. J. et al. Pilon: An Integrated Tool for Comprehensive Microbial Variant Detection and Genome Assembly Improvement. PLOS ONE 9, e112963 (2014). 85. Vaser, R., Sović, I., Nagarajan, N. &amp; Šikić, M. Fast and accurate de novo genome assembly from long uncorrected reads. Genome Research 27, 737–746 (2017). 86. Wenger, A. M. et al. Accurate circular consensus long-read sequencing improves variant detection and assembly of a human genome. Nature Biotechnology 37, 1155–1162 (2019). 87. Timp, W., Comer, J. &amp; Aksimentiev, A. DNA Base-Calling from a Nanopore Using a Viterbi Algorithm. Biophysical Journal 102, L37–L39 (2012). 88. Perešíni, P., Boža, V., Brejová, B. &amp; Vinař, T. Nanopore base calling on the edge. Bioinformatics 37, 4661–4667 (2021). 89. Boža, V., Brejová, B. &amp; Vinař, T. DeepNano: Deep recurrent neural networks for base calling in MinION nanopore reads. PLOS ONE 12, e0178751 (2017). 90. Tyler, A. D. et al. Evaluation of Oxford Nanopore’s MinION Sequencing Device for Microbial Whole Genome Sequencing Applications. Scientific Reports 8, 10931 (2018). 91. Lin, B., Hui, J. &amp; Mao, H. Nanopore Technology and Its Applications in Gene Sequencing. Biosensors 11, 214 (2021). 92. Oxford Nanopore Tech Update: new Duplex method for Q30 nanopore single molecule reads, PromethION 2, and more. 93. Sanderson, N. et al. Comparison of R9.4.1/Kit10 and R10/Kit12 Oxford Nanopore flowcells and chemistries in bacterial genome reconstruction. doi:10.1101/2022.04.29.490057. 94. Karst, S. M. et al. High-accuracy long-read amplicon sequences using unique molecular identifiers with Nanopore or PacBio sequencing. Nature Methods 18, 165–169 (2021). 95. Chen, Z. et al. Highly accurate fluorogenic DNA sequencing with information theorybased error correction. Nature Biotechnology 35, 1170–1178 (2017). 96. High Performance Long Read Assay Enables Contiguous Data up to 10Kb on Existing Illumina Platforms. 97. Booeshaghi, A. S. &amp; Pachter, L. Pseudoalignment facilitates assignment of error-prone Ultima Genomics reads. doi:10.1101/2022.06.04.494845. 98. Delahaye, C. &amp; Nicolas, J. Sequencing DNA with nanopores: Troubles and biases. PLOS ONE 16, e0257521 (2021). 100. Dohm, J. C., Peters, P., Stralis-Pavese, N. &amp; Himmelbauer, H. Benchmarking of long-read correction methods. NAR Genomics and Bioinformatics 2, (2020). 101. Foox, J. et al. Performance assessment of DNA sequencing platforms in the ABRF Next-Generation Sequencing Study. Nature Biotechnology 39, 1129–1140 (2021). 102. Huang, Y.-T., Liu, P.-Y. &amp; Shih, P.-W. Homopolish: A method for the removal of systematic errors in nanopore sequencing by homologous polishing. Genome Biology 22, 95 (2021). 103. Rang, F. J., Kloosterman, W. P. &amp; Ridder, J. de. From squiggle to basepair: Computational approaches for improving nanopore sequencing read accuracy. Genome Biology 19, 90 (2018). 104. Sarkozy, P., Jobbágy, Á. &amp; Antal, P. Calling Homopolymer Stretches from Raw Nanopore Reads by Analyzing k-mer Dwell Times. in (eds. Eskola, H., Väisänen, O., Viik, J. &amp; Hyttinen, J.) 241–244 (Springer, 2018). doi:10.1007/978-981-10-5122-7_61. 105. Hawkins, J. A., Jones, S. K., Finkelstein, I. J. &amp; Press, W. H. Indel-correcting DNA barcodes for high-throughput sequencing. Proceedings of the National Academy of Sciences 115, E6217–E6226 (2018). 106. Srivathsan, A. et al. A MinION-based pipeline for fast and cost-effective DNA barcoding. Molecular Ecology Resources 18, 1035–1049 (2018). 107. Wang, Y., Noor-A-Rahim, Md., Gunawan, E., Guan, Y. L. &amp; Poh, C. L. Construction of bio-constrained code for DNA data storage. IEEE Communications Letters 23, 963–966 (2019). 108. R10.3: the newest nanopore for high accuracy nanopore sequencing now available in store. 109. Zhou, L. et al. Detection of DNA homopolymer with graphene nanopore. Journal of Vacuum Science &amp; Technology B 37, 061809 (2019). 110. Goto, Y., Yanagi, I., Matsui, K., Yokoi, T. &amp; Takeda, K. Identification of four single-stranded DNA homopolymers with a solid-state nanopore in alkaline CsCl solution. Nanoscale 10, 20844–20850 (2018). 111. Nurk, S. et al. HiCanu: Accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads. Genome Res. 30, 1291–1305 (2020). 112. Ekim, B., Berger, B. &amp; Chikhi, R. Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer. Cell Systems 12, 958–968.e6 (2021). 113. Shafin, K. et al. Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes. Nature Biotechnology 38, 1044–1053 (2020). 114. Miller, J. R. et al. Aggressive assembly of pyrosequencing reads with mates. Bioinformatics 24, 2818–2824 (2008). 115. Sahlin, K. &amp; Medvedev, P. De Novo Clustering of Long-Read Transcriptome Data Using a Greedy, Quality Value-Based Algorithm. Journal of Computational Biology 27, 472–484 (2020). 116. Au, K. F., Underwood, J. G., Lee, L. &amp; Wong, W. H. Improving PacBio Long Read Accuracy by Short Read Alignment. PLOS ONE 7, e46679 (2012). 117. Hu, R., Sun, G. &amp; Sun, X. LSCplus: a fast solution for improving long read accuracy by short read alignment. BMC Bioinformatics 17, 451 (2016). 118. Li, H. Minimap2: Pairwise alignment for nucleotide sequences. Bioinformatics 34, 3094–3100 (2018). 119. Jain, C. et al. Weighted minimizer sampling improves long read mapping. Bioinformatics 36, i111–i118 (2020). 120. Van Neste, C., Van Nieuwerburgh, F., Van Hoofstat, D. &amp; Deforce, D. Forensic STR analysis using massive parallel sequencing. Forensic Science International: Genetics 6, 810–818 (2012). 121. Short-read sequencing by binding. 122. Cetin, A. E. et al. Plasmonic sensor could enable label-free DNA sequencing. ACS Sensors 3, 561–568 (2018). 123. Almogy, G. et al. Cost-efficient whole genome-sequencing using novel mostly natural sequencing-by-synthesis chemistry and open fluidics platform. doi:10.1101/2022.05.29.493900. 124. Sunagawa, S. et al. Tara Oceans: towards global ocean ecosystems biology. Nature Reviews Microbiology 18, 428–445 (2020). 125. Lewin, H. A. et al. Earth BioGenome project: Sequencing life for the future of life. Proceedings of the National Academy of Sciences 115, 4325–4333 (2018). 126. Lightbody, G. et al. Review of applications of high-throughput sequencing in personalized medicine: Barriers and facilitators of future progress in research and clinical application. Briefings in Bioinformatics 20, 1795–1811 (2019). Homopolymer indels can be harmful in opposite circumstances as well.Let us consider, for example, a read that should map to several repetitions of a conserved motif. Homopolymer indels can artificially resolve an ambiguity by making the read unique and prefer a specific repetition of the motif or entirely misplace the read.↩︎ "],["aligning-sequence-data.html", "Chapter 2 Aligning sequence data 2.1 What is an alignment ? 2.2 How do we speed up pairwise alignment ? 2.3 The specificities of read-mapping 2.4 Multiple sequence alignment 2.5 Conclusion", " Chapter 2 Aligning sequence data 2.1 What is an alignment ? In biology, comparison is at the heart of many studies: between individuals, between species, between sequencing runs, etc… In order to do this at a fine grained level and extract knowledge from it we need to compare what is comparable, this is where sequence alignment steps in. In broad terms, during sequence alignment, we aim to find regions similar to each other in two or more sequences and group them together. When this process is done with only two sequences it is called a pairwise alignment, when three or more sequences are used it is called multiple alignment. We will first focus on pairwise alignment as it was used as the basis for the more complex multiple alignment. 2.1.1 Why align ? The first question we might ask ourselves is why align at all, if we want to compare two sequences there are plenty of distances and metrics out there to use. Something like the Hamming distance127 is very quick and easy to compute by comparing characters two by two. It is however ill-suited to our needs in biology: while it can handle substitutions but indels induce very large Hamming distances. Indeed, insertions and/or deletions shift one of the sequences, compared to the other, and introduce many character-to-character differences that could be explained by a single indel. For example, let us consider the two following sequences: ATGTGCAGTA and AGTGCAGTAC. if we count the differences character by character, except the first pair of A, all the characters are different (c.f. below). However if we consider that the first T was deleted and a C was inserted at the end of the second sequence then we can see that none of the characters are actually different. In order to represent insertions and deletions gaps are inserted in the sequences as seen below: ATGTGCAGTA- A-GTGCAGTAC This problem of comparing two sequences with insertions or deletions is a fairly studied one in text algorithmics: the string-edit problem128. Some metrics like the Levenshtein distance129 and the edit distance128 exist and are closely related to the pairwise sequence alignment problem, finding the minimal number of substitution, insertion of deletion operations to go from one sequence to the other. Sequence alignments have many downstream use-cases. They are the basis of comparative genomics130 and are used to infer evolutionary relationships and phylogenetic tree reconstruction methods usually take as input multiple alignments131–135. Sequence alignments have been used to study protein structure136,137 and function138,139. They can be used to correct sequencing errors80,82,140 or detect structural variations in genomes141,142. All this to say that they are absolutely fundamental to the field of computational biology and errors in alignments can lead to errors somewhere down the line. 2.1.2 How to align two sequences ? There are two approaches for pairwise alignment143: global alignment where the entirety of both sequences is used when aligning them, and local alignment where we only seek to find regions in each sequence that are most similar to each other. Global alignment is used when the two sequences are expected to be quite similar (e.g. comparing two related proteins), whereas local alignment is mostly used when we expect the sequences to be fairly different but with highly similar regions, like genomes of two distantly related species that share a highly conserved region. The seminal method for global pairwise alignment was the Needleman-Wünsch algorithm144 based on a dynamic programming method. A decade later, the Smith-Waterman algorithm145 was developed with similar ideas to perform local alignment. Both are still used today for pairwise alignment. Dynamic programming is often used to solve complex problems by breaking it into smaller sub-problems and solving each one optimally and separately146,147, it is particularly useful when we wish to have a precise alignment between 2 sequences. 2.1.2.1 Global alignment The fundamental algorithm for globally aligning two sequences was the Needleman-Wünsch (NW) algorithm144, this can be conceptualized in one of two equivalent ways: finding the alignment with 1) the lowest edit-distance or 2) the highest alignment score. These two are equivalent so in this section we will maximize the alignment score. The first thing that is needed is, given an alignment, how to compute an alignment score. To do this we need to assign costs to each operation. Usually matches (i.e. aligning two identical characters) are given a positive cost and mismatches or indels a negative cost. If we assign a cost of +1 to a match and a cost of -1 to mismatches and indels then the alignment presented above in Section 2.1.1 would have an alignment score of 9 - 2 = 7 (9 matches and two indels). The NW algorithm is based on a simple recurrence relation: the optimal alignment score of two sequences \\(S_1\\) and \\(S_2\\) of lengths \\(n\\) and \\(m\\) respectively is the maximum of: The optimal alignment score of \\(S_1[1,n-1]\\)4 and \\(S_2[1,m-1]\\) plus the cost of a match or mismatch between the \\(n^{th}\\) character of \\(S_1\\) and the \\(m^{th}\\) character of \\(S_2\\) The optimal alignment score of \\(S_1\\) and \\(S_2[1,m-1]\\) plus the cost of an indel The optimal alignment score of \\(S_1[1,n-1]\\) and \\(S_2\\) plus the cost of an indel This simple relation can be used to compute optimal global alignment score for two sequences, however if it is implemented naively it can be very inefficient as the number of scores to compute grows exponentially with sequence lengths, and many intermediary alignment scores need to be computed many times. This is where dynamic programming comes in: these intermediary costs are pre-computed in an efficient manner and one can then deduce the optimal alignment from these. This pre-computing step is usually represented as filling out a matrix whose rows and columns represent the characters in each sequence to be aligned. If \\(S_1\\) represents the rows of the matrix, and \\(S_2\\) the columns, the value \\(C(i,j)\\) of a cell \\((i,j)\\) of this matrix represents the optimal alignment score between \\(S_1[1,i]\\) and \\(S_2[1,j]\\). In the recurrence relation described above the alignment score as dependant on the optimal alignment scores of subsequences, when filling out the dynamic programming matrix we proceed in the inverse fashion by using the scores of short subsequences to build up the scores of progressively longer sequences. We will go here through a short example showing how the NW algorithm is used to align two short sequences: \\(S_1=\\)ACCTGA and \\(S_2=\\)ACGGA. The first step is to represent the dynamic programming matrix, prefix each sequence with an empty character and label the rows of the matrix with one of the sequences and the columns with the other (this extra row and column at the beginning of each sequence are indexed as column and row 0). In this matrix, due to the recurrence relation stated above, the score of a particular cell, \\(C(i,j)\\) is the maximum of: The score in the diagonally adjacent cell \\(C(i-1,j-1)\\) plus the cost of a match or mismatch between \\(S_1[i]\\) and \\(S_2[j]\\). The score of the cell to the left \\(C(i,j-1)\\) plus the cost of an indel The score of the cell on top \\(C(i-1,j)\\) plus the cost of an indel Therefore in order to compute \\(C(i,j)\\) we need to know the three values of \\(C(i-1,j-1)\\), \\(C(i-1,j)\\) and \\(C(i,j-1)\\). This is the reason why we start with an extra column and row at the beginning of each sequence that we can fill out with the increasing costs of indels. In our case since the cost of an indel is -1, this row and column are filled out with decreasing relative integers, as can be seen in Figure 2.1A. From this starting point we can fill out the Dynamic programming matrix with all the alignment scores. To compute \\(C(1,1)\\) we have three possible values: \\(C(0,0)\\) plus the cost of a match between \\(S_1[1]=A\\) and \\(S_2[1]=A\\): \\(0+1=1\\) \\(C(0,1)\\) plus the cost of an indel: \\(-1 -1 = -2\\) \\(C(0,1)\\) plus the cost of an indel: \\(-1-1=-2\\) By taking the maximum out of these three values we can fill out the matrix with \\(C(1,1)=1\\). By continuing this process until we fill out the whole we obtain the scores visible below. This is enough if we only want to compute the optimal global alignment score between \\(S_1\\) and \\(S_2\\), however if we want to deduce the operations leading to alignment, and therefore the alignment itself, we need to keep track of which operation we made to get a specific score. The easiest way to do that is to also consider this matrix as a graph where each cell is a vertex. When we compute the score of cell \\((i,j)\\) we add an edge from this cell to the previous cell that was used to compute \\(C(i,j)\\). In our example above, we obtained \\(C(1,1)\\) from a match and \\(C(0,0)\\), so we can add an edge in our graph going from cell \\((1,1)\\) to cell \\((0,0)\\). The filled out matrix with the graph edges represented as arrows can be seen in Figure 2.1B. Figure 2.1: Example global alignment with the Needleman-Wunsch algorithm. This figure represents three different steps in the NW algorithm, with a match cost of +1, a mismatch cost of -1 and an indel cost of -1. A) the matrix is initialized with \\(S_1\\) as the columns and \\(S_2\\) as the rows. Column and row 0 are filled out. B) The dynamic programming matrix is filled out, and the alignment graph is constructed. C) The alignment graph is traversed from the vertex in the bottom right cell to the vertex in the top left cell. Each of the three possible paths corresponds to an optimal global alignment, represented on the right. Once this matrix (and corresponding graph) is filled out, we can deduce the alignment by following a path through the graph starting at cell \\((n,m)\\) to cell \\((0,0)\\). A diagonal edge starting at \\((i,j)\\) indicates a match or mismatch between \\(S_1[i]\\) and \\(S_2[j]\\), a vertical edge indicates a gap in \\(S_2\\) and a horizontal edge a gap in \\(S_1\\). This can lead to several optimal alignments if there are several such paths in the graph. In our case this algorithm yields three equally optimal global alignments shown in Figure 2.1C. This algorithm although guaranteed to result in an optimal alignment, has a time complexity of \\(O(nm)\\) where \\(n\\) and \\(m\\) are the lengths of the sequences to align143. Some methods have been proposed to speed up148, however the complexity is still \\(O(nm/\\log(n))\\). Lower bounds have been studied and there is not much optimization to be done if optimal exact alignment are needed149,150. If we want to do better we have to rely on heuristics. Another issue is space complexity since we need to store the matrix, the space complexity is also \\(O(nm)\\). If we wish to align 2 human genomes we would need to store \\(\\approx 10^{19}\\) matrix cells, which would amount to 10 Exabytes of storage if we use 8bit integers (i.e. the storage scale of a data-center). However, in practice, we can do much better than that, and construct an optimal alignment in linear space complexity \\(O(n+m)\\)151 meaning we would only need a couple gigabytes to store the matrix for 2 human genomes. This resulted in an improved global alignment algorithm, the Myers-Miller algorithm152, implemented in the EMBOSS stretcher alignment software153. 2.1.2.2 Local alignment In global alignment two full sequences are aligned to each other. In local alignment the goal is to find the optimal alignment of two subsequences from these parent sequences. The main algorithm for locally aligning is the Smith-Waterman (SW) algorithm145 developed a decade later than NW. The two algorithms are very similar, SW also relies on first building the dynamic programming matrix with the same parametrizable costs for matches, mismatches and indels as NW. One key difference is that the optimal scores in the matrix are bound by 0 so they cannot become negative, we only store edges in the alignment graph is the starting cell has an alignment score &gt; 0. In this new formulation, the score in cell \\(C(i,j)\\) is the maximum of the following values: The score in the diagonally adjacent cell \\(C(i-1,j-1)\\) plus the cost of a match or mismatch between \\(S_1[i]\\) and \\(S_2[j]\\). The score of the cell to the left \\(C(i,j-1)\\) plus the cost of an indel. The score of the cell on top \\(C(i-1,j)\\) plus the cost of an indel. \\(0\\). If we use the SW algorithm to locally align the two example sequences \\(S_1\\) and \\(S_2\\) and the same costs as used above, we obtain the dynamic programming matrix and graph shown in Figure 2.2. Figure 2.2: Example local alignment with the Smith-Waterman algorithm. Two sequences \\(S_1\\) and \\(S_2\\) (the same as in Figure 2.1) are locally aligned. A match has a cost of +1, a mismatch a cost of -1 and indels a cost of -1. A) The dynamic programming matrix is filled out and the alignment graph constructed. Alignment scores are constrained to be non-negative. B) We find paths in the graph between the vertex with the maximal score and a score of 0. Here there are two such paths resulting in two optimal local alignments represented on the right. The traceback part to determine the optimal alignment is very similar to NW, however instead of starting at cell \\((n,m)\\), we start at the cell in with the maximal alignment score and follow the path back until we arrive at a cell with an alignment score of 0. In the example shown in Figure 2.2, two cells contain the maximal alignment score of 2. Tracing back from these cells gives two optimal local alignments between \\(S_1\\) and \\(S_2\\): AC to AC and GA to GA. Since the SW algorithm is so similar to NW it has the same quadratic time and space complexity, however the same optimization can be used to bring it down to a linear space complexity143. Optimizations were resulted in the Huang and Miller algorithm154 which is implemented in the EMBOSS Lalign tool153, and the Waterman Eggert algorithm155. Both the NW and the SW algorithms are implemented in many different software tools and are used widely to perform pairwise alignments of short sequences153,156,157. Some versions even benefit from hardware acceleration with version implemented for specific CPU instruction sets158 or GPUs159 to substantially speed up alignment. 2.1.3 Scoring and substitution models In the examples used above to present the NW and SW algorithms, we used a very simple cost function: a match has a cost of +1 while mismatches and indels have a cost of -1. This is really the simplest cost function we can use but also the crudest. In many cases it may be interesting to infuse this cost function with biological knowledge. For example some substitutions might occur more rarely than others in nature so it would stand to reason to penalize those more than other, more common, substitutions. These biology-aware cost functions usually take the form of a matrix, called scoring or substitution matrix corresponding to an underlying evolutionary model. When using these matrices, matches and mismatches between specific characters are given. For example the cost of aligning an A and a T might be lower than aligning that same A with a G. A lot of different substitution matrices have been developed especially for protein alignments160, developed with different techniques and underlying models and with different use-cases. The earliest and simplest substitution matrices are match/mismatch matrices, they are effectively what we used above where all matches are given a fixed positive score and all mismatches a fixed negative score. In our examples above the corresponding substitution matrix would be a four by four matrix with ones on the diagonal indicating matches and -1 everywhere else. These are simple and useful however when dealing with proteins they have a severe limitation as they ignore the biology of amino acids. In order to reflect this biological reality of proteins, new substitution matrices were developed using Log-odds models, based on the fact that substitutions in amino acids are not equiprobable, and some mutations between related amino acids (e.g. I and L) are much more common than others. Two of the most widely used substitution matrices, PAM and BLOSUM matrices, were built this way. The score for aligning residue \\(i\\) with residue \\(j\\) is given by the matrix entry \\(s_{ij}\\) by looking at the background frequencies (i.e. how often one expects to see a particular residue in a sequence) of \\(i\\) and \\(j\\) denoted \\(p_i\\) and \\(p_j\\) respectively and the frequency \\(q_{ij}\\) with which \\(i\\) and \\(j\\) are aligned in accurate biological alignments. from this we can compute the substitution score \\(s_{ij}\\) as a Log-odds160: \\[ S_{i,j}=\\log\\bigg(\\frac{q_{ij}}{p_ip_j}\\bigg) \\] This Log-odds formulation yields values with nice properties for sequence alignment. \\(q_{ij}\\) can be thought of as the probability of the alignment between amino acids \\(i\\) and \\(j\\) resulting from a substitution, and \\(p_ip_j\\) is the probability under the null hypothesis that both of these amino acids were aligned randomly. Therefore log of the ratio is negative when the random alignment is more frequent (meaning the substitution is unlikely), and positive when the substitution is likely. Both \\(p_i\\) and \\(p_j\\) are easy to compute from available biological sequence data, the real work in developing a Log-odds based substitution matrix is to estimate \\(q_{ij}\\) values, and that is often done using biologically accurate protein sequence alignments. The PAM matrix, developed in 1978161, is one such matrix. A Point accepted mutation (PAM) is defined as the substitution of one amino acid by another that is accepted by natural selection (i.e. visible along the branch of a phylogenetic tree). Dayhoff et al. also defined a PAM as an evolutionary distance, where two sequences distant by one PAM are expected to have one amino acid substitution per one hundred residues, which is equivalent to expecting a substitution at 1% of positions. To develop their matrix, Dayhoff et al. used phylogenetic trees built on 71 families of closely related proteins and counted the PAMs that appeared in these trees. This resulted in a matrix \\(A\\) where \\(A_{ij}=A_{ji}=\\) the number of times a substitution between amino acids \\(i\\) and \\(j\\) was observed in the trees. By using trees built on closely related sequences, Dayhoff et al. could be fairly certain that the observed substitutions were the result of a single mutation and not many subsequent mutations over long evolutionary times. From this matrix \\(A\\), Dayhoff et al. reconstructed the mutation probability \\(M_1\\) where entries \\(M_{1,ij}\\) represent the probability of amino acid \\(j\\) being replaced by amino acid \\(i\\) after an interval of 1 PAM. Entries of this matrix are computed as follows: \\[\\begin{align} M_{1,ij}&amp;=\\frac{\\lambda m_j A_{ij}}{\\sum_i A_{ij}}\\;\\; &amp; \\text{if}\\;\\;i\\neq j\\\\ M_{1,ij}&amp;=1-\\lambda m_j &amp; \\text{if}\\;\\; i = j \\end{align}\\] here \\(m_j\\) is the observed mutability of amino acid \\(j\\), and \\(\\lambda\\) is a constant factor used to tune the matrix so that it reflects mutation rates corresponding to 1 PAM where 99% of positions are unchanged which means that the diagonal of \\(M_1\\) must sum to 0.99. By assuming that evolution follows a Markov process it is simple to derive the mutation matrices for sequences separated by greater evolutionary distances. The \\(M_n\\) matrix, corresponding to a distance of \\(n\\) PAMs is equal to \\(M_1^n\\). Finally the \\(q_{ij}\\) values can be derived with \\(q_ij=p_jM_{ij}\\). By choosing different values of \\(n\\) for the mutation matrix we can estimate scoring matrices for sequences that are at varying evolutionary distances from one another. The correspondence between PAMs and and the observed proportion of diferent residues is not one to one, therefore a distance of 250 PAMs corresponds to around only about 20% of identical residues where a distance of 180 PAMs corresponds to around 27% identical residuess160,161. Therefore the PAM250 matrix, derived from \\(M_{250}\\), is suited to align more distantely related proteins than the PAM180 for example. By changing the mathematical model underlying the estimate of mutation probabilities, PAM-like matrices162 were later developed based on the same principles. The other main type of substitution matrix are the BLOSUM matrices (Block Substitution matrix), developed in 1992163. Instead of using whole, closely-related, protein sequences like the PAM matrices, the values of \\(q_{ij}\\) were estimated on highly conserved segments, called blocks, across whole protein families. The \\(q_{ij}\\) values are then estimated as the number of time amino acids \\(i\\) and \\(j\\) are aligned divided by the number of total amino acid pairs in the alignment. Therefore \\(q_{ij}\\) is the observed frequency of the aligned pair of amino acids \\(i\\) and \\(j\\) in all the conserved blocks. Like with PAM matrices, several BLOSUM matrices were constructed adapted for aligning sequences with different evolutionary distances. The BLOSUM62 matrix was estimated on blocks in aligned sequences that are at most 62% identical, BLOSUM80 on sequences that ar at most 80% identical. Therefore, inversely to the PAM matrices, the higher the number of the BLOSUM matrix the more suited it is to align more closely related sequences. PAM and BLOSUM matrices have fairly broad use-cases and are widely used in alignment, however there exist many other protein substitution models. Instead of using log-odds, some substitution models were developed by estimating scores with maximum-likelihood approaches164,165. Some matrices were developed with very specific usage conditions in mind. Some are tailored to specific types of proteins like Transmembrane166,167, disordered168 or polar/non-polar169 proteins. Some matrices were developed to align sequences from specific organisms like P. falciparum170 (responsible for malaria) or HIV171. A substitution matrix was even developed in 2005 specifically for global rather than local alignment172. This wealth of protein substitution matrices reflects the biological and evolutionary diversity of proteins, however substitution matrices for aligning DNA sequences are much less frequent. Some work has been done to derive matrices similar to PAM matrices from DNA alignments173. Codon substitution matrices174,175 have been developed as well, although they are used in DNA sequence alignment, ultimately they use knowledge derived from protein alignments. 2.1.4 Dealing with gaps In the NW and SW examples of Section 2.1.2, as with the simplistic match/mismatch costs, we used a very simple cost of insertions and deletions: any indel has a cost of -1. However this, as was the case with substitutions, does not reflect the biological reality very well. In biology, when insertions or deletions occur it is more likely that the indel will span several nucleotides rather than just one176. This means that when inserting gaps into longer gap stretches are more likely than many individual gaps. For example the two alignments below have the same number of matches, mismatches and gaps. The second one is more likely since it is the result of a single insertion (or deletion) of AGGT rather than multiple independent indels. AGGAGGTTCG        AGGAGGTTCG A-G-G-T-CC        AGG----TCC The first approach was to try and optimize the gaps more generally177 over the whole aligned sequence, however even with dynamic programming this has at best a time complexity of \\(o(n^2m)\\)178. In 1982, Gotoh proposed affine gap costs179, with this model there are two separate costs associated to indels: 1) the gap open cost and 2) the gap extend cost. Usually the costs are set up so that opening a new gap is more costly than extending it, meaning that longer gap stretches are favored over many short indels. The other major advantage is that with Gotoh’s algorithm time complexity is back down to \\(o(nm)\\). The algorithm was further refined by Altschul et al.180. Over the years different types of gap costs were developed and tested like the logarithmic gap costs proposed by Waterman181 and improved by Miller and Myers182 turned out to be less accurate than affine gap costs183). A bi-linear gap cost was also proposed to replace the affine cost184, with a breakpoint at gaps of length three, the size of a codon. As more and more sequence data became available, similarly to what happened with substitution matrices, empirical profile-based models derived from this data were developed185. Some of these penalties leverage structural information and context for proteins186,187. A context dependent gap penalty depending on the hydrophobicity of aligned residues is implemented in Clustal X188 one of the most widely used sequence aligners. Although quite complex and empirically derived, these profile-based penalties show limited improvement over the affine and bi-linear penalties189. More recently, methodological and algorithmic developments have resulted in the WaveFront algorithm (WFA) for pairwise alignment190. This algorithm computes a NW alignment with affine gap costs with a much lower time complexity of \\(o(ns)\\), where \\(s\\) is the alignment score, reducing the quadratic relationship to sequence length to a linear one. This algorithm is also easily vectorizable and can take advantage of hardware acceleration, making its implementation run between 10 to 300 times faster than alternative methods depending on the testing context190. 2.2 How do we speed up pairwise alignment ? The NW and SW algorithms, as well as their improvements, are proven to be optimal191. However when dealing with large sequences, which are more and more common, or when having to do many pairwise alignments they become limiting due to their time and space complexity. In many cases, to get around these limitations, optimality was left aside in favor of heuristics and approximate methods speeding up alignment. 2.2.1 Changing the method One of the early approaches to speed up alignment was to focus on speeding up the dynamic programming which is the time and space consuming step of the NW and SW algorithms. Bounded dynamic programming192 is one such approach, in some works it is also called banded dynamic programming. By making the assumption that the majority of alignment operations are matches and mismatches instead of indels we can make the hypothesis about the alignment graph. Most probably, the path in the graph corresponding to the optimal alignment will be around the diagonal of the dynamic programming matrix, and scores far away from the diagonal are probably not needed. By making these assumptions a lot of the scores of the matrix do not need to be computed, speeding up the execution and leading to a sparse dynamic programming matrix (shown in Figure 2.3). This approach was used to speed up alignment early on in 1984193. The advantage of this method is that the optimal alignment can be found very efficiently, however if there are many indels in the optimal alignment, this algorithm is not guaranteed to run faster than NW. Figure 2.3: Bounded dynamic programming to speed up alignment. The dynamic programming matrix is shown here, only values in the blue section are computed, speeding up the process. Here the optimal path in the alignment graph, shown in red, is included entirely in the bounds. Adapted from194. More “exotic” methods have also been used successfully for sequence alignment. Fast Fourier Transform (FFT) are used in the MAFFT aligner195 in order to quickly find homologous segments between two sequences. These homologous regions can be used as the basis for alignment. MAFFT, primarily a multiple sequence aligner (c.f. Section 2.4 below), can also be used for pairwise alignment. 2.2.2 Seed and extend with data structures In parallel to the development of new alignment algorithms, another way of substantially speeding up pairwise alignment is the so-called “seed and extend” method. This is based on the observation that a pairwise alignment most likely has several short subsequences that are almost identical in both sequences to align. These homologous subsequences, the seeds, can be used to initialize an alignment that can be extended in both directions with dynamic programming until we have a suitable alignment. This method can be used for 1) local alignment, where seeds indicate possible local matches which can be extended in local alignments; or 2) for global alignment where the seeds anchor the dynamic programming matrix, limiting the number of cells to fill out as shown in Figure 2.4. In both cases this approach follows the divide and conquer philosophy and extending seeds or filling out the matrix between anchors can be done independently and in parallel. Figure 2.4: Divide and conquer to speed up alignment. Here anchors are used to speed up alignment. Anchors are shown as dark blue dots in the dynamic programing matrix. Only values in blocks between anchors, shown in blue, need to be computed. The majority of the matrix can be left empty. The optimal path in the resulting alignment graph must go through each anchor and is shown in red. Adapted from194. This type of approach can also be used for many-to-one local alignments: either trying to find homologies between a query sequence and a database of sequences, or find several local alignments in a large reference sequence like in read-mapping (see Section 2.3.1). In these many-to-one scenarios it is useful to index seeds in data structures that allow rapid querying and compact storage. This general framework has proven to be quite flexible with many different ways to pick seeds196 and many different data structures to index them197. 2.2.2.1 \\(k\\)-mers and hash tables 2.2.2.1.1 The BLAST Algorithm One of the early methods for very quick heuristic alignment is the Basic Local Alignment Search Tool, BLAST198. It is widely used to this day to find homologous sequences in large databases and as such is one of the most cited papers of all time with over 100,000 citations, and is available as a web service hosted by the NCBI (https://blast.ncbi.nlm.nih.gov/Blast.cgi). Over the year many different versions for different use cases have been developed like BLASTP for protein sequences or BLASTN and MEGABLAST for nucleic acid sequences. In our description of the BLAST algorithm we will have a target sequence and a query sequence that we wish to align. For each sequence we build a hash table that uses subsequences of length \\(k\\), called \\(k\\)-mers, as keys and their position in the whole sequence as values. The hash tables are then scanned to check for exact matches between \\(k\\)-mers in the target and query sequences, called hits. The positions of the hits in the target and query sequences are used to seed a candidate local alignment The candidate local alignment are extended in both directions from the seed with the SW algorithm. If the alignment score reaches a value under a specified threshold, the alignment stop and the candidate is discarded By selecting the right size \\(k\\) of the seeds (by default 11 when aligning nucleotides, 3 when aligning amino acids) as well as the alignment score threshold, one can adjust the sensitivity of the method at the cost of runtime. It might not seem very useful to precompute the target hash-table for a single target. However, in practice BLAST is used to find local alignments between a query sequence and a very large number of target sequences; databases hosted by NCBI have hundreds of millions of target sequences (https://ftp.ncbi.nlm.nih.gov/blast/db/), at these scales pre-computing the target database saves an enormous amount of time. Over time, several improvements have been developed for BLAST, PSI-BLAST199 iteratively refines the alignments, Gapped BLAST199and BLASTZ200 use spaced seeds, introduced in the PatternHunter method201, corresponding to seeds where not all characters match, increasing sensitivity. By sorting the target sequences it is possible to stop earlier and gain some speed as well202. The Diamond aligner203 increase alignment speed by using double indexing and thus leveraging CPU cache and reducing time waiting for memory or disk access, improving alignment speed up to 360-fold over BLAST in later version204. FASTA205, an improvement on FASTP206, is another method for local alignment. Similarly to BLAST, \\(k\\)-mers for the target and query sequence are indexed in a hash table and hits are found between the two sequences. The \\(k\\)-mers used in the FASTA tool are usually shorter than for BLAST, so instead of initializing an alignment at a single hit, FASTA identifies regions in both sequences that have a high density of hits, keeping the best 10. These regions are then scored using matrices discussed in Section 2.1.3 and high scoring regions are combined to build an approximate alignment. An optimal version of this alignment is then computed using the SW algorithm and banded dynamic programming. Both FASTA and BLAST are very fast, it takes only a couple of seconds to find approximate local alignments between 100 query sequences207 in a database of over 80 million target sequences208. Trying this task with standard SW or NW algorithms would be much slower209 but would yield more sensitive, optimal alignments210. 2.2.2.1.2 Other Algorithms One of the problems with such an approach is the size of the index, indeed storing all the \\(k\\)-mers of a length \\(n\\) sequence would require a maximum of \\((n-k + 1)\\cdot k\\) characters as the hash table keys, if all \\(k\\)-mers are distinct. This space constraint is acceptable for very large scale homology search on hosted web services such as NCBI BLAST, however on a personal computer this can easily exceed memory capacity. Storing the hash table on disk has drastic consequences on query times, therefore methods to reduce the storage needs of these data structures were developed. One of the ways to make everything fit in memory is to not store all \\(k\\)-mers, one way is through the use of so-called minimizers, introduced independently in 2003211 and 2004212. Given a window of \\(w\\) consecutive \\(k\\)-mers and an ordering, a \\((w,k)\\) minimizer is the “smallest” k-mer in the window w.r.t. the chosen ordering. Let us consider the following window of \\(3\\)-mers with \\(w=4\\): TGACAT, yielding the following \\(3\\)-mers: TGA, GAC, ACA, CAT. Following a simple ordering, such as lexigographical ordering (i.e. alphabetical order), then the “smallest” \\(3\\)-mer and our \\((4,3)\\) minimizer would be ACA, and only this one would be sampled and added to our hash table. Minimizers have interesting properties, adjacent windows often share a minimizer (see Figure 2.5) and if two strings have a \\(w-k+1\\) sequence in common then they are guaranteed to share a \\((w,k)\\) minimizer212. These properties make minimizers very useful for the seed and extend alignment strategy and they are used in several aligners such as Minimap213 and Minimap2118, MashMap2214 and Winnowmap119. Figure 2.5: \\(k\\)-mer minimizers in action. A) The \\(3\\)-mers are shown under a window of size \\(w=4\\) \\(k\\)-mers. The \\((4,3)\\) minimizer according to the lexicographical ordering is highlighted in red. B) All the \\(w=4\\) windows of \\(3\\)-mers are shown underneath the sequence. \\((4,3)\\) minimizers of each window are highlighted in red. Here both \\(3\\)-mer minimizer is shared by 4 windows. Adapted from212. While the lexicographical ordering is easy to conceptualize, and the one proposed intially by Roberts et al. it has an undesirable characteristic: it tends to select simpler kmers with repeated A at the beginning. As discussed in Section 1.4.2, repeated stretches of nucleotides are prone to sequencing errors and as such are not ideal for seeding alignments. Furthermore, when the window shifts \\(k\\)-mers at the beginning of successive are likely to be selected as minimizers without being shared between windows, meaning that we sample more \\(k\\)-mers than needed. Roberts et al. proposed an alternative ordering based on nucleotide frequencies212, however this is also not ideal. Different orderings have been studied and those based on universal hitting sets215, or random orderings (such as the ones defined by a hash function) have more desirable properties than the lexicographical ordering216. A minimizer ordering based on frequency of appearance of kmers has been shown to provide well-balanced partitioning of k-mer sets217. Over the years more strategies have been developed to sample \\(k\\)-mers and reduce the data structure size for efficient sequence alignement, such as syncmers218, strobemers219 or a combination of both220. These novel seed sampling strategies allow for sparser seed sampling, smaller data structures and therefore faster alignment software. 2.2.2.2 Exact matches and suffix trees While \\(k\\)-mer seeds have shown success it is not the only way to implement a seed and extend alignment method. The other way to seed alignments is through maximal exact matches (MEMs) which is the longest possible exact match between two sequences. MEMs can be found with data structures like suffix trees221, suffix arrays222,223 or FM indices224. Suffix trees have long been used for pattern matching applications128, the AVID aligner225 uses them to find maximal exact matches between two sequences to anchor a global alignment. MUMmer2226 uses suffix trees to find unique maximal unique matches (MUMs) to anchor alignments. Suffix trees, although very useful, have quadratic space complexity w.r.t. to the length of the indexed sequence128. This is fine for small bacterial or viral genomes, however in the age of whole genome sequencing and the human genome project it is inadequate. Therefore some aligners have switched data structures to use suffix arrays, in fact it is possible to replace suffix trees with these more space efficient suffix arrays in any algorithm227. Newer versions of MUMmer228 have made this choice and now use suffix arrays for improved performance. Finally another data structure that is widely used is the so-called FM index proposed in 2000224 and based on the Burrows-Wheeler transform229. The FM index is very memory efficient230. This comes at the cost of some efficiency in index lookup operations, although some work has been done to improve this231. As such, FM-indices have been used in many aligners such as BWT-SW232, BWA233 and BWA-SW234, BWA-MEM235, CUSHAW236 or Bowtie2237. The seed and extend paradigm has been very useful in the field of genomics to deal with the scale of data and keep up with sequencing technologies, and some newer alignment algorithms like the WFA algorithm mentioned above, have even been used in such a context238. Some methodological development have been aimed towards improving alignment sensitivity instead of speed. One of these methods, fairly well studied in general, and in the context of alignment, are hidden markov models (HMMs). In certain circumstances PairHMMs, HMMs used for pairwise alignment, can be mathematically equivalent to NW239. HMMs have been used for sequence alignment in many software tools like HHsearch240, HMMer241 or MCALIGN2242 which is used to efficiently search for alignments in large databases of sequences. 2.3 The specificities of read-mapping Since read-mapping is special case of pairwise alignment and the focus of Chapter 3, it stands to reason that we use this section to explain the stakes and challenges of mapping. 2.3.1 What is read-mapping ? Read-mapping, or sometimes read-alignment is the process of comparing a sequencing read to a reference sequence and finding the region in the reference homologous to the read. Sometimes, mappers only output the position where this region starts in the reference but more often than not, they output local or semi-global alignments between the reads and the reference. In semi-global alignment, two sequences are globally aligned but indels at the end and beginning of each sequence are not penalized, this can be useful to detect overlap between two sequences or align two sequences of very different sizes. Read-mapping is often the first step of many bioinformatics analysis pipelines, and as such is often crucial. Therefore it makes sense that this is a very active field with many reviews243–247 and some benchmarking procedures248 to compare tools. From a technical and algorithmic standpoint, the task of mapping many sequencing reads to a single reference lends itself very well to the “divide and conquer” approach presented in Section 2.2.2. Indexing the reference beforehand and using this index as a database to align can lead to substantial execution speed gains. As a matter of fact, many of the aligners presented in Section 2.2.2 are actually read-mappers that can also do pairwise alignment. As such most implement the seed-and-extend paradigm with hash-tables like minimap2118; FM-indices like BWT-SW232, Bowtie2237, BWA233, BWA-SW234, BWA-MEM235 and CUSHAW236; or even other divide and conquer approaches like Kart249. As sequencing technologies yield longer and more numerous reads, these heuristics become more important if we wish to be able to analyze this data, however this can be partly mitigated through hardware acceleration250–253. 2.3.2 Challenges of read-mapping Read-mapping, as one might expect, is no easy task. The length of recent sequencing reads and their number are of course challenging, but algorithmic tricks described above can help. There are other aspects of sequencing data that make read-mapping as hard as it is. Sequencing technologies, although have improved over time can still make errors, and these errors can lower the homology between reads and reference making mapping harder128. This is particularly true of long reads where the error rate is higher, to mitigate that some specific long-read mappers take these errors into account when aligning a read to the reference. Some mappers are tied to a specific sequencing technology like BLASR254 or lordFAST255 for PacBIO reads, and GraphMap256 for ONT. Some however, like NGMLR257, MashMap258 or DuploMap259, are technology agnostic and can work with any type of long-read. This might not be needed forever though as sequencing accuracy is growing with every new generation of sequencers. Since homopolymer-linked indels are still common in long-read sequencing (cf. Section 1.4.2) many modern read-mappers, designed to work with long reads, include some option to use homopolymer compression (c.f. Section 1.4.3.2). While the technology producing reads can complicate the read-mapping tasks, some regions of the genome are intrinsically harder to map to. This is particularly true of repetitive regions like telomeres or centromeres247. Repetitive regions mean a lot of potential homologous regions between a read and the reference, producing a lot of seed hits, increasing the runtime of the aligners and lowering the overall confidence in read-placement. Some tools have been developed specifically to deal with such regions. Winnowmap119 and winnowmap2260, assign a weight to \\(k\\)-mers that might be sampled as minimizers. By under-weighting frequently appearing \\(k\\)-mers they can improve performance in repetitive regions. TandemMapper261 was designed to map long reads to the extra-long tandem repeats (ETRs) present in centromeric regions. It does not use minimzers, however like winnowmap it selects less frequent \\(k\\)-mers as potential seeds to deal with the repetitiveness and improve the mapping accuracy. Long reads are also much easier to map to repetitive regions since they can span over them, or overlap with more complex regions47,55. Some challenges however are linked to implementation rather than sequencing data. Some efforts have been done to provide quality scores to mappings in order to easily assess its quality and therefore usefulness. This score, called mapping quality, corresponds to \\(-10\\log_{10}(p)\\), usually rounded to the nearest integer, where \\(p\\) corresponds to the probability of the read being mismapped. It was introduced in the MAQ software262 but has been implemented in many read-mappers like BWA , bowtie2237 or minimap2118 since it was added as part of the widely-used SAM file format specification263. While the mapping quality score is standardized each read-mapper has a different way of estimating \\(p\\) the mismap probability. This creates differences in the reported qualities: e.g. the maximum quality that bowtie2 can assign is 42, BWA’s is 37 and minimap’s is 60264. This of course means that comparing mapping quality values between read-mappers is not necessarily meaningful. Furthermore in some cases this mapping quality is not very reflective of the alignment accuracy243, as such alternative approaches have been explored: through a new genome mappability score265, simulations266 or even machine learning267. In conclusion, as a crucial step in many bioinformatics pipelines, read-mapping is a markedly active field with a lot of work in increasing mapping accuracy and speeding up alignment. However, despite all this work, some challenges remain. Further improving mapping is possible and doing so could result in more accurate downstream analyses and avoid drawing some erroneous conclusions. 2.4 Multiple sequence alignment Up until now we have only considered pairwise alignment where we want to find homologies between a pair of sequences. In many cases though it is helpful to compare more than two sequences together, this is where multiple sequence alignment (MSA) steps-in. It is an essential task in many bioinformatics and comparative biology analyses268. We saw earlier that with dynamic programming and algorithms like NW or SW it is possible to compute an optimal pairwise alignment, for MSA however the task of computing the optimal alignment if unfortunately NP-hard269,270, with an exponentially growing time and space complexity in the number of sequences to align. Therefore, heuristics and approximations are needed from the get go in order to get anything meaningful. An early method, and easy to conceptualize, is the so-called star alignment method194. In this approach, a single sequence is chosen to be the center sequence. After this each other sequence is aligned to the center sequence and the pairwise alignments are merged, conserving gaps that were inserted. The center sequence is often chosen to be as similar to the other sequences as possible so in, however all pairwise distances between sequences are needed implying a quadratic distance computation step. The pairwise alignments are independent so this approach is easy to parallelize. Some software, like HAlign271 use center star alignment to produce MSAs. This method however is quite sensitive to the choice of the center sequence. And bad pairwise alignments can lower the accuracy of the overall MSA by conserving gaps. 2.4.1 Progressive alignment One of the most widely used multiple sequence alignment approach is progressive alignment272. Similarly to the center star algorithm, the progressive algorithm reduces the MSA problem to independent pairwise alignments. The first step is to build a phylogenetic tree from the sequences to align, representing the evolutionary relationship between sequences, called the guide tree. Starting from the leaves, that correspond to single sequences, pairwise align the sequences and store the alignment (or profile) in the parent node. Going up from the leaves to the roots align sequences together, then sequences to profiles if needed and finally profiles together, merging alignments as we progress up the tree. The final multiple sequence alignment is obtained when this process reaches the root. Profiles at inner nodes of the tree are aligned to each other to conserve gaps. A representation of this process is shown in Figure 2.6. Figure 2.6: Overview of the progressive alignment process. A) sequences to align, B) guide tree constructed from distances between sequences in panel A, C) Alignment steps along the guide tree and resulting MSA at the root of the tree. Adapted from143 In many cases a matrix of pairwise distances is needed to construct the guide tree, if we choose the edit distance, \\(n(n-1)/2\\) pairwise alignments are needed to get this matrix. With a large number of sequences, or long sequences this is not possible in a reasonable amount of time. Therefore, computing of distance matrices through alignment-free methods, usually based on \\(k\\)-mers, is often used as input to the tree building method273,274. Tree reconstruction methods from the distance matrix like UPGMA275 or neighbor-joining276 can be quite time consuming when dealing with a large set of sequences. To counteract this, some multiple sequence aligners also use heuristic methods to approximate a guide tree. MAFFT195 for example uses PartTree277 method to approximate the tree, and clustal Omega278 uses an embedding method279 to do so. Although this method is a good heuristic as the guide tree can capture complex relationships between sequences, progressive alignment can still suffer from problems similar to center star alignment: mainly gap propagation. If an early alignment is erroneous and introduces spurious gaps, then these are propagated throughout the MSA. As it is said in the seminal progressive alignment paper: “once a gap, always a gap”272. Iterative refinement of the MSA268 was proposed as a solution to this problem. A possible approach is to recompute a guide tree from the alignment and run the whole progressive alignment procedure on the new guide tree, however this is very time consuming and not practical with the large sequence sets available today. Therefore the iterative procedure consists of taking an MSA obtained through progressive alignment and splitting it horizontally in two alignments of \\(n/2\\) sequences each. In each half, the sites composed exclusively of gaps are removed and the two alignments merged through profile alignment. After the realignment of both halves, a scoring metric is computed and while this metric improves, repeat the previous steps. There are several of these metrics, the most commonly used is the probably the sum of pairs score280 or its weighted variant281, however there exist other scores like log-odds and correlation282 or a consistency based score283. Most of the widely used multiple sequence aligners some form of progressive alignment with iterative refinement: T-Coffee284 which uses a consistency score for refinement, MUSCLE285,286, MAFFT195, ProbCons287 which uses a formal HMM to compute consistency and the various CLUSTAL incarnations278,288,289 which are some of the most cited papers of all times. 2.4.2 Other methods While the progressive alignment algorithm has been at the root of some of the most widely used alignment software, other methods to produce MSAs have been explored over the years. One common other method for creating multiple alignment, wither through profile-profile alignment or sequence-profile alignments are HMMs. Several tools HMMs to generate an alignment such as HMMer241, MSAProbs290 or COVID-align291. In some cases, the HMM based approach has similar performance to clustalW292. Other methods have focused on speeding up the dynamic programming part of aligning multiple sequences. This can be done using simulated annealing293–295, which can also be used to speed up HMM training292. Genetic algorithms have also been used to construct MSAs296, increasing the speed at which this is possible297. Several tools use genetic algorithms like VGDA298, GAPAM299 and SAGA300. WIth the recent focus on SARS-CoV 2, some specific multiple sequence aligners have been developed to create very large multiple sequence alignments. They often take advantage of the fact that this virus mutates quite slowly meaning that most of the available sequences have a high homology. Furthermore as the epidemic was tracked in near real time since it’s beginning, we know the original sequence at the root of the pandemic. Leveraging this knowledge it is possible to build a profile from aligning new sequences to the ancestral sequence and aligning new sequences to this profile using HMMs like what is done in COVID-align291. The NextAlign301 software even forgoes aligning to a profile and creates massive MSAs (millions of sequences) by aligning new sequences to the ancestral sequence using banded SW alignment, the gap penalties are enriched with biological knowledge and dependent on the position within the sequence. Recently, Garriga et al. introduced the regressive alignment method302, where instead of traversing a guide tree from leaf to root, it goes the other way, aligning the more distant sequences first before merging MSAs. Using this approach they managed to create an MSA of 1.4 million sequences with improved accuracy over progressive methods. Since multiple sequence alignments are so useful in comparative biology, and that there is such a vast array of methods to construct them it stands to reason that are many resources to help practitioners make their choice. There are many reviews and benchmarking datasets and procedures to do so303–307. 2.5 Conclusion Sequence alignment, multiple or pairwise, is a fundamental tool in the bioinformatician’s toolkit. Comparing sequences and finding homologies being at the root of many fields, because of the wealth of evolutionary information contained in alignments. As such it is paramount to have the best possible sequence alignments in any situation. As we have seen now, although we have methods guaranteed to give us optimal pairwise and multiple sequence alignments, they are not practically useful for dealing with sequences at today’s scale. Therefore, most sequence aligners rely on, sometimes many, heuristics and approximations. From substitution models to seeding techniques, all these are not necessarily reflective of the biological reality contained within the sequences to align. Each of these heuristics or models is a step where biases and approximations can happen, building up along and over sequences. Therefore there must be room for improvement. Having methods that are both fast and accurate are now more necessary than ever with the ever growing scale and number of publicly available sequences. Furthermore, in the “age of pandemics”, accurate alignment methods are indispensable to track and keep an eye on disease spread across the globe, in real-time. References 47. Pollard, M. O., Gurdasani, D., Mentzer, A. J., Porter, T. &amp; Sandhu, M. S. Long reads: Their purpose and place. Human Molecular Genetics 27, R234–R241 (2018). 55. Logsdon, G. A., Vollger, M. R. &amp; Eichler, E. E. Long-read human genome sequencing and its applications. Nat Rev Genet 21, 597–614 (2020). 80. Hackl, T., Hedrich, R., Schultz, J. &amp; Förster, F. Proovread : Large-scale high-accuracy PacBio correction through iterative short read consensus. Bioinformatics 30, 3004–3011 (2014). 82. Koren, S. et al. Hybrid error correction and de novo assembly of single-molecule sequencing reads. Nature Biotechnology 30, 693–700 (2012). 118. Li, H. Minimap2: Pairwise alignment for nucleotide sequences. Bioinformatics 34, 3094–3100 (2018). 119. Jain, C. et al. Weighted minimizer sampling improves long read mapping. Bioinformatics 36, i111–i118 (2020). 127. Hamming, R. W. Coding and Information Theory. (Prentice-Hall, 1980). 128. Gusfield, D. Algorithms on strings, trees, and sequences: Computer science and computational biology. (Cambridge University Press, 1997). doi:10.1017/CBO9780511574931. 129. Levenshtein, V. I. Binary codes capable of correcting deletions, insertions and reversals. Soviet Physics Doklady 10, 707 (1966). 130. Hardison, R. C. Comparative Genomics. PLOS Biology 1, e58 (2003). 131. Felsenstein, J. Evolutionary trees from DNA sequences: A maximum likelihood approach. Journal of Molecular Evolution 17, 368–376 (1981). 135. Price, M. N., Dehal, P. S. &amp; Arkin, A. P. FastTree 2 Approximately Maximum-Likelihood Trees for Large Alignments. PLOS ONE 5, e9490 (2010). 136. Jumper, J. et al. Highly accurate protein structure prediction with AlphaFold. Nature 596, 583–589 (2021). 137. Karplus, K. et al. Predicting protein structure using only sequence information. Proteins: Structure, Function, and Bioinformatics 37, 121–125 (1999). 138. Watson, J. D., Laskowski, R. A. &amp; Thornton, J. M. Predicting protein function from sequence and structural data. Current Opinion in Structural Biology 15, 275–284 (2005). 139. Lee, D., Redfern, O. &amp; Orengo, C. Predicting protein function from sequence and structure. Nature Reviews Molecular Cell Biology 8, 995–1005 (2007). 140. Salmela, L. &amp; Schröder, J. Correcting errors in short reads by multiple alignments. Bioinformatics 27, 1455–1461 (2011). 141. Medvedev, P., Stanciu, M. &amp; Brudno, M. Computational methods for discovering structural variation with next-generation sequencing. Nature Methods 6, S13–S20 (2009). 142. Mahmoud, M. et al. Structural variant calling: the long and the short of it. Genome Biology 20, 246 (2019). 143. Sung, W.-K. Algorithms in bioinformatics: A practical introduction. (Chapman; Hall/CRC, 2011). doi:10.1201/9781420070347. 144. Needleman, S. B. &amp; Wunsch, C. D. A general method applicable to the search for similarities in the amino acid sequence of two proteins. Journal of Molecular Biology 48, 443–453 (1970). 145. Smith, T. F. &amp; Waterman, M. S. Identification of common molecular subsequences. Journal of Molecular Biology 147, 195–197 (1981). 146. Bradley, S. P., Hax, A. C. &amp; Magnanti, T. L. Applied Mathematical Programming. (Addison-Wesley Publishing Company, 1977). 147. Bellman, R. The theory of dynamic programming. Bulletin of the American Mathematical Society 60, 503–515 (1954). 148. Masek, W. J. &amp; Paterson, M. S. A faster algorithm computing string edit distances. Journal of Computer and System Sciences 20, 18–31 (1980). 149. Vinh, N. X., Epps, J. &amp; Bailey, J. Information Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance. Journal of Machine Learning Research 11, 18 (2010). 150. Ullman, J. D., Aho, A. V. &amp; Hirschberg, D. S. Bounds on the complexity of the longest common subsequence problem. Journal of the ACM 23, 112 (1976). 151. Hirschberg, D. S. A linear space algorithm for computing maximal common subsequences. Communications of the ACM 18, 341343 (1975). 152. Myers, E. W. &amp; Miller, W. Optimal alignments in linear space. Bioinformatics 4, 11–17 (1988). 153. Rice, P., Longden, I. &amp; Bleasby, A. EMBOSS: The european molecular biology open software suite. Trends in genetics 16, 276277 (2000). 154. Huang, X. &amp; Miller, W. A time-efficient, linear-space local similarity algorithm. Advances in Applied Mathematics 12, 337–357 (1991). 155. Waterman, M. S. &amp; Eggert, M. A new algorithm for best subsequence alignments with application to tRNA-rRNA comparisons. Journal of Molecular Biology 197, 723–728 (1987). 156. Stajich, J. E. et al. The Bioperl Toolkit: Perl Modules for the Life Sciences. Genome Research 12, 1611–1618 (2002). 157. Gentleman, R. C. et al. Bioconductor: open software development for computational biology and bioinformatics. Genome Biology 5, R80 (2004). 158. Daily, J. Parasail: SIMD c library for global, semi-global, and local pairwise sequence alignments. BMC Bioinformatics 17, 81 (2016). 159. Frohmberg, W., Kierzynka, M., Blazewicz, J. &amp; Wojciechowski, P. G-PAS 2.0 an improved version of protein alignment tool with an efficient backtracking routine on multiple GPUs. Bulletin of the Polish Academy of Sciences: Technical Sciences 60, 491–494 (2012). 160. Altschul, S. F. Substitution Matrices. in (John Wiley &amp; Sons, Ltd, 2013). doi:10.1002/9780470015902.a0005265.pub3. 161. Dayhoff, M. O., Schwartz, R. M. &amp; Orcutt, B. C. A model of evolutionary change in proteins. A Model of Evolutionary Change in Proteins 345–352 (1978). 162. Müller, T. &amp; Vingron, M. Modeling amino acid replacement. Journal of Computational Biology: A Journal of Computational Molecular Cell Biology 7, 761–776 (2000). 163. Henikoff, S. &amp; Henikoff, J. G. Amino acid substitution matrices from protein blocks. Proceedings of the National Academy of Sciences 89, 10915–10919 (1992). 164. Whelan, S. &amp; Goldman, N. A general empirical model of protein evolution derived from multiple protein families using a maximum-likelihood approach. Molecular Biology and Evolution 18, 691–699 (2001). 165. Le, S. Q. &amp; Gascuel, O. An improved general amino acid replacement matrix. Molecular Biology and Evolution 25, 1307–1320 (2008). 166. Müller, T., Rahmann, S. &amp; Rehmsmeier, M. Non-symmetric score matrices and the detection of homologous transmembrane proteins. Bioinformatics 17, S182–S189 (2001). 167. Ng, P. C., Henikoff, J. G. &amp; Henikoff, S. PHAT: a transmembrane-specific substitution matrix. Predicted hydrophobic and transmembrane. Bioinformatics (Oxford, England) 16, 760–766 (2000). 168. Trivedi, R. &amp; Nagarajaram, H. A. Amino acid substitution scoring matrices specific to intrinsically disordered regions in proteins. Scientific Reports 9, 16380 (2019). 169. Goonesekere, N. C. W. &amp; Lee, B. Context-specific amino acid substitution matrices and their use in the detection of protein homologs. Proteins: Structure, Function, and Bioinformatics 71, 910–919 (2008). 170. Paila, U., Kondam, R. &amp; Ranjan, A. Genome bias influences amino acid choices: analysis of amino acid substitution and re-compilation of substitution matrices exclusive to an AT-biased genome. Nucleic Acids Research 36, 6664–6675 (2008). 171. Nickle, D. C. et al. HIV-specific probabilistic models of protein evolution. PLoS ONE 2, e503 (2007). 172. Sardiu, M. E., Alves, G. &amp; Yu, Y.-K. Score statistics of global sequence alignment from the energy distribution of a modified directed polymer and directed percolation problem. Physical Review. E, Statistical, Nonlinear, and Soft Matter Physics 72, 061917 (2005). 173. Chiaromonte, F., Yap, V. B. &amp; Miller, W. Scoring pairwise genomic sequence alignments. in 115–126 (WORLD SCIENTIFIC, 2001). doi:10.1142/9789812799623_0012. 174. Schneider, A., Cannarozzi, G. M. &amp; Gonnet, G. H. Empirical codon substitution matrix. BMC bioinformatics 6, 134 (2005). 175. Doron-Faigenboim, A. &amp; Pupko, T. A combined empirical and mechanistic codon model. Molecular Biology and Evolution 24, 388–397 (2007). 176. Cartwright, R. A. Problems and solutions for estimating indel rates and length distributions. Molecular Biology and Evolution 26, 473–480 (2009). 177. Fitch, W. M. &amp; Smith, T. F. Optimal sequence alignments. Proceedings of the National Academy of Sciences 80, 1382–1386 (1983). 178. Waterman, M. S., Smith, T. F. &amp; Beyer, W. A. Some biological sequence metrics. Advances in Mathematics 20, 367–387 (1976). 179. Gotoh, O. An improved algorithm for matching biological sequences. Journal of Molecular Biology 162, 705–708 (1982). 180. Altschul, S. F. &amp; Erickson, B. W. Optimal sequence alignment using affine gap costs. Bulletin of Mathematical Biology 48, 603–616 (1986). 181. Waterman, M. S. Efficient sequence alignment algorithms. Journal of Theoretical Biology 108, 333–337 (1984). 182. Miller, W. &amp; Myers, E. W. Sequence comparison with concave weighting functions. Bulletin of Mathematical Biology 50, 97–120 (1988). 183. Cartwright, R. A. Logarithmic gap costs decrease alignment accuracy. BMC Bioinformatics 7, 527 (2006). 184. Goonesekere, N. C. W. &amp; Lee, B. Frequency of gaps observed in a structurally aligned protein pair database suggests a simple gap penalty function. Nucleic Acids Research 32, 2838–2843 (2004). 185. Benner, S. A., Cohen, M. A. &amp; Gonnet, G. H. Empirical and Structural Models for Insertions and Deletions in the Divergent Evolution of Proteins. Journal of Molecular Biology 229, 1065–1082 (1993). 186. Wrabl, J. O. &amp; Grishin, N. V. Gaps in structurally similar proteins: Towards improvement of multiple sequence alignment. Proteins: Structure, Function, and Bioinformatics 54, 71–87 (2004). 187. Zhang, W., Liu, S. &amp; Zhou, Y. SP5: Improving Protein Fold Recognition by Using Torsion Angle Profiles and Profile-Based Gap Penalty Model. PLOS ONE 3, e2325 (2008). 188. Jeanmougin, F., Thompson, J. D., Gouy, M., Higgins, D. G. &amp; Gibson, T. J. Multiple sequence alignment with clustal x. Trends in Biochemical Sciences 23, 403–405 (1998). 189. Wang, C., Yan, R.-X., Wang, X.-F., Si, J.-N. &amp; Zhang, Z. Comparison of linear gap penalties and profile-based variable gap penalties in profileprofile alignments. Computational Biology and Chemistry 35, 308–318 (2011). 190. Marco-Sola, S., Moure, J. C., Moreto, M. &amp; Espinosa, A. Fast gap-affine pairwise alignment using the wavefront algorithm. Bioinformatics (2020) doi:10.1093/bioinformatics/btaa777. 191. Pearson, W. R. &amp; Miller, W. [27] Dynamic programming algorithms for biological sequence comparison. in vol. 210 575–601 (Academic Press, 1992). 192. Spouge, J. L. Speeding up dynamic programming algorithms for finding optimal lattice paths. SIAM Journal on Applied Mathematics 49, 1552–1566 (1989). 193. Fickett, J. W. Fast optimal alignment. Nucleic Acids Research 12, 175–179 (1984). 194. Chao, J., Tang, F. &amp; Xu, L. Developments in Algorithms for Sequence Alignment: A Review. Biomolecules 12, 546 (2022). 195. Katoh, K., Misawa, K., Kuma, K. &amp; Miyata, T. MAFFT: A novel method for rapid multiple sequence alignment based on fast fourier transform. Nucleic Acids Research 30, 3059–3066 (2002). 196. Sun, Y. &amp; Buhler, J. Choosing the best heuristic for seeded alignment of DNA sequences. BMC Bioinformatics 7, 133 (2006). 197. Li, H. &amp; Homer, N. A survey of sequence alignment algorithms for next-generation sequencing. Briefings in Bioinformatics 11, 473–483 (2010). 198. Altschul, S. F., Gish, W., Miller, W., Myers, E. W. &amp; Lipman, D. J. Basic local alignment search tool. Journal of Molecular Biology 215, 403–410 (1990). 199. Altschul, S. F. et al. Gapped BLAST and PSI-BLAST: A new generation of protein database search programs. Nucleic Acids Research 25, 3389–3402 (1997). 200. Schwartz, S. et al. HumanMouse Alignments with BLASTZ. Genome Research 13, 103–107 (2003). 201. Ma, B., Tromp, J. &amp; Li, M. PatternHunter: Faster and more sensitive homology search. Bioinformatics 18, 440–445 (2002). 202. Edgar, R. C. Search and clustering orders of magnitude faster than BLAST. Bioinformatics 26, 2460–2461 (2010). 203. Buchfink, B., Xie, C. &amp; Huson, D. H. Fast and sensitive protein alignment using DIAMOND. Nature Methods 12, 59–60 (2015). 204. Buchfink, B., Reuter, K. &amp; Drost, H.-G. Sensitive protein alignments at tree-of-life scale using DIAMOND. Nature Methods 18, 366–368 (2021). 205. Pearson, W. R. &amp; Lipman, D. J. Improved tools for biological sequence comparison. Proceedings of the National Academy of Sciences of the United States of America 85, 2444–2448 (1988). 206. Lipman, D. J. &amp; Pearson, W. R. Rapid and sensitive protein similarity searches. Science (New York, N.Y.) 227, 1435–1441 (1985). 207. Saripella, G. V., Sonnhammer, E. L. L. &amp; Forslund, K. Benchmarking the next generation of homology inference tools. Bioinformatics 32, 2636 (2016). 208. Finn, R. D. et al. The Pfam protein families database: towards a more sustainable future. Nucleic Acids Research 44, D279 (2016). 209. Essoussi, N. &amp; Fayech, S. A comparison of four pair-wise sequence alignment methods. Bioinformation 2, 166–168 (2007). 210. Shpaer, E. G. et al. Sensitivity and Selectivity in Protein Similarity Searches: A Comparison of SmithWaterman in Hardware to BLAST and FASTA. Genomics 38, 179–191 (1996). 211. Schleimer, S., Wilkerson, D. S. &amp; Aiken, A. Winnowing: Local algorithms for document fingerprinting. in 7685 (Association for Computing Machinery, 2003). doi:10.1145/872757.872770. 212. Roberts, M., Hayes, W., Hunt, B. R., Mount, S. M. &amp; Yorke, J. A. Reducing storage requirements for biological sequence comparison. Bioinformatics 20, 3363–3369 (2004). 213. Li, H. Minimap and miniasm: Fast mapping and de novo assembly for noisy long sequences. Bioinformatics 32, 2103–2110 (2016). 214. Jain, C., Koren, S., Dilthey, A., Phillippy, A. M. &amp; Aluru, S. A fast adaptive algorithm for computing whole-genome homology maps. Bioinformatics 34, i748–i756 (2018). 215. Orenstein, Y., Pellow, D., Marçais, G., Shamir, R. &amp; Kingsford, C. Compact Universal k-mer Hitting Sets. in (eds. Frith, M. &amp; Storm Pedersen, C. N.) 257–268 (Springer International Publishing, 2016). doi:10.1007/978-3-319-43681-4_21. 216. Marçais, G. et al. Improving the performance of minimizers and winnowing schemes. Bioinformatics 33, i110–i117 (2017). 217. Chikhi, R., Limasset, A., Jackman, S., Simpson, J. T. &amp; Medvedev, P. On the Representation of de Bruijn Graphs. in 35–55 (Springer International Publishing, 2014). doi:10.1007/978-3-319-05269-4_4. 218. Edgar, R. Syncmers are more sensitive than minimizers for selecting conserved k-mers in biological sequences. PeerJ 9, e10805 (2021). 219. Sahlin, K. Effective sequence similarity detection with strobemers. Genome Research 31, 2080–2094 (2021). 220. Sahlin, K. Flexible seed size enables ultra-fast and accurate read alignment. doi:10.1101/2021.06.18.449070. 221. Weiner, P. 14th annual symposium on switching and automata theory (swat 1973). in 1–11 (1973). doi:10.1109/SWAT.1973.13. 222. Manber, U. &amp; Myers, G. Suffix arrays: A new method for on-line string searches. SIAM Journal on Computing 22, 935–948 (1993). 223. Abouelhoda, M. I., Kurtz, S. &amp; Ohlebusch, E. The Enhanced Suffix Array and Its Applications to Genome Analysis. in (eds. Guigó, R. &amp; Gusfield, D.) 449–463 (Springer, 2002). doi:10.1007/3-540-45784-4_35. 224. Ferragina, P. &amp; Manzini, G. Proceedings 41st annual symposium on foundations of computer science. in 390–398 (2000). doi:10.1109/SFCS.2000.892127. 225. Bray, N., Dubchak, I. &amp; Pachter, L. AVID: A global alignment program. Genome Research 13, 97–102 (2003). 226. Delcher, A. L., Phillippy, A., Carlton, J. &amp; Salzberg, S. L. Fast algorithms for large-scale genome alignment and comparison. Nucleic Acids Research 30, 2478–2483 (2002). 227. Abouelhoda, M. I., Kurtz, S. &amp; Ohlebusch, E. Replacing suffix trees with enhanced suffix arrays. Journal of Discrete Algorithms 2, 53–86 (2004). 228. Marçais, G. et al. MUMmer4: A fast and versatile genome alignment system. PLOS Computational Biology 14, e1005944 (2018). 229. Burrows, M. &amp; Wheeler, D. A block-sorting lossless data compression algorithm. (1994). 230. Vyverman, M., De Baets, B., Fack, V. &amp; Dawyndt, P. Prospects and limitations of full-text index structures in genome analysis. Nucleic Acids Research 40, 6993–7015 (2012). 231. Cheng, H., Wu, M. &amp; Xu, Y. FMtree: A fast locating algorithm of FM-indexes for genomic data. Bioinformatics 34, 416–424 (2018). 232. Lam, T. W., Sung, W. K., Tam, S. L., Wong, C. K. &amp; Yiu, S. M. Compressed indexing and local alignment of DNA. Bioinformatics 24, 791–797 (2008). 233. Li, H. &amp; Durbin, R. Fast and accurate short read alignment with burrowswheeler transform. Bioinformatics 25, 1754–1760 (2009). 234. Li, H. &amp; Durbin, R. Fast and accurate long-read alignment with burrowswheeler transform. Bioinformatics 26, 589–595 (2010). 235. Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. https://arxiv.org/abs/1303.3997 (2013). 236. Liu, Y. &amp; Schmidt, B. Long read alignment based on maximal exact match seeds. Bioinformatics 28, i318–i324 (2012). 237. Langmead, B. &amp; Salzberg, S. L. Fast gapped-read alignment with Bowtie 2. Nat Methods 9, 357–359 (2012). 238. Song, B. et al. AnchorWave: Sensitive alignment of genomes with high sequence diversity, extensive structural polymorphism, and whole-genome duplication. Proceedings of the National Academy of Sciences 119, e2113075119 (2022). 239. Durbin, R., Eddy, S. R., Krogh, A. &amp; Mitchison, G. Biological sequence analysis: Probabilistic models of proteins and nucleic acids. (Cambridge University Press, 1998). doi:10.1017/CBO9780511790492. 240. Söding, J. Protein homology detection by HMM-HMM comparison. Bioinformatics (Oxford, England) 21, 951–960 (2005). 241. Finn, R. D., Clements, J. &amp; Eddy, S. R. HMMER web server: Interactive sequence similarity searching. Nucleic Acids Research 39, W29–W37 (2011). 242. Wang, J., Keightley, P. D. &amp; Johnson, T. MCALIGN2: Faster, accurate global pairwise alignment of non-coding DNA sequences based on explicit models of indel evolution. BMC Bioinformatics 7, 292 (2006). 243. Ruffalo, M., LaFramboise, T. &amp; Koyutürk, M. Comparative analysis of algorithms for next-generation sequencing read alignment. Bioinformatics (Oxford, England) 27, 2790–2796 (2011). 247. Alser, M. et al. Technology dictates algorithms: Recent developments in read alignment. Genome Biology 22, 249 (2021). 248. Břinda, K., Boeva, V. &amp; Kucherov, G. RNF: A general framework to evaluate NGS read mappers. Bioinformatics 32, 136–139 (2016). 249. Lin, H.-N. &amp; Hsu, W.-L. Kart: a divide-and-conquer algorithm for NGS read alignment. Bioinformatics (Oxford, England) 33, 2281–2287 (2017). 250. Olson, C. B. et al. 2012 IEEE 20th international symposium on field-programmable custom computing machines. in 161–168 (2012). doi:10.1109/FCCM.2012.36. 253. Zeni, A. et al. 2020 IEEE international parallel and distributed processing symposium (IPDPS). in 462–471 (2020). doi:10.1109/IPDPS47924.2020.00055. 254. Chaisson, M. J. &amp; Tesler, G. Mapping single molecule sequencing reads using basic local alignment with successive refinement (BLASR): Application and theory. BMC Bioinformatics 13, 238 (2012). 255. Haghshenas, E., Sahinalp, S. C. &amp; Hach, F. lordFAST: sensitive and Fast Alignment Search Tool for LOng noisy Read sequencing Data. Bioinformatics (Oxford, England) 35, 20–27 (2019). 256. Sović, I. et al. Fast and sensitive mapping of nanopore sequencing reads with GraphMap. Nature Communications 7, 11307 (2016). 257. Sedlazeck, F. J. et al. Accurate detection of complex structural variations using single-molecule sequencing. Nature Methods 15, 461–468 (2018). 258. Jain, C., Dilthey, A., Koren, S., Aluru, S. &amp; Phillippy, A. M. A fast approximate algorithm for mapping long reads to large reference databases. Journal of Computational Biology 25, 766–779 (2018). 259. Prodanov, T. &amp; Bansal, V. Sensitive alignment using paralogous sequence variants improves long-read mapping and variant calling in segmental duplications. Nucleic Acids Research 48, e114 (2020). 260. Jain, C., Rhie, A., Hansen, N. F., Koren, S. &amp; Phillippy, A. M. Long-read mapping to repetitive reference sequences using Winnowmap2. Nature Methods 19, 705–710 (2022). 261. Mikheenko, A., Bzikadze, A. V., Gurevich, A., Miga, K. H. &amp; Pevzner, P. A. TandemTools: Mapping long reads and assessing/improving assembly quality in extra-long tandem repeats. Bioinformatics 36, i75–i83 (2020). 262. Li, H., Ruan, J. &amp; Durbin, R. Mapping short DNA sequencing reads and calling variants using mapping quality scores. Genome Research 18, 1851–1858 (2008). 263. Li, H. et al. The sequence alignment/map format and SAMtools. Bioinformatics 25, 2078–2079 (2009). 264. Understanding MAPQ scores in SAM files: Does 37 = 42? 265. Lee, H. &amp; Schatz, M. C. Genomic dark matter: The reliability of short read mapping illustrated by the genome mappability score. Bioinformatics 28, 2097–2105 (2012). 266. Langmead, B. A tandem simulation framework for predicting mapping quality. Genome Biology 18, 152 (2017). 267. Ruffalo, M., Koyutürk, M., Ray, S. &amp; LaFramboise, T. Accurate estimation of short read mapping quality for next-generation genome sequencing. Bioinformatics 28, i349–i355 (2012). 268. Multiple Sequence Alignment Methods. vol. 1079 (Humana Press, 2014). 269. Wang, L. &amp; Jiang, T. On the complexity of multiple sequence alignment. Journal of Computational Biology 1, 337–348 (1994). 270. Just, W. Computational complexity of multiple sequence alignment with SP-score. Journal of Computational Biology 8, 615–623 (2001). 271. Tang, F. et al. HAlign 3: Fast multiple alignment of ultra-large numbers of similar DNA/RNA sequences. Molecular Biology and Evolution 39, msac166 (2022). 272. Feng, D.-F. &amp; Doolittle, R. F. Progressive sequence alignment as a prerequisitetto correct phylogenetic trees. Journal of Molecular Evolution 25, 351–360 (1987). 273. Jones, D. T., Taylor, W. R. &amp; Thornton, J. M. The rapid generation of mutation data matrices from protein sequences. Bioinformatics 8, 275–282 (1992). 274. Blaisdell, B. E. A measure of the similarity of sets of sequences not requiring sequence alignment. Proceedings of the National Academy of Sciences 83, 5155–5159 (1986). 275. Gronau, I. &amp; Moran, S. Optimal implementations of UPGMA and other common clustering algorithms. Information Processing Letters 104, 205–210 (2007). 276. Saitou, N. &amp; Nei, M. The neighbor-joining method: A new method for reconstructing phylogenetic trees. Molecular Biology and Evolution 4, 406–425 (1987). 277. Katoh, K. &amp; Toh, H. PartTree: An algorithm to build an approximate tree from a large number of unaligned sequences. Bioinformatics 23, 372–374 (2007). 278. Sievers, F. et al. Fast, scalable generation of high-quality protein multiple sequence alignments using Clustal Omega. Molecular Systems Biology 7, 539 (2011). 279. Blackshields, G., Sievers, F., Shi, W., Wilm, A. &amp; Higgins, D. G. Sequence embedding for fast construction of guide trees for multiple sequence alignment. Algorithms for Molecular Biology 5, 21 (2010). 280. Altschul, S. F. Gap costs for multiple sequence alignment. Journal of Theoretical Biology 138, 297–309 (1989). 281. Altschul, S. F., Carroll, R. J. &amp; Lipman, D. J. Weights for data related by a tree. Journal of Molecular Biology 207, 647–653 (1989). 282. Edgar, R. C. &amp; Sjölander, K. A comparison of scoring functions for protein sequence profile alignment. Bioinformatics 20, 1301–1308 (2004). 283. Notredame, C., Holm, L. &amp; Higgins, D. G. COFFEE: An objective function for multiple sequence alignments. Bioinformatics 14, 407–422 (1998). 284. Notredame, C., Higgins, D. G. &amp; Heringa, J. T-coffee: a novel method for fast and accurate multiple sequence alignment11Edited by J. Thornton. Journal of Molecular Biology 302, 205–217 (2000). 285. Edgar, R. C. MUSCLE: A multiple sequence alignment method with reduced time and space complexity. BMC Bioinformatics 5, 113 (2004). 286. Edgar, R. C. MUSCLE: Multiple sequence alignment with high accuracy and high throughput. Nucleic Acids Research 32, 1792–1797 (2004). 287. Do, C. B., Mahabhashyam, M. S. P., Brudno, M. &amp; Batzoglou, S. ProbCons: Probabilistic consistency-based multiple sequence alignment. Genome Research 15, 330–340 (2005). 288. Thompson, J. D., Higgins, D. G. &amp; Gibson, T. J. CLUSTAL W: improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties and weight matrix choice. Nucleic Acids Research 22, 4673–4680 (1994). 289. Thompson, J. D., Gibson, T. J., Plewniak, F., Jeanmougin, F. &amp; Higgins, D. G. The CLUSTAL_x windows interface: Flexible strategies for multiple sequence alignment aided by quality analysis tools. Nucleic Acids Research 25, 4876–4882 (1997). 290. Liu, Y., Schmidt, B. &amp; Maskell, D. L. MSAProbs: Multiple sequence alignment based on pair hidden markov models and partition function posterior probabilities. Bioinformatics 26, 1958–1964 (2010). 291. Lemoine, F., Blassel, L., Voznica, J. &amp; Gascuel, O. COVID-align: Accurate online alignment of hCoV-19 genomes using a profile HMM. Bioinformatics (2020) doi:10.1093/bioinformatics/btaa871. 292. Eddy, S. R. Multiple Alignment Using Hidden Markov Models. 7. 293. Kim, J., Pramanik, S. &amp; Chung, M. J. Multiple sequence alignment using simulated annealing. Bioinformatics 10, 419–426 (1994). 295. Huo, H. &amp; Stojkovic, V. Third international conference on natural computation (ICNC 2007). in vol. 2 270–274 (2007). 296. Chowdhury, B. &amp; Garai, G. A review on multiple sequence alignment from the perspective of genetic algorithm. Genomics 109, 419–431 (2017). 297. Zhang, C. &amp; Wong, A. K. C. A genetic algorithm for multiple molecular sequence alignment. Bioinformatics 13, 565–581 (1997). 298. Naznin, F., Sarker, R. &amp; Essam, D. Vertical decomposition with genetic algorithm for multiple sequence alignment. BMC Bioinformatics 12, 353 (2011). 299. Naznin, F., Sarker, R. &amp; Essam, D. Progressive alignment method using genetic algorithm for multiple sequence alignment. IEEE Transactions on Evolutionary Computation 16, 615–631 (2012). 300. Notredame, C. &amp; Higgins, D. G. SAGA: Sequence alignment by genetic algorithm. Nucleic Acids Research 24, 1515–1524 (1996). 301. Aksamentov, I., Roemer, C., Hodcroft, E. &amp; Neher, R. Nextclade: clade assignment, mutation calling and quality control for viral genomes. Journal of Open Source Software 6, 3773 (2021). 302. Garriga, E. et al. Large multiple sequence alignments with a root-to-leaf regressive method. Nature Biotechnology 37, 1466–1470 (2019). 303. Notredame, C. Recent Evolutions of Multiple Sequence Alignment Algorithms. PLOS Computational Biology 3, e123 (2007). 307. Thompson, J. D., Plewniak, F. &amp; Poch, O. BAliBASE: a benchmark alignment database for the evaluation of multiple alignment programs. Bioinformatics 15, 87–88 (1999). Here I am using an index starting at 1 and inclusive, so \\(S_1[1,n-1]\\) represents the first \\(n-1\\) characters. If \\(S_1 = ABCD\\) then \\(S_1[1;3]=ABC\\)↩︎ "],["HPC-paper.html", "Chapter 3 Contribution 1: Improving read alignment by exploring a sequence transformation space Highlights Graphical Abstract Abstract 3.1 Introduction 3.2 Methods 3.3 Datasets and Pipelines 3.4 Results 3.5 Discussion 3.6 Limitations of this study Acknowledgements Author contributions Declaration of interests STAR Methods Supplementary information", " Chapter 3 Contribution 1: Improving read alignment by exploring a sequence transformation space Recall that, when using long-read sequencing technologies, sequencing errors are more frequent than when using short-read sequencing. The most common of these sequencing errors are linked to homopolymers (1.4.2). In read-mapping analyses, a short sequence is globally aligned to a much longer reference sequence. Mapping long-reads can help bridge some gaps in knowledge and solve problems impossible to solve with shorter reads, however sequencing errors complicate an already complicated task (2.3). Homopolymer compression (1.4.3.2) has been successfully used to mitigate some of the effects of these errors and improve long-read mapping analyses. There might, however, be rooom for improvement and alternative sequence transformation procedures that improve long-read mapping more than homopolymer compression. This chapter was written as an article titled: “Mapping-friendly sequence reductions: going beyond homopolymer compression”. It is currently in press for the iScience proceedings of the RECOMB-SEQ 2022 conference and is presented as is, without any modification from the submitted version. The author list, complete with affiliations is given below: Luc Blassel1,2*, Paul Medvedev3,4,5, Rayan Chikhi1 1 Sequence Bioinformatics, Department of Computational Biology, Institut Pasteur, Paris, France 2 Sorbonne Université, Collège doctoral, Paris, France 3 Department of Computer Science and Engineering, Pennsylvania State University, University Park, Pennsylvania, United States of America 4 Department of Biochemistry and Molecular Biology, Pennsylvania State University, University Park, Pennsylvania, United States of America 5 Center for Computational Biology and Bioinformatics, Pennsylvania State University, University Park, Pennsylvania, United States of America Highlights Mapping-friendly sequence reductions (MSRs) are functions that transform DNA sequences. They are a generalization of the concept of homopolymer compression. We show that some well-chosen MSRs enable more accurate long read mapping. Graphical Abstract Abstract Sequencing errors continue to pose algorithmic challenges to methods working with sequencing data. One of the simplest and most prevalent techniques for ameliorating the detrimental effects of homopolymer expansion/contraction errors present in long reads is homopolymer compression. It collapses runs of repeated nucleotides, to remove some sequencing errors and improve mapping sensitivity. Though our intuitive understanding justifies why homopolymer compression works, it in no way implies that it is the best transformation that can be done. In this paper, we explore if there are transformations that can be applied in the same pre-processing manner as homopolymer compression that would achieve better alignment sensitivity. We introduce a more general framework than homopolymer compression, called mapping-friendly sequence reductions. We transform the reference and the reads using these reductions and then apply an alignment algorithm. We demonstrate that some mapping-friendly sequence reductions lead to improved mapping accuracy, outperforming homopolymer compression. 3.1 Introduction Sequencing errors continue to pose algorithmic challenges to methods working with read data. In short-read technologies, these tend to be substitution errors, but in long reads, these tend to be short insertions and deletions; most common are expansions or contractions of homopolymers (i.e. reporting 3 As instead of 4) 100. Many algorithmic problems, such as alignment, become trivial if not for sequencing errors 128. Error correction can often decrease the error rate but does not eliminate all errors. Most tools therefore incorporate the uncertainty caused by errors into their underlying algorithms. The higher the error rate, the more detrimental its effect on algorithm speed, memory, and accuracy. While the sequencing error rate of any given technology tends to decrease over time, new technologies entering the market typically have high error rates (e.g. Oxford Nanopore Technologies). Finding better ways to cope with sequencing error therefore remains a top priority in bioinformatics. One of the simplest and most prevalent techniques for ameliorating the detrimental effects of homopolymer expansion/contraction errors is homopolymer compression (abbreviated HPC). HPC simply transforms runs of the same nucleotide within a sequence into a single occurrence of that nucleotide. For example, HPC applied to the sequence AAAGGTTA yields the sequence AGTA. To use HPC in an alignment algorithm, one first compresses the reads and the reference, then aligns each compressed read to the compressed reference, and finally reports all alignment locations, converted into the coordinate system of the uncompressed reference. HPC effectively removes homopolymer expansion/contraction errors from the downstream algorithm. Though there is a trade-off with specificity of the alignment (e.g. some of the compressed alignments may not correspond to true alignments) the improvement in mapping sensitivity usually outweighs it 118. The first use of HPC that we are aware of was in 2008 as a pre-processing step for 454 pyrosequencing data in the Celera assembler 114. It is used by a wide range of error-correction algorithms, e.g. for 454 data 308, PacBio data 116, and Oxford Nanopore data 309. HPC is used in alignment, e.g. by the widely used minimap2 aligner 118. HPC is also used in long-read assembly, e.g. HiCanu 111, SMARTdenovo 310, or mdBG 112. HPC is also used for clustering transcriptome reads according to gene family of origin 115. Overall, HPC has been widely used, with demonstrated benefits. Though our intuitive understanding justifies why HPC works, it in no way implies that it is the best transformation that can be done. Are there transformations that can be applied in the same pre-processing way as HPC that would achieve better alignment sensitivity? In this work, we define a more general notion which we call mapping-friendly sequence reductions. In order to efficiently explore the performance of all reductions, we identify two heuristics to reduce the search space of reductions. We then identify a number of mapping-friendly sequence reductions which are likely to yield better mapping performance than HPC. We evaluate them using two mappers (minimap2 and winnowmap2) on three simulated datasets (whole human genome, human centromere, and whole Drosophila genome). We show that some of these functions provide vastly superior performance in terms of correctly placing high mapping quality reads, compared to either HPC or using raw reads. For example, one function decreased the mapping error rate of minimap2 by an order of magnitude over the entire human genome, keeping an identical fraction of reads mapped. We also evaluate whether HPC sensitivity gains continue to outweigh the specificity cost with the advent of telomere-to-telomere assemblies 4. These contain many more low-complexity and/or repeated regions such as centromeres and telomeres. HPC may increase mapping ambiguity in these regions by removing small, distinguishing, differences between repeat instances. Indeed, we find that neither HPC nor our mapping-friendly sequence reductions perform better than mapping raw reads on centromeres, hinting at the importance of preserving all sequence information in repeated regions. 3.2 Methods 3.2.1 Streaming sequence reductions We wish to extend the notion of homopolymer compression to a more general function while maintaining its simplicity. What makes HPC simple is that it can be done in a streaming fashion over the sequence while maintaining only a local context. The algorithm can be viewed simply as scanning a string from left to right and, at each new character, outputting that character if and only if it is different from the previous character. In order to prepare for generalizing this algorithm, let us define a function \\(g^\\text{HPC} : \\Sigma^2\\rightarrow\\Sigma\\cup\\{\\varepsilon\\}\\) where \\(\\Sigma\\) is the DNA alphabet, \\(\\varepsilon\\) is the empty character, and \\[\\begin{align*} &amp; g^\\text{HPC}(x_1\\cdot x_2) = \\begin{cases} x_2 &amp; \\text{if } x_1 \\neq x_2 \\\\ \\varepsilon &amp; \\text{if } x_1 = x_2 \\end{cases} \\end{align*}\\] Now, we can view HPC as sliding a window of size 2 over the sequence and at each new window, applying \\(g^\\text{HPC}\\) to the window and concatenating the output to the growing compressed string. Formally, let \\(x\\) be a string, which we index starting from 1. Then, the HPC transformation is defined as \\[\\begin{equation} f(x) = x[1,\\ell-1]\\cdot g(x[1,\\ell]) \\cdot g(x[2, \\ell+1])\\cdots g(x[|x|-\\ell+1,|x|]) \\tag{3.1} \\end{equation}\\] where \\(\\ell = 2\\) and \\(g=g^\\text{HPC}\\). In other words, \\(f\\) is the concatenation of the first \\(\\ell-1\\) characters of \\(x\\) and the sequence of outputs of \\(g\\) applied to a sliding window of length \\(\\ell\\) over \\(x\\). The core of the transformation is given by \\(g\\) and the size of the context \\(\\ell\\), and \\(f\\) is simply the wrapper for \\(g\\) so that the transformation can be applied to arbitrary length strings. With this view in mind, we can generalize HPC while keeping its simplicity by 1) considering different functions \\(g\\) that can be plugged into Equation (3.1) increasing the context that \\(g\\) uses (i.e. setting \\(\\ell&gt;2\\)). Formally, for a given alphabet \\(\\Sigma\\) and a context size \\(\\ell\\), a function \\(T\\) mapping strings to strings is said to be an order-\\(\\ell\\) Streaming sequence reduction (abbreviated SSR) if there exists some \\(g : \\Sigma^\\ell\\rightarrow\\Sigma\\cup\\{\\varepsilon\\}\\) such that \\(T=f\\). Figure 3.1A shows how an SSR can be visualized as a directed graph. Observe that an order-\\(\\ell\\) SSR is defined by a mapping between \\(|\\Sigma|^\\ell\\) inputs and \\(|\\Sigma| + 1\\) outputs. For example, for \\(\\ell=2\\), there are \\(n=16\\) inputs and \\(k=5\\) outputs. Figure 3.1B visualizes HPC in this way. Figure 3.1: Representing and counting Streaming sequence reductions. A: General representation of an order-2 Streaming sequence reduction as a mapping of 16 input dinucleotides, to the 4 nucleotide outputs and the empty character \\(\\varepsilon\\). B: Homopolymer compression is an order-2 SSR. All dinucleotides except those that contain the same nucleotide twice map to the second nucleotide of the pair. The 4 dinucleotides that are the two same nucleotides map to the empty character \\(\\varepsilon\\). C: Our RC-core-insensitive order-2 SSRs are mappings of the 6 representative dinucleotide inputs to the 4 nucleotide outputs and the empty character \\(\\varepsilon\\). The 4 dinucleotides that are their own reverse complement are always mapped to \\(\\varepsilon\\). The remaining 6 dinucleotides are mapped to the complement of the mapped output of the reverse complement dinucleotide input. For example, if AA is mapped to C, then TT (the reverse complement of AA) will be mapped to G (the complement of C). D: Number of possible SSR mappings under the different restrictions presented in the main text. All mappings from 16 dinucleotide inputs to 5 outputs (as in panel A) are represented by the outermost circle. All RC-core-insensitive mappings (as in panel C) are represented by the medium circle. All RC-core-insensitive mappings with only one representative of each equivalence class are represented by the innermost circle. Since we aim to use SSRs in the context of sequencing data, we need to place additional restrictions on how they handle reverse complements. For example, given two strings \\(x\\) (e.g. a read) and \\(y\\) (e.g. a substring of the reference), a mapper might check if \\(x = RC(y)\\). When strings are pre-processed using an SSR \\(f\\), it will end up checking if \\(f(x) = RC(f(y))\\). However, \\(x = RC(y)\\) only implies that \\(f(x) = f(RC(y))\\). In order to have it also imply that \\(f(x) = RC(f(y))\\), we need \\(f\\) to be commutative with RC, i.e. applying SSR then RC needs to be equivalent to applying RC then SSR. We say that \\(f\\) is RC-insensitive if for all \\(x\\), \\(f(RC(x))= RC(f(x))\\). Observe that HPC is RC-insensitive. 3.2.2 Restricting the space of streaming sequence reductions To discover SSRs that improve mapping performance, our strategy is to put them all to the test by evaluating the results of an actual mapping software over a simulated test dataset reduced by each SSR. However, even with only \\(16\\) inputs and \\(5\\) outputs, the number of possible \\(g\\) mappings for order-2 SSRs is \\(5^{16}\\approx 1.5\\cdot10^{11}\\), which is prohibitive to enumerate. In this section, we describe two ideas for reducing the space of SSRs that we will test. In subsection 3.2.2.1, we show how the restriction to RC-insensitive mappings can be used to reduce the search space. In subsection 3.2.2.2, we exploit the natural symmetry that arises due to Watson-Crick complements to further restrict the search space. These restrictions reduce the number of order-2 SSRs to only , making it feasible to test all of them. Figure 3.1D shows an overview of our restriction process. 3.2.2.1 Reverse complement-core-insensitive streaming sequence reductions Consider an SSR defined by a function \\(g\\), as in Equation (3.1). Throughout this paper we will consider SSRs that have a related but weaker property than RC-insensitive. We say that an SSR is RC-core-insensitive if the function \\(g\\) that defines it has the property that for every \\(\\ell\\)-mer\\(x\\) and its reverse complement \\(y\\), we have that either \\(g(x)\\) is the reverse complement of \\(g(y)\\) or \\(g(x) = g(y) = \\varepsilon\\). We will restrict our SSR search space to RC-core-insensitive reductions in order to reduce the number of SSRs we will need to test. Let us consider what this means for the case of \\(\\ell=2\\), which will be the focal point of our experimental analysis. There are 16 \\(\\ell\\)-mers(i.e. dinucleotides) in total. Four of them are their own reverse complement: AT, TA, GC, CG. The RC-core-insensitive restriction forces \\(g\\) to map each of these to \\(\\varepsilon\\), since a single nucleotide output cannot be its own reverse complement. This leaves 12 \\(\\ell\\)-mers, which can be broken down into 6 pairs of reverse complements. For each pair, we can order them in lexicographical order and write them as \\((AA,TT), (AC,GT), (AG,CT), (CA,TG), (CC,GG),\\) and \\((GA,TC)\\). Defining \\(g\\) can then be done by assigning an output nucleotide to the first \\(\\ell\\)-mer in each of these pairs (Figure 3.1C). For example, we can define an SSR by assigning \\(g(AA) = C\\), \\(g(AC) = C\\), \\(g(AG) = A\\), \\(g(CA) = A\\), \\(g(CC) = T\\), and \\(g(GA) = G\\). As an example, let us apply the corresponding SSR to an example read \\(r\\): \\[\\begin{align*} r &amp; = \\text{TAAGTTGA} &amp; f(RC(r)) &amp;=\\color{red}{\\text{T}}\\color{green}{\\text{CACCTG}} \\\\ f(r) &amp; =\\text{TCAGGTG} &amp; RC(f(r)) &amp;=\\;\\;\\;\\color{green}{\\text{CACCTG}}\\color{red}{\\text{A}} \\\\ RC(r) &amp; =\\text{TCAACTTA} &amp; &amp; \\end{align*}\\] Observe that the first \\(\\ell-1\\) nucleotides of \\(r\\) (shown in red) are copied as-is, since we do not apply \\(g\\) on them (as per Equation (3.1)). As we see in this example, this implies that \\(f(RC(r))\\) is not necessarily equal to \\(RC(f(r))\\); thus an RC-core-insensitive SSR is not necessarily an RC-insensitive SSR. However, an RC-core-insensitive SSR has the property that for all strings \\(r\\), we have \\(f(RC(r))[\\ell, |r|]) = RC(f(r))[1, |r| - \\ell + 1]\\). In other words, if we drop the \\(\\ell - 1\\) prefix of \\(f(RC(r))\\) and the \\(\\ell - 1\\) suffix of \\(RC(f(r))\\), then the two strings are equal. Though we no longer have the strict RC-insensitive property, this new property suffices for the purpose of mapping long reads. Since the length of the read sequences will be much greater than \\(\\ell\\) (in our results we will only use \\(\\ell=2\\)), having a mismatch in the first or last nucleotide will be practically inconsequential. It is important to note though that there may be other RC-insensitive functions not generated by this construction. For instance, HPC cannot be derived using this method (as it does not map the di-nucleotides AT,TA,GC and CG to \\(\\varepsilon\\)), and yet it is RC-insensitive. We can count the number of RC-core-insensitive SSRs. Let us define \\(i(\\ell)\\) the number of input assignments necessary to fully determine the RC-core-insensitive SSR; one can think of this as the degrees-of-freedom in choosing \\(g\\). As we showed, for \\(\\ell=2\\), we have \\(i(\\ell)=6\\). The number of RC-core-insensitive SSRs is then \\(5^{i(\\ell)}\\). Therefore, for \\(\\ell=2\\), instead of \\(5^{16}\\) possible mappings we have at most \\(5^{6}\\approx1.5\\cdot10^{4}\\) RC-core-insensitive mappings (Figure 3.1D). For an odd \\(\\ell&gt;2\\), there are no \\(\\ell\\)-mers that are their own reverse complements, hence \\(i(\\ell)=4^\\ell/2\\). If \\(\\ell\\) is even then there are \\(4^{\\ell/2}\\) inputs that are their own reverse complements (i.e. we take all possible sequences of length \\(\\ell/2\\) and reconstruct the other half with reverse complements). Thus, \\(i(\\ell)=(4^\\ell- 4^{\\ell/2})/2\\). 3.2.2.2 Equivalence classes of SSRs Non mapping-related preliminary tests led us to hypothesize that swapping \\(A\\leftrightarrow T\\) and/or \\(C\\leftrightarrow G\\), as well as swapping the whole \\(A/T\\) pair with the \\(C/G\\) pair in the SSR outputs would have a negligible effect on performance. In other words, we could exchange the letters of the output in a way that preserves the Watson-Crick complementary relation. Intuitively, this can be due to the symmetry induced by reverse complements in nucleic acid strands, though we do not have a more rigorous explanation for this effect. In this section, we will formalize this observation by defining the notion of SSR equivalence. This will reduce the space of SSRs that we will need to consider by allowing us to evaluate only one SSR from each equivalence class. Consider an RC-core-insensitive SSR defined by a function \\(g\\), as in Equation (3.1). An \\(\\ell\\)-mer is canonical if it is the not lexicographically larger than its reverse complement. Let \\(I\\) be the set of all \\(\\ell\\)-mers that are canonical. Such an SSR’s dimension \\(k\\) is the number of distinct nucleotides that can be output by \\(g\\) on inputs from \\(I\\) (not counting \\(\\varepsilon\\)). The dimension can range from \\(1\\) to \\(4\\). Next, observe that \\(g\\) maps all elements of \\(I\\) to one of \\(k+ 1\\) values (i.e. \\(\\Sigma \\cup \\varepsilon\\)). The output of \\(g\\) on \\(\\ell\\)-mers not in \\(I\\) is determined by its output on \\(\\ell\\)-mers in \\(I\\), since we assume the SSR is RC-core-insensitive. We can therefore view it as a partition of \\(I\\) into \\(k+1\\) sets \\(S_0\\), …, \\(S_k\\), and then having a function \\(t\\) that is an injection from \\(\\{1, \\ldots, k\\}\\) to \\(\\Sigma\\) that assigns an output letter to each partition. Further, we permanently assign the output letter for \\(S_0\\) to be \\(\\varepsilon\\). Note that while \\(S_0\\) could be empty, \\(S_1, \\ldots, S_k\\) cannot be empty by definition of dimension. For example, the SSR used in Section 3.2.2.1 has dimension four and corresponds to the partition \\(S_0 = \\{\\}, S_1=\\{AG,CA\\}\\), \\(S_2=\\{CC\\}\\), \\(S_3=\\{AA,AC\\}\\), \\(S_4=\\{GA\\}\\), and to the injection \\(t(1) = A\\), \\(t(2) =T\\), \\(t(3) = C\\), and \\(t(4) = G\\). Let \\(IsComp(x,y)\\) be a function that returns true if two nucleotides \\(x, y \\in \\Sigma \\cup \\{\\varepsilon\\}\\) are Watson-Crick complements, and false otherwise. Consider two SSRs of dimension \\(k\\) defined by \\(S_0, \\ldots, S_k, t\\) and \\(S&#39;_0, , S&#39;_k, t&#39;\\), respectively. We say that they are equivalent iff all the following conditions are met: \\(S_0 = S&#39;_0\\), there exists a permutation \\(\\pi\\) of \\(\\{1,\\ldots, k\\}\\) such that for all \\(1 \\leq i \\leq k\\), we have \\(S_i = S&#39;_{\\pi(i)}\\), for all \\(1 \\leq i &lt; j \\leq k\\), we have \\(IsComp(t(i), t(j)) = IsComp(t&#39;(\\pi(i)), t&#39;(\\pi(j)))\\). One can verify that this definition is indeed an equivalence relation, i.e. it is reflexive, symmetric, and transitive. Therefore, we can partition the set of all SSRs into equivalence classes based on this equivalence relation. One caveat is that a single SSR defined by a function \\(g\\) may correspond to multiple SSRs of the form \\(S_0,\\ldots,S_k,t\\). However, these multiple SSRs are equivalent, hence the resulting equivalence classes are not affected. Furthermore, we can assume that there is some rule to pick one representative SSR for its equivalence class; the rule itself does not matter in our case. Figure 3.2 shows the equivalence classes for \\(\\ell=2\\), for a fixed partition. An equivalence class can be defined by which pair of classes \\(S_i\\) and \\(S_j\\) have complementary outputs under \\(t\\) and \\(t&#39;\\). Let us define \\(o(k)\\) as the number of equivalence classes for a given partition and a given \\(k\\). Then Figure 3.2 shows that \\(o(1)=1\\), \\(o(2)=2\\) and \\(o(3) = o(4) = 3\\). There are thus only 9 equivalence classes for a given partition. Figure 3.2: SSR equivalence classes for a fixed partition of the inputs. \\(S_0\\) is always assigned \\(\\varepsilon\\), so it is represented by a gray node. A blue link between \\(S_i\\) and an \\(S_j\\) denotes that \\(IsComp(t(i), t(j))=\\text{true}\\). The equivalence classes are determined by the Watson-Crick complementary relationships between the rest of the parts, i.e. by all the possible ways to draw the blue links. 3.2.2.3 Counting the number of restricted SSRs In this section, we derive a formula for the number of restricted SSRs, i.e. SSRs that are RC-core-insensitive and that are representative for their equivalence class. Consider the class of RC-core-insensitive SSRs with dimension \\(k\\). In subsection 3.2.2.1, we derived that the degrees-of-freedom in assigning \\(\\ell\\)-mers to an output is \\(i(\\ell) = 4^\\ell/2\\) if \\(\\ell\\) is odd and \\(i(\\ell) = (4^\\ell - 4^{\\ell / 2})/2\\) if \\(\\ell\\) is even. Let \\(C(\\ell,k)\\) be the number of ways that \\(i(\\ell)\\) \\(\\ell\\)-mers can be partitioned into \\(k+1\\) sets \\(S_0, \\ldots, S_k\\), with \\(S_1, \\ldots, S_k\\) required to be non-empty. Then, in subsection 3.2.2.2, we have derived \\(o(k)\\), the number of SSR equivalence classes for each such partition. The number of restricted SSRs can then be written as \\[\\begin{equation} N(\\ell) = \\sum_{k=1}^{4} C(\\ell, k) \\cdot o(k) \\tag{3.2} \\end{equation}\\] To derive the formula for \\(C(\\ell, k)\\), we first recall that the number of ways to partition \\(n\\) elements into \\(k\\) non-empty sets is known as the Stirling number of the second kind and is denoted by \\(\\tiny\\bigg\\{% \\begin{matrix} n \\\\ k \\end{matrix} \\bigg\\} \\)311. It can be computed using the formula \\[\\begin{equation*} \\bigg\\{% \\begin{matrix} n \\\\ k \\end{matrix} \\bigg\\} = \\frac{1}{k!}\\sum_{i=0}^k(-1)^i\\bigg( \\begin{matrix} k \\\\ i \\end{matrix} \\bigg) (k-i)^n \\end{equation*}\\] Let \\(j\\) be the number of the \\(i(\\ell)\\) \\(\\ell\\)-mers that are assigned to \\(S_0\\). Note this does not include the \\(\\ell\\)-mers that are self-complementary that are forced to be in \\(S_0\\). Let \\(C(\\ell,k,j)\\) be the number of ways that \\(i(\\ell)\\) \\(\\ell\\)-mers can be partitioned into \\(k+1\\) sets \\(S_0, \\ldots, S_k\\), such that \\(j\\) of the \\(\\ell\\)-mers go into \\(|S_0|\\) and \\(S_1, \\ldots, S_k\\) to are non-empty. We need to consider several cases depending on the value of \\(j\\): In the case that \\(j = 0\\), we are partitioning the \\(i(\\ell)\\) inputs among non-empty sets \\(S_1, \\ldots, S_k\\). Then \\(C(\\ell, k,j) = \\tiny{\\bigg\\{% \\begin{matrix} i(\\ell) \\\\ k \\end{matrix} \\bigg\\} }\\). In the case that \\(1 \\leq j \\leq i(\\ell) - k\\), there are \\(\\tiny{\\bigg( \\begin{matrix} i(\\ell) \\\\ j \\end{matrix} \\bigg) }\\) ways to choose which \\(j\\) \\(\\ell\\)-mers are in \\(S_0\\), and \\(\\tiny{\\bigg\\{% \\begin{matrix} i(\\ell) - j \\\\ k \\end{matrix} \\bigg\\} }\\) ways to partition the remaining \\(\\ell\\)-mers into \\(S_1, \\ldots, S_k\\). Hence, \\(C(\\ell, k,j) = \\tiny{\\bigg( \\begin{matrix} i(\\ell) \\\\ j \\end{matrix} \\bigg) }\\tiny{\\bigg\\{% \\begin{matrix} i(\\ell) - j \\\\ k \\end{matrix} \\bigg\\} }\\). In the case that \\(j &gt; i(\\ell) - k\\), it is impossible to partition the remaining \\(k\\) (or fewer) \\(\\ell\\)-mers into \\(S_1, \\ldots, S_k\\) such that the sets are non-empty. Recall that as we assume the dimension is \\(k\\), each set must contain at least one element. Hence, \\(C(\\ell, k,j) = 0\\). Putting this together into Equation (3.2), we get \\[\\begin{equation*} N(\\ell) = \\sum_{k=1}^4 o(k) \\bigg( \\bigg\\{% \\begin{matrix} i(\\ell) \\\\ k \\end{matrix} \\bigg\\} + \\sum_{j=1}^{i(\\ell) - k}\\bigg( \\begin{matrix} i(\\ell) \\\\ j \\end{matrix} \\bigg) \\bigg\\{% \\begin{matrix} i(\\ell)-j \\\\ k \\end{matrix} \\bigg\\} \\bigg) \\end{equation*}\\] For \\(\\ell=2\\), we have \\(N(2)=2,135\\) restricted SSRs, which is several orders of magnitude smaller than the initial \\(5^{16}\\) possible SSRs and allows us to test the performance of all of them. For order-3 SSRs we get \\(N(3)=2.9\\cdot10^{21}\\) which much smaller than the full search space of \\(5^{4^3}\\approx5.4\\cdot10^{44}\\), for order-4 SSRs we get a similar reduction in search space with \\(N(4)=9.4\\cdot10^{84}\\) as opposed to the full search space of \\(5^{4^4}\\approx8.6\\cdot10^{178}\\). For these higher order SSRs, although the restricted search space is much smaller than the full original one, it is still too large to exhaustively search. 3.3 Datasets and Pipelines 3.3.1 Datasets The following three reference sequences were used for evaluation: Whole human genome: This reference sequence is a whole genome assembly of the CHM13hTERT human cell line by the Telomere-to-Telomere consortium4. We used the 1.1 assembly release (Genbank Assembly ID GCA_009914755.3). Whole Drosophila genome: This reference sequence is a whole genome assembly of a Drosophila melanogaster, release 6.35 (Genbank Assembly ID GCA_000001215.4)312. Synthetic centromeric sequence: This sequence was obtained from the TandemTools mapper test data261. It is a simulated centromeric sequence that is inherently difficult to map reads to. Appendix A.1 describes how it was constructed, and it is downloadable from https://github.com/lucblassel/TandemTools/blob/master/test_data/simulated_del.fasta 3.3.2 Simulation pipeline Given a reference sequence, simulated reads were obtained using nanosim313 with the human_NA12878_DNA_FAB49712_guppy_flipflop pre-trained model, mimicking sequencing with an Oxford Nanopore instrument. The number of simulated reads was chosen to obtain a theoretical coverage of whole genomes around 1.5x, this resulted in simulating \\(\\approx 6.6\\cdot10^5\\) reads for the whole human genome and \\(\\approx 2.6\\cdot10^4\\) reads for the whole Drosophila genome. Since the centromeric sequence is very short, we aimed for a theoretical coverage of 100x which resulted in \\(\\approx 1.3\\cdot10^4\\) simulated reads. For each evaluated SSR, the reads as well as the reference sequence were reduced by applying the SSR to them. The reduced reads were then mapped to the reduced reference using minimap2118 with the map-ont preset and the -c flag to generate precise alignments. Although HPC is an option in minimap2 we do not use it and we evaluate HPC as any of the other SSRs by transforming the reference and reads prior to mapping. The starting coordinates of the reduced reads on the reduced reference were translated to reflect deletions incurred by the reduction process. The mapping results with translated coordinates were filtered to keep only the primary alignments. This process was done for each of our SSRs as well as with HPC and the original untransformed reads (denoted as raw). 3.3.3 Evaluation pipeline We use two metrics to evaluate the quality of a mapping of a simulated read set. The first is the fraction of reads mapped, i.e. that have at least one alignment. The second is the mapping error rate, which is the fraction of mapped reads that have an incorrect location as determined by paftools mapeval118. This tool considers a read as correctly mapped if the intersection between its true interval of origin, and the interval where it has been mapped to, is at least 10% of the union of both intervals. Furthermore, we measure the mapping error rate as a function of a given mapping quality threshold. Mapping quality (abbreviated mapq) is a metric reported by the aligner that indicates its confidence in read placement; the highest value (60) indicates that the mapping location is likely correct and unique with high probability, and a low value (e.g. 0) indicates that the read has multiple equally likely candidate mappings and that the reported location cannot be trusted. The mapping error rate at a mapq threshold \\(t\\) is then defined as the mapping error rate of reads whose mapping quality is \\(t\\) or above. For example, the mapping error rate at \\(t=0\\) is the mapping error rate of the whole read set, while the mapping error rate at \\(t=60\\) is the mapping error rate of only the most confident read mappings. Observe that the mapping error rate decreases as \\(t\\) increases. 3.4 Results 3.4.1 Selection of mapping-friendly sequence reductions We selected a set of “promising” SSRs starting from all of the SSRs enumerated in Section 3.2.2, that we call mapping-friendly sequence reductions (abbreviated MSR). The selection was performed by considering an independent read set of lower (0.5x) coverage, simulated from the whole human genome reference. This dataset is separate from the ones used for evaluation. Note that overfitting SSRs to a particular genome is acceptable in applications where a custom SSR can be used for each genome. Yet in this work, the same set of selected SSR will be used across all genomes. Figure 3.3: Illustration of how a respective mapq threshold is chosen for each of our evaluated MSRs. The orange dot shows the error rate and fraction of reads mapped for HPC at mapq threshold 60. Anything below and to the right of this point is strictly better than HPC 60, i.e. it has both a lower error rate and higher fraction of reads mapped. If an evaluated MSR does not pass through this region, then it is discarded from further consideration. In the figure, the blue MSR does pass through this region, indicating that it is better than HPC 60. We identify the leftmost point (marked as a blue dot) and use the mapq threshold at that point as the respective threshold. For each evaluated SSR, we selected, if it exists, the highest mapq threshold for which the mapped read fraction is higher and the mapping error rate is lower than HPC at mapq 60 (\\(0.93\\) and \\(2.1\\cdot10^{-3}\\) respectively), Figure 3.3 illustrates the idea. Then we identified the 20 SSRs that have the highest fraction of reads mapped at their respective thresholds. Similarly we identified the 20 SSRs with the lowest mapping error rate. Finally we select the 20 SSRs that have the highest percentage of thresholds “better” than HPC at mapq 60; i.e. the number of mapq thresholds for which the SSR has both a higher fraction of reads mapped and lower mapping error rate than HPC at a mapq threshold of 60, divided by the total number of thresholds (=60). The union of these 3 sets of 20 SSRs resulted in a set of 58 “promising” MSRs. Furthermore, we will highlight three MSRs that are “best in their category”, i.e. MSRF: The MSR with the highest fraction of mapped reads at a mapq threshold of 0. MSRE: The MSR with the lowest mapping error rate at its respective mapq threshold. MSRP: The MSR with the highest percentage of mapq thresholds for which it is “better” than HPC at mapq 60. Figure 3.4 shows the actual functions MSRF, MSRE, MSRP. An intriguing property is that they output predominantly As and Ts, with MSRP assigning only 2 input pairs to the G/C output whereas MSRE and MSRF assign only one. Additionally, MSRE and MSRP both assign the {CC,GG} input pair to the deletion output \\(\\varepsilon\\) removing any information corresponding to repetitions of either G or C from the reduced sequence. Overall this means the reduced sequences are much more AT-rich than their raw counterparts, but somehow information pertinent to mapping is retained. Figure 3.4: Graph representations of our highlighted MSRs: MSRE, MSRF, and MSRP. MSRE has the lowest error rate of among MSRs at the highest mapq threshold for which it performs better than HPC at mapq 60, MSRF has the highest fraction of reads mapped at mapq 60 and MSRP has the highest percentage of mapq thresholds for which it outperforms HPC at mapq 60. The grayed out nodes represent the reverse complement of input dinucleotides and outputs, as in Figure 3.1C. For example for MSRE, AA is mapped to T, so TT is mapped to A. 3.4.2 Mapping-friendly sequence reductions lead to lower mapping errors on whole genomes Across the entire human genome, at high mapping quality thresholds (above 50), our selected 58 MSRs generally have lower mapping error rate than HPC and raw Figure 3.5A and Table 3.1. This is not surprising, as we selected those MSRs partly on the criteria of outperforming HPC at mapq 60; however, it does demonstrate that we did not overfit to the simulated reads used to select the MSRs. Figure 3.5: Performance of our 58 selected mapping-friendly sequence reductions across genomes on reads simulated by nanosim. Panel A) shows the whole human genome assembly, B) the subset of mapped reads from panel B that originate from repetitive regions, and C) the “TandemTools” synthetic centromeric reference sequence. We highlighted the best-performing mapping-friendly sequence reductions as MSR E, F and P, respectively in terms of cumulative mapeval error rate, fraction of reads mapped, and percentage of better thresholds than HPC. Each point on a line represents, from left to right, the mapping quality thresholds 60, 50, 40, 30, 20, 10 and 0. For the first point of each line, only reads of mapping quality 60 are considered, and the y value represents the rate of these reads that are not correctly mapped, the x value represents the fraction of simulated reads that are mapped at this threshold. The next point is computed for all reads of mapping quality \\(\\geq50\\), etc. The rightmost point on any curve represents the mapping error rate and the fraction of mapped reads for all primary alignments. The x-axes are clipped for lower mapped read fractions to better differentiate HPC, raw and MSRs E, F and P. Mapping quality is only an indication from the aligner to estimate whether a read mapping is correct, and according to Figure 3.5A the mapping error rate of most MSRs is low even for mapping qualities lower than 60. Therefore, we choose to compare MSR-mapped reads with lower mapping qualities against raw or HPC-mapped reads with the highest (60) mapping quality (which is the mapping quality thresholds most practitioners would use by default). Table 3.1 shows that the three selected MSRs outperform both HPC and raw in terms of mapping error rate, with similar fractions of mapped reads overall. For example on the human genome, at mapq\\(\\geq 50\\), MSRF, MSRP and MSRE all map more reads than either HPC or raw at mapq=60, and MSRP and MSRE also have mapping error rates an order of magnitude lower than either HPC or raw. To evaluate the robustness of MSRs E, F and P we investigated the impact of mapping to a different organism or using another mapper. To this effect we repeated the evaluation pipeline in these different settings: Using the Drosophila melanogaster whole genome assembly as reference and mapping with minimap2 Using the whole human genome assembly as reference but mapping with winnowmap2(version 2.02)119. The same options as minimap2 were used, and k-mers were counted using meryl314, considering the top \\(0.02\\%\\) as repetitive (as suggested by the winnowmap2 usage guide). MSRs E, F and P behave very similarly in both of these contexts compared to HPC/raw: by selecting mapped reads with mapq\\(\\geq\\) 50 for the three MSRs we obtain a similar fraction of mapped reads with much lower error rates (Table 3.1). A noticeable exception is the winnowmap2 experiment, where a larger fraction of raw reads are mapped than any other MSR and even HPC. A more detailed results table can be found in Table A.1, and a graph of MSR performance on the whole Drosophila genome in Figure A.6. As Figure A.6 shows, we also evaluated these MSRs on a whole Escherichia coli (Genbank ID U00096.2) genome, where we observed similar results, albeit the best MSRs do not seem to be one of our three candidates. This might mean that specific MSRs are more suited to particular types of genomes. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-bc039f1a{table-layout:auto;width:100%;}.cl-bbfc8216{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-bbfc822a{font-family:'Helvetica';font-size:6.6pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;position: relative;top:3.3pt;}.cl-bbfc822b{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-bbfc97c4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-bbfc97d8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-bbfce5da{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce5e4{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce5ee{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce5f8{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce602{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce603{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce60c{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce616{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bbfce617{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}labelmapqWhole human genome (minimap2)Whole human genome (winnowmap2)Whole Drosophila genome (minimap2)fractionerrorfractionerrorfractionerrorHPC600.935 +0%1.85e-03 +0%0.894 +0%1.43e-03 +0%0.957 +0%2.27e-03 +0%raw600.921 -1%1.86e-03 +0%0.932 +4%1.75e-03 +23%0.958 +0%2.27e-03 -0%MSRF500.938 +0%1.29e-03 -30%0.886 -1%3.82e-04 -73%0.960 +0%1.37e-03 -39%MSRE500.936 +0%1.17e-04 -94%0.820 -8%8.93e-05 -94%0.954 -0%0 -100%MSRP500.938 0%4.15e-04 -78%0.845 -6%1.14e-04 -92%0.957 +0%8.11e-04 -64% Table 3.1: Performance of MSRs, HPC, and raw mappings across different mappers and reference sequences. For each reference sequence and mapper pair, we report the fraction of reads mapped (“fraction” columns), the paftools mapeval mapping error rate (“error” columns). The percentage differences are computed w.r.t to the respective HPC value. For HPC and the raw these metrics were obtained for alignments of mapping quality of 60. For MSRs E, F and P these metrics were obtained for alignments of mapping quality \\(\\geq 50\\). 3.4.3 Mapping-friendly sequence reductions increase mapping quality on repeated regions of the human genome To evaluate the performance of our MSRs specifically on repeats, we extracted the reads for which the generating region overlapped with the repeated region of the whole human genome by more than \\(50\\%\\) of the read length. We then evaluated the MSRs on these reads only. Repeated regions were obtained from https://t2t.gi.ucsc.edu/chm13/hub/t2t-chm13-v1.1/rmsk/rmsk.bigBed. We obtained similar results as on the whole human genome, with MSRs E, F and P performing better than HPC at mapq 50 (Figure 3.5B). At a mapq threshold of 50, the mapping error rate is \\(53\\%\\), \\(31\\%\\), and \\(39\\%\\) lower than HPC at mapq 60 for MSRs E, F and P respectively, while the fraction of mapped reads remains slightly higher. At mapq=60, raw has an mapping error rate \\(40\\%\\) lower than HPC but the mapped fraction is also \\(17\\%\\) lower. 3.4.4 Raw mapping improves upon HPC on centromeric regions On the “TandemTools” centromeric reference, HPC consistently maps a smaller fraction of reads than raw, across all mapping quality thresholds (Figure 3.5C). Additionally, the mapping error rate for raw is often inferior to that of HPC. The same is true for our selected MSRs: most of them have comparable performance to HPC, but none of them outperform raw mapping (Figure 3.5C). We conjecture this is due to the highly repetitive nature of centromeres. HPC likely removes small unique repetitions in the reads and the reference that might allow mappers to better match reads to a particular occurrence a centromeric pattern. Mapping raw reads on the other hand preserves all bases in the read and better differentiates repeats. Therefore it seems inadvisable to use HPC when mapping reads to highly repetitive regions of a genome, such as a centromere. 3.4.5 Positions of incorrectly mapped reads across the entire human genome To study how MSRs E, F, and P improve over HPC and raw mapping in terms of mapping error rate on the human genome, we selected all the primary alignments that paftools mapeval reported as incorrectly mapped. For HPC and raw, only alignments of mapping quality equal to 60 were considered. To report a comparable fraction of aligned reads, we selected alignments of mapping quality \\(\\geq50\\) for MSRs. We then reported the origin of those incorrectly mapped reads on whole human genome reference, shown per-chromosome in Figure 3.6. Figure 3.6: Histogram of the original simulated positions for the incorrectly mapped reads using minimap2 at high mapping qualities across the whole human genome, for several transformation methods. For a given chromosome, each row represents the number of simulated reads starting at that particular region. The dark gray rectangle represents the position of the centromere for that chromosome, obtained from annotations provided by the T2T consortium (http://t2t.gi.ucsc.edu/chm13/hub/t2t-chm13-v1.1/). Similarly for chromosomes 13, 14, 15, 21 and 22, a lighter gray rectangle represents the position of the “stalk” satellites also containing repetitive regions. For HPC and raw reads only alignments of mapping quality 60 were considered. To provide a fair comparison, alignments with mapping qualities \\(\\geq 50\\) were considered for MSRs E, F and P. We observe that erroneously mapped reads are not only those from centromeres, and instead originate from many other genomic regions. MSRs E and P have a markedly lower number of these incorrect mappings than either HPC or raw, with 1118 incorrect mappings for raw mappings and 1130 for HPC as opposed to 549, 970 and 361 for MSRs E, F and P respectively. This stays true even for difficult regions of the genome such as chromosome X, where raw and HPC have 70 incorrect mappings as opposed MSRs E and P that have 39, and 27 errors respectively. We also investigated where all simulated reads were mapped on the whole human genome assembly, for raw, HPC and MSRs E,F and P in Figures A.1 through A.5. The correctly mapped reads are, as expected, evenly distributed along each chromosome. The incorrectly mapped reads are however unevenly distributed. For most chromosomes there is a sharp peak in the distribution of incorrectly mapped reads, located at the position of the centromere. For the acrocentric chromosomes, there is a second peak corresponding to the “stalk” satellite region, with an enrichment of incorrectly mapped reads. This is expected since both centromeres and “stalks” are repetitive regions which are a challenge for mapping. For chromosomes 1, 9 and 16 however the majority of incorrectly mapped reads originate in repeated regions just after the centromere. 3.5 Discussion We have introduced the concept of mapping-friendly sequence reduction and shown that it improves the accuracy of the popular mapping tool minimap2 on simulated Oxford Nanopore long reads. We focused on reads with high mapping quality (50-60), as it is a common practice to disregard reads with low mapping quality 259,315,316. However across all mapped reads (mapq\\(\\geq 0\\)), HPC and our MSRs have lower mapping accuracies than raw reads, consistent with the recommendation made in minimap2 to not apply HPC to ONT data. Despite this, we newly show the benefit of using HPC (and our MSRs) with minimap2 on ONT data when focusing on high mapping quality reads. Furthermore MSRs provide a higher fraction of high-mapq reads compared to both raw and HPC, as shown on the human and Drosophila genomes. A natural future direction is to also test whether our MSRs perform well on mapping Pacific Biosciences long reads. Furthermore, it is important to highlight that our sampling of MSRs is incomplete. This is of course due to only looking at functions having \\(l=2\\), but also to the operational definition of RC-core-insensitive functions, and finally to taking representatives of equivalence classes. An interesting future direction would consist in exploring other families of MSRs, especially those that would include HPC and/or close variations of it. Additionally, our analyses suggests to not perform HPC on centromeres and other repeated regions, hinting at applying sequence transformations to only some parts of the genomes. We leave this direction for future work. 3.6 Limitations of this study Our proposed MSRs improve upon HPC at mapq 60, both in terms of fraction of reads mapped and mapping error rate on whole human, Drosophila melanogaster, and Escherichia coli genomes. We chose these sequences because they were from organisms that we deemed different enough, however it would be interesting to verify if our proposed MSRs are still advantageous on even more organisms, e.g. more bacterial or viral genomes. This would allow us to assess the generalizability of our proposed MSRs. We made the choice of using simulated data to be able to compute a mapping error rate. Some metrics, such as fraction of reads mapped might still be informative with regards to the mapping performance benefits of MSRs, even on real data. Evaluating the MSRs on real data might be more challenging but would offer insight into real-world usage of such pre-processing transformations. The hypothesis we made in subsection 3.2.2.2 was derived from non mapping-related tests, it helped us reduce the search space and find MSRs. Testing if this hypothesis holds true on mapping tasks would help us make sure we are not missing some potentially well-performing SSRs by discarding them at this stage. Finally, the restrictions we imposed to define RC-core-insensitive MSRs though intuitively understandable are somewhat arbitrary, so exploring a larger search space might be beneficial. Alternatively for higher order MSRs, even with our restrictions, the search spaces remain much too large to be explored exhaustively. To mitigate this problem, either further restrictions need to be found, or an alternative, optimization-based exploration method should be implemented. Acknowledgements The authors thank Kristoffer Sahlin for feedback on the manuscript. R.C was supported by ANR Transipedia, SeqDigger, Inception and PRAIRIE grants (ANR-18-CE45-0020, ANR-19-CE45-0008, PIA/ANR16-CONV-0005, ANR-19-P3IA-0001). This method is part of projects that have received funding from the European Union’s Horizon 2020 research and innovation programme under the Marie Skłodowska-Curie grant agreements No 956229 and 872539. L.B was also supported by the ANR PRAIRIE grant (ANR-19-P3IA-0001). This material is based upon work supported by the National Science Foundation under Grant No. 1453527 and 1931531. Author contributions Conceptualization, P.M. and R.C.; Methodology, L.B., P.M. and R.C.; Software, L.B.; Validation, L.B. and R.C.; Formal Analysis, L.B.; Investigation, L.B.; Resources, R.C.; Writing – Original Draft, L.B., P.M. and R.C.; Writing – Review &amp; Editing, L.B., P.M. and R.C.; Visualization, L.B.; Supervision, R.C.; Project Administration, R.C.; Funding Acquisition, R.C.; Declaration of interests The authors declare no competing interests. STAR Methods Lead contact Further information and requests for resources should be directed to and will be fulfilled by the lead contact, Rayan Chikhi (rayan.chikhi@pasteur.fr) Materials availability This study did not generate new unique reagents. Data and code availability This paper analyzes existing, publicly available data. These accession numbers for the datasets are listed in the key resources table All original code has been deposited at a github backed zenodo repository and is publicly available as of the date of publication. DOIs are listed in the key resources table, and the backing github repository is available at github.com/lucblassel/MSR_discovery. Any additional information required to reanalyze the data reported in this paper is available from the lead contact upon request. Method details All experiments performed for this article are implemented and documented as nextflow workflows available in this project’s repository (github.com/lucblassel/MSR_discovery). These workflows may be used to rerun experiments and reproduce results. The repository also contains a Rmarkdown notebook to generate all figures and tables in the main text and supplemental information from the pipeline outputs. Supplementary information Supporting Information can be found in Appendix A References 4. Nurk, S. et al. The complete sequence of a human genome. Science 376, 44–53 (2022). 100. Dohm, J. C., Peters, P., Stralis-Pavese, N. &amp; Himmelbauer, H. Benchmarking of long-read correction methods. NAR Genomics and Bioinformatics 2, (2020). 111. Nurk, S. et al. HiCanu: Accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads. Genome Res. 30, 1291–1305 (2020). 112. Ekim, B., Berger, B. &amp; Chikhi, R. Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer. Cell Systems 12, 958–968.e6 (2021). 114. Miller, J. R. et al. Aggressive assembly of pyrosequencing reads with mates. Bioinformatics 24, 2818–2824 (2008). 115. Sahlin, K. &amp; Medvedev, P. De Novo Clustering of Long-Read Transcriptome Data Using a Greedy, Quality Value-Based Algorithm. Journal of Computational Biology 27, 472–484 (2020). 116. Au, K. F., Underwood, J. G., Lee, L. &amp; Wong, W. H. Improving PacBio Long Read Accuracy by Short Read Alignment. PLOS ONE 7, e46679 (2012). 118. Li, H. Minimap2: Pairwise alignment for nucleotide sequences. Bioinformatics 34, 3094–3100 (2018). 119. Jain, C. et al. Weighted minimizer sampling improves long read mapping. Bioinformatics 36, i111–i118 (2020). 128. Gusfield, D. Algorithms on strings, trees, and sequences: Computer science and computational biology. (Cambridge University Press, 1997). doi:10.1017/CBO9780511574931. 259. Prodanov, T. &amp; Bansal, V. Sensitive alignment using paralogous sequence variants improves long-read mapping and variant calling in segmental duplications. Nucleic Acids Research 48, e114 (2020). 261. Mikheenko, A., Bzikadze, A. V., Gurevich, A., Miga, K. H. &amp; Pevzner, P. A. TandemTools: Mapping long reads and assessing/improving assembly quality in extra-long tandem repeats. Bioinformatics 36, i75–i83 (2020). 308. Bragg, L., Stone, G., Imelfort, M., Hugenholtz, P. &amp; Tyson, G. W. Fast, accurate error-correction of amplicon pyrosequences using Acacia. Nat Methods 9, 425–426 (2012). 309. Sahlin, K. &amp; Medvedev, P. Error correction enables use of Oxford Nanopore technology for reference-free transcriptome analysis. Nat Commun 12, 2 (2021). 310. Liu, H. et al. SMARTdenovo: A de novo assembler using long noisy reads. Gigabyte 2021, 1–9 (2021). 311. Graham, R. L., Knuth, D. E. &amp; Patashnik, O. Concrete mathematics: A foundation for computer science. (Addison-Wesley, 1994). 312. Adams, M. D. et al. The genome sequence of Drosophila melanogaster. Science 287, 2185–2195 (2000). 313. Yang, C., Chu, J., Warren, R. L. &amp; Birol, I. NanoSim: Nanopore sequence read simulator based on statistical characterization. GigaScience 6, (2017). 314. Rhie, A., Walenz, B. P., Koren, S. &amp; Phillippy, A. M. Merqury: Reference-free quality, completeness, and phasing assessment for genome assemblies. Genome Biology 21, 245 (2020). 315. Li, H. New strategies to improve Minimap2 alignment accuracy. https://arxiv.org/abs/2108.03515 (2021). 316. Li, H. et al. A synthetic-diploid benchmark for accurate variant-calling evaluation. Nat Methods 15, 595–597 (2018). "],["learning-from-sequences-and-alignments.html", "Chapter 4 Learning from sequences and alignments 4.1 Why learn from alignments ? 4.2 What to learn ? 4.3 How to learn ? 4.4 Preprocessing the alignment for machine learning 4.5 Conclusion", " Chapter 4 Learning from sequences and alignments 4.1 Why learn from alignments ? Sequences and sequence alignments are a very rich source of information. As was sated in Chapters 2 and 3, many downstream analyses rely on sequence alignments. In whole genome assembly, where sequencing reads are combined together to deduce the sequence genome, pairwise sequence alignment is used in reference-based assembly317,318 as well as de novo319,320 assembly. It has also been used to deduce protein function321. It has been used for sequence clustering115 as well as detecting genetic322 and structural variants323,324. Multiple sequence alignments are also very widely used, mainly in phylogenetic analyses where the evolutionary history of a set of sequences are studied and represented as trees325,326, but they have also been used extensively in protein structure prediction327. More recently, as computational power and datasets have grown, more and more machine learning methods are being used on sequence alignments in order to gain biological insight. In this chapter, we will explore how this can be done as an introduction to Chapter 6 where we present an application: predicting HIV drug resistance mutations. 4.2 What to learn ? One of the first questions one might ask themselves when wishing to use machine learning with sequence data is “what can I learn?”. A simplistic answer to this question would be “a lot of things” as the following section will strive to show. To choose what we learn we must first choose a learning paradigm. 4.2.1 Supervised learning Supervised learning is one of the main machine learning paradigms, here we have data that consist of a collection of input and output pairs (e.g. a DNA sequence and an associated species). By feeding these pairs to our algorithm of choice it will learn to predict the output based on the input alone. This is a very powerful way of learning something interesting. We can consider the link between inputs and outputs as extra knowledge that the dataset creator or curator can infuse in the learning algorithm. Within the supervised learning paradigm there are two possible tasks: regression and classification. 4.2.1.1 Regression tasks For regression tasks, the outputs of our input-output pairs are encoded by a continuous numerical value. Regression models will therefore output continuous real values. Fortunately, many interesting continuous values can be computed from aligned sequences, and in many cases machine learning models can be trained to predict these variables. Regression methods have been used to predict drug response in cancer patients328 and resistance levels to drugs in HIV329. These methods are also extensively used in protein structure prediction, where methods are trained to predict residue angles or values in protein contact maps from aligned sequences.330–334 Or directly from an MSA136.Regression algorithms have been used to predict protein fitness in silico335–337 to speed up protein engineering, and make some processes like drug development faster and cheaper. They have also been used in many other tasks such as predicting gene expression levels338 or predicting multiple sequence alignment scores339. In many cases these methods use an encoded representation of the sequences (c.f. Section 4.4) as input, but some represent the inputs as values computed from alignments. For example, protein structure can be predicted from contact maps340 derived from MSAs, and gene expression levels can be predicted from lists of mutations that are obtained through alignment to a reference sequence338, this last approach is also used in Chapter 6 to predict drug resistance in HIV. 4.2.1.2 Classification tasks For classification tasks, the outputs of our input-output pairs are categorical in nature and often represented as discrete integer values. Originally, most classification methods were designed for binary classification with only two possible outputs: a “positive” and a “negative” class. This is a simpler problem to solve than multiclass classification problem where more than two outputs are possible, however most methods that can handle binary classification have been adapted to multiclass classification. In biology, categorizing and classifying is often at the root of several research problems, as such machine learning classifiers have obvious applications and have been widely used, with sequence data as inputs. Classifiers have been used to predict if a particular virus341,342 (also Chapter 6), or bacteria343,344 is resistant to antiviral or antimicrobial drugs respectively. Some classifier models have also been used to predict characteristics at positions in a sequence, like methylation site prediction345, splicing site detection346 or secondary structure at a particular amino acid residue347. Finally, classifiers have also been used to predict predict more general characteristics of given sequence, like the cellular localization348 or putative function349 of a protein, or the cellular localization of gene expression data350. I have presented here only a fraction of what is possible to learn from sequences in the supervised learning paradigm, and I hope you will agree with me that there is no shortage of problems in computational biology that are suited to this sort of approach. By using machine learning here, instead of more formal statistical approaches, there is a lower amount of upfront assumptions and the algorithm is tasked with figuring out what features of the data are important or not for the task at hand. 4.2.2 Unsupervised learning The second main machine learning paradigm is called, by contrast to supervised learning, unsupervised learning. In this paradigm we do not have input-output pairs but only inputs. The goal of unsupervised machine learning methods is to extract some structure or patterns from the given input without additional guidance. One of the main tasks in the unsupervised learning paradigm is clustering, wherein similar inputs are grouped together, methods like k-means of hierarchical clustering351 often use some type of distance metric between inputs to define these clusters of similar inputs. Clustering can be used for classification tasks, indeed if some characteristics of sequences in a given cluster are known then we can make the assumptions that sequences in the same cluster will be similar and share these characteristics, this has been used to group proteins in families352 for example. Clustering methods can also be used to remove duplicate or near-duplicate sequences in datasets353. Phylogenetic trees can be considered as a specific type of clustering methods, and they have been used to cluster biological sequences354. One of the main obstacles to clustering biological sequences is the need for computing distances between sequences. As stated in Chapter 2, obtaining a biologically relevant distance metric between two sequences, such as the edit-distance, is no easy task. Additionally, in many cases all pairwise distances are needed for clustering, meaning at least a quadratic time and space complexity for a naive clustering algorithm. Two approaches can be used to resolve this problem: devise methods that do not need all pairwise distances355, or find a way to speed up distance computation. Some methods have been developed to devise distance metrics that are biologically relevant and less expensive to compute that the edit-distance: like the hashing based MASH356 or dashing357, or the neural network based NeuroSEED358. Unsupervised learning can also be used without clustering, for example unsupervised methods based on maximum likelihood approaches have been used to predict mutational effects in protein sequence359 as well as predict recombination hotspots in human genomic sequences360. In many cases, unsupervised learning can be done as a preliminary dimensionality reduction step to a supervised learning task. Indeed biological data is often high-dimensional, and it is often useful to lower the amount of dimensions to speed up computations. Some unsupervised methods can reduce the number of dimensions while retaining most of the information. One such method, Principal Component Analysis (PCA), has been widely used. PCA was applied to distance matrices to compute phylogenetic trees361, and work has been done to apply PCA directly to MSAs without needing to go through a distance matrix362. PCA is also widely used in clustering applications363–366. 4.2.3 Others paradigms More recently, other learning paradigms have gained popularity in machine learning circles. Within the semi-supervised paradigm, a small amount of labelled data (i.e. input-output pairs) is included in a large un-labelled dataset, and methods can leverage both. This approach has been used to predict drug to protein interactions367 and predict the secondary structure of specific transmembrane proteins368. In the self-supervised paradigm, models are first trained on a proxy task that hopefully makes use of important information in the data. Through this pre-training step, self-supervised models extract important information from the data and create internal featutres and models that can then be leveraged in a a supervized or uinsupervized fine-tuning task. This paradigm has exploded lately within the field of natural language processing and machine translation with the rise of transformers, but has also been widely used to create protein language models like ProtBert369 and extract information from disordered protein regions370. We will look at self-supervised leraning with a little more detail in Chapter 7. Finally, the end-to-end learning paradigm designates the process of chaining several machine learnign tasks together and optimizing the algorithms simultaneously using the error from the loss of the last task of the group. This has been successfully used to predict protein-protein interaction surfaces in three dimensions371 as well as predict micro-RNA targets sequences372. This paradigm can also be used in a task-based fashion, where a differentiable loss function is crafted on a traditionally non-machine learning task and used to train preceeding models, this has been explored for sequence alignment and is further detailed in Chapter 7 4.3 How to learn ? Machine learning regroups a multitude of techniques and methods to extract knowledge and make data-driven predictions. In this section we will quickly go over some of the main supervised-learning methods, and go into more detail for techniques used in Chapter 6: Logistic regression, naive Bayes and Random Forests. 4.3.1 General setting Supervised machine learning is an optimization process. A given algorithm, which I will refer to as a model, has an associated loss function that can be evaluated on a dataset. This loss represents how well the model is predicting outputs from inputs on known input-output pairs. Through an iterative process, this loss is optimized (in our case minimized) over all pairs forming a dataset. Often in the literature, loss and cost are used interchangeably373, however I will favor loss in the following sections. There is no shortage of loss functions374, some of them are specifically crafted for a given model while some are widely used in regression tasks like the Root Mean Square Error (RMSE). Others like the cross-entropy loss are used in classification tasks. Often after training a machine learning model on a dataset it is important to compute a performance measure to get an idea of how well this model is performing. We could do this on the same data on which the model was trained, this would however be wrong. Indeed it gives an unfair advantage to the model since it predicts outputs for examples it has already seen, furthermore it gives us no insight into the generalizability of the model since it could just learn the dataset by heart, getting a perfect score on it while being completely useless on new unseen data, this situation is known as overfitting351, shown in Figure 4.1. Since being able to predict outcomes on unseen data is the main goal of a machine learning model we need another way of measuring model performance. The way machine learning practitioners can measure the performance of their model in a more unbiased manner is by separating the dataset into two parts before even starting to train the model: one part (usually the majority of the data) is used as the training set, and the other as the testing set. Logically, the training set is used to train the model while the testing set is used to evaluate the performance of the model after training. Figure 4.1: Overfitting behaviour in loss functions. The two curves show how the loss calculated on the training set (blue) and the testing set (red) evolve as training time increases. At first both decrease showing that the model learns informative and generalizable features. At some point, training loss keeps decreasing and testing loss increases, meaning that the model is learning over-specific features on the training set and is no longer generalizable: it is overfitting. As there is a multitude of loss functions, there are many performance metrics to asses how the model is doing on the testing data, especially for classification tasks375. For regression, RMSE is also widely used as a performance metric, along with the Mean Absolute Error (MAE). For classification, accuracy is most widely used performance metric. Accuracy is the ratio of the number of correctly classified examples divided by the total number of examples. Accuracy has also been adapted to specific settings like unbalanced data where the different possible output classes are not represented equally376. The testing set must however stay completely separate from the training set and decisions about model settings or input features used must be made without help of the testing data. If these stringent conditions are not respected this can lead to data leakage and artificially increase performance of the model on the testing data, giving us a biased view of the model performance and generalizability377. This leaking of testing data into the training process is a common pitfall of machine learning378. In many cases, machine learning models have a number of parameters that guide model behavior. These parameters are chosen before training and are different from the internal parameters of the model that are optimized during training, as such they are often called hyper-parameters, these can be the number of levels in a decision tree, some learning rate or a stopping threshold for example. The value of these hyper-parameters is often very influential on model performance, however setting hyper-parameter values based on the model’s test set performance would lead to data leakage as stated earlier. To still be able to tune hyper-parameters for optimal performance \\(k\\)-fold cross-validation is used351. In This setting, shown in Figure 4.2, the testing set is set aside before model training and reserved for the final model performance evaluation. The training set is then further subdivided into \\(k\\) equally-sized subsets, called folds. Each of the \\(k\\) folds is then used to create a validation split, the fold acting as a within-split testing set and the rest of the general training set is used as the within-split training set. This results in \\(k\\) pairs of disjoint training and testing sets, and each example of the general training data is used exactly once in a within-split testing set. An idea of the model performance can be obtained by measuring performance on the within-split testing sets and averaging the measures. This cross-validation performance can be used to inform hyper-parameter value choice without using the reserved testing set and avoiding data leakage. Figure 4.2: Example of data splits into training, testing and validation sets with 6-fold cross-validation. In this setting the whole data set is first split into a training and testing set. The testing set is kept separate to assess final model performance. The training set is split into 6 folds resulting in 6 splits. In each split of the training set, the correspoding fold is used as the within-split test set (green), and the rest of the training set is used as the within-split training set (blue). You can get an idea of the model performance by averaging measures on within-fold testing sets and adjusting hyper-parameters accordingly, without using the global, reserved testing set. Adapted from the scikit-learn website This is the general setting in which a lot of the supervised learning approaches in computational biology reside, cross-validation was used to tune hyper-parameters for the models in Chapter 6. 4.3.2 Tests and statistical learning Some of the simplest models possible are derived from statistics and based on probabilities. One of the simplest ways to classify data is with a statistical test, like Fisher’s exact test379 or a \\(\\chi^2\\) test380 depending on the number of training examples. If one of the input variables is significantly related to the output then one can make a crude prediction on the output based solely on the value of one input variable. By testing several features and predicting the output from a set of significantly related input variables (e.g. through a vote), then the prediction can be a little more accurate. This approach is used as a baseline in the study presented in Chapter 6, it is however not very sophisticated and does not have the best predictive power. A model that fits more squarely in the process of supervised learning described above is linear regression. This regression model assumes that the output value results from a linear combination of the input features and an intercept value. The coefficients of this linear combination and the intercept are the parameters that the models optimizes during the learning process. Often the loss function used to fit this model is the RMSE mentioned above. The gradient of the RMSE w.r.t. all the coefficients of the model is easily derived and can be used for optimization. Since this model is very simple there is an exact analytical solution to find the minium gradient value351, however in some cases a gradient descent approach can be beneficial to train this model. This model has also been adapted to binary classification, by considering that the output value results from a linear combination of input models, passed through a logistic function. The resulting model is called logistic regression, and is one of the classifiers used in Chapter 6. Equations (4.1) and (4.2) show the mathematical model of linear and logistic regression respectively. In these equations, \\(\\hat{y}^{(i)}\\) represents the predicted output of the ith example and \\(x_j^{(i)}\\) the jth variable of the ith example input. \\(\\theta_0\\) is the intercept and \\(\\theta_j\\) the coefficient corresponding to the jth input variable. \\[\\begin{equation} \\hat{y}^{(i)} = \\theta_0 + \\sum_{j=1}^k \\theta_j \\cdot x_j^{(i)} \\tag{4.1} \\end{equation}\\] \\[\\begin{equation} \\hat{y}^{(i)} = \\frac{1}{ 1 + e^{ -(\\theta_0 + \\sum_{j=1}^k \\theta_j \\cdot x_j^{(i)}) } } \\tag{4.2} \\end{equation}\\] The model in Equation (4.1) outputs a continuous value used in regression, and the model in Equation (4.2) outputs a continuous value bounded between 0 and 1, that we can consider a probability of being in one of the classes. With this probability it is easy to classify a given example in one of the two classes. It is easy to extend the logistic regression model to multiclass classification, by training several models and predicting the class with the maximal probability. These linear models are simple, however can achieve good performance. They can however be prone to overfitting, this often translates by very large values for the \\(\\theta\\) coefficients. In order to counter this regularized versions of linear and logistic regression were introduced by adding the weights to the loss function in some way. By adding the coefficient values to the loss they are kept small through the optimization process, reducing the risk of overfitting. The two main regularization strategies are the ridge381 and Lasso382 penalties. The final supervised model I will present in this section is the Naive Bayes classifier. As its name indicates, it is based on Bayes’ theorem of conditional probabilities. By making a strong assumption, that all variables of the input examples are mutually independent we can derive the probability of the ith input example belonging to class \\(C_{\\alpha}\\) as: \\[\\begin{equation} p(C_{\\alpha} | x^{(i)}_1, \\ldots, x^{(i)}_k) = Z \\cdot p(C_{\\alpha}) \\prod_{j=1}^k p(x^{(i)}_j | C_{\\alpha}) \\end{equation}\\] With \\(Z\\) a constant that can be computed from the training data. Therefore it is very easy to use this to build a classifier by computing the probabilities of an example belonging to a class for all possible classes in the training data and assign the one with the maximal probability. In practice this is a very flexible model, since any probability distribution can be used for each feature and class, and the parameters of these distributions learned, with a maximum likelihood approach for example. This model builds upon the naive assumption (hence the name): that all input variables are mutually independent. This assumption is very often violated, especially in biological sequence data where independence is not at all guaranteed by the evolutionary process. This model is however quite robust to this, and stays quite performant despite the violations of this assumption383,384. 4.3.3 More complex methods While these simple methods are quite useful in many settings, more complex methods were developed. One of the most popular methods up until recently were Support Vector Machines (SVM). This classifier was first developed in 1982385 and it functions by finding the optimal separation hyperplane between 2 classes, i.e. a linear boundary in high-dimensional space between training examples of two classes. What made it so popular is when it was associated with the so-called kernel trick386,387. With the kernel trick, training examples that cannot be linearly separated can be cheaply projected into a higher dimensional space where linear separation is possible. This made SVMs very powerful and popular, and it was quickly adapted for regression tasks as well388. The main model that will interest us in this section however is not the SVM. Random Forests are another very popular model used for both classification and regression, as it is used in Chapter 6 we will go over it in more detail. Developed in the early 2000’s389, it builds upon previous work: Classification And Regression Trees (CART)390. CART Decision trees are very useful for both supervised learning tasks. To use CART trees, start at the root and at each node there is a condition on a single input feature. This condition decides if the considered example goes to the right child or the left child. By traversing this tree, choosing the path through the conditions at all the nodes met by the example, we can assign the example to one of the leaves, corresponding to a class or a predicted value. An example of such a tree is given in Figure 4.3. Figure 4.3: Example of a decision tree on DNA data. Here we have a dataset of 4 DNA sequences \\(S_1, \\ldots, S_4\\). Each sequence has 4 input variables \\(x_1,\\ldots,x_4\\), and an output variable \\(y\\) indicating the strain of a sequence. Each sequence can be classified by the decision tree on the right by following a path from root to leaf, according to the conditions in internal nodes. The predicted strain is shown in the leaves. Sequences that end up in a given leaf node are indicated underneath that leaf node. This tree can classify these 4 sequences perfectly. It is actually quite simple to build these CART trees, the whole methods lies upon the principle of minimizing impurity (or maximizing purity) on a given input variable in child nodes. Impurity can be defined in many ways351: for regression it is often the Residual Sum of Squares (RSS), for classification it is often the Gini index or an entropy measure. Regardless of the chosen metric, a high impurity denotes a heterogeneous collection of examples and a low impurity indicates a homogeneous set of examples. When building the tree, recursively from the root, we find the condition and the input variable on which the condition relies by looking at all possible splits and choosing the one that decreases impurity the most in the child nodes. This process is continued recursively until the leaves are completely pure (likely resulting in overfitting) or until a certain stopping condition is met (e.g. purity threshold, maximum depth, …). To avoid overfitting, trees can also be pruned after the building phase. CART trees have the distinct advantage of being interpretable: it is easy to figure out why an input has been assigned to a certain class, which can be very useful in biology or medicine391. Despite these good properties, it is easy to overfit with decision trees, and small changes to the training data can induce large changes in the resulting tree351,391, hurting interpretability. This is why the Random Forest (RF) model was created. RFs are essentially an ensemble of decision tress built, a forest, from the training data. To build one of the decision trees in a random forest, the training data is first bootstrapped: a new training set is sampled with replacement from the original training data with the same number of examples. This process is called bagging for “bootstrap aggregating”. With this procedure, each decision tree is built from slightly different training data and will therefore likely be slightly different. An additional step to ensure some variability between the trees is in the choice of the splitting condition at each tree node. Where in CART trees all input variables are considered to find the optimal split, in RF trees, only a random subset of the input variables are considered at each node. This results in a set of decision trees that are all trained from slightly different data, with slightly different features at each node but that all have the same task on the training data. We can get a prediction from all these trees, by taking the majority predicted class for classification trees, or the average of predictions for regression trees. All these measures to reduce the variance linked to decision trees, and to yield more generalizable models, make random forests very popular. They are often very competitive and often have better performance than the models presented above392,393. Furthermore, by only considering a subset of features at each tree node, RF often deals better with high-dimensional data than other methods393. Further refinements to the algorithm such as boosting, where misclassified examples are more likely to be selected in the bagging training sets have been very useful as well. Deep learning has been use more frequently and more broadly to get good results across a large number of tasks. This is also true in biological contexts, however Chapter 6 does not make use of deep learning methods so they will no be discussed here. A short introduction to deep learning will however be presented in Chapter 7. 4.4 Preprocessing the alignment for machine learning By now you will surely have noticed that all the models I presented above (with the exception of RFs) need to be trained on a collection of numerical variables, i.e. numerical vectors. Biological sequences, however, are not vectors of numbers. We therefore need to transform our sequences of letters into numerical sequences that we can feed to the machine learning model in this digestible form. Most supervised machine learning algorithms expect as training inputs a matrix, where the rows are individual training examples and the columns numerical variables, an a vector where each entry corresponds to the expected output value. In this section I will present a few encoding methods, that transform a multiple sequence alignment in a matrix. Most of the encoding methods are not defined on an alignment, but on sequences alone. However to represent these sequences they must have the same length, and for models to learn anything meaningful the values in features should encode the same information across sequences. Therefore prior to the encoding methods described below the sequences must be aligned to each other so that a specific position in a sequence is homologous to that position in all other training sequences. 4.4.1 General purpose encodings The letters making up biological sequences are a form of categorical data, this type of variable is not specific to biology and as such there exists many encoding schemes394 to transform categorical variables into numerical vectors. The most basic and conceptually simple ways to do so is to use the labeling scheme, often called ordinal encoding, where each level of the categorical variable is assigned an integer label. For example, when dealing with DNA sequences, we could have A=1, C=2, G=3 and T=4. This scheme outputs vectors that have the same size as the input sequence and going from the sequence to the encoded vector (and vice versa) is very easy. This encoding scheme has been used to predict resistance levels of HIV to antiviral drugs from sequencing data329. There is however a major disadvantage with using this method, as its name indicates, using ordinal encoding implies that there is an order to the categorical variable levels (e.g. T&gt;A) which, by definition, does not exist395–397. Another option is to use what I will refer to as binary labeling, where the categorical levels are first assigned an integer label which is then converted to a binary vector. If we use the ordinal DNA encoding from above and convert it to binary vectors we would get: A=\\([0,0]\\), C=\\([0,1]\\), G=\\([1,0]\\) and T=\\([1,1]\\). This type of representation is frequently used to represent gapless sequences, like \\(k\\)-mers, in a compressed form398,399 (a letdoodter now only needs 2 bits instead of a full byte). For amino acids, since there are more characters, this encoding yields vectors of 5 bits400. Fundamentally, this encoding scheme has the same problem as the ordinal encoding, creating an order that does not exist, although with th eorder being split into separate values it can mitigate the effects a little bit. On of the most widely used categorical encoding schemes, One-Hot encoding (OHE) (sometimes called orthonormal encoding401), does not have this ordering issue. The way OHE works is by creating a sparse binary vector of length \\(d\\) to represent a variable with \\(d\\) levels (for DNA \\(d=4\\)). If the ith level of the categorical variable is to be encoded, then the ith position in the vector is set to 1 and the rest set to 0. For example if we consider that A is the first level of our variable then OHE would yield the following vector: \\([1,0,0,0]\\). This encoding scheme has been used from the 1980’s402 to now403, and is the scheme used in Chapter 6. The performance of OHE can be on par with ordinal encoding404, however it is easily interpretable, which is often very important in biology, since there is a one to one correspondence between a categorical value and a numerical feature. The main problem with OHE however is that it tends to increase the number of features quite a lot, since the encoded vector representation of a length \\(n\\) sequence is of length \\(n\\times d\\). An example comparing Ordinal, Binary and One-Hot encodings can be seen in Figure 4.4. Figure 4.4: Example of 3 general categorical encoding schemes. Two sequences, ATCG and TAAT are shown encoded in three different encoding schemes: ordinal, binary and one-hot encoding. In the ordinal encoding each character is assigned an integer value, here A=0, C=1, G=3 and T=4. In the binary encoding these integer values are encoded with 2 bits. In the one-hot encoding scheme, a character corresponds to a sparse vector indicating which level of the variable is present: here A=[1,0,0,0]. Ordinal encoding preserves the dimension of the sequence while binary and one-hot encoding result in vectors woth a bigger dimension than the original sequence. These three general purpose encodings are but some of many394, and since categorical variables are often used in machine learning applications, these encodings are available in widely used software libraries405. 4.4.2 Biological sequence-specific encodings While the general-purpose encoding schemes presented above work well enough in practice, some specific encoding methods were developed to include some biological information in the sequence encodings that hopefully machine learning models will be able to leverage during training. These encodings, have mostly been developed for encoding protein sequences, using physicochemical properties of amino acids400. AAIndex406 is a public database containing amino acid indices, i.e. sets of 20 numerical values (one for each AA) measuring some physicochemical property. There is a wide range of 566 of these indices, from hydrophobicity to flexibility or residue volume measures. By selecting an informative subset of 9 of these measures407, an amino acid can be represented by a length 9 numerical vector. In some cases, amino acids can be represented by all the 566 properties of AAIndex, and through PCA the dimension of the resulting numerical vectors can be reduced408. This biological sequence specific encoding has been implemented in a software library for biological sequence encoding409. Another biological sequence-specific encoding is based on the Amino Acid classification Venn diagram defined by Taylor in 1986410, which groups amino acids into eight different groups based on physicochemical properties: aliphatic, aromatic, hydrophobic, polar, charged, positive, small and tiny . With this classification, a single amino acid can be represented by a vector of length 8, each element representing a group, set to one when the amino acid belongs to the group and to zero when it does not. This encoding methods was used as early as 1987 to predict secondary structures of proteins411. Later on another five groups were proposed and used to encode each amino acid with longer vectors412. A third encoding method, named BLOMAP413, encodes sequences based on values from the BLOSUM62 substitution matrix presented in Section 2.1.3. BLOMAP is defined by using a non-linear projection algorithm to generate vectors of length five, that capture the similarity measures contained in BLOSUM62. This encoding has been used to successfully predict cleavage sites of the HIV-1 protease401,413 (c.f. Section 5.3.2.2). Other encodings such as OETMAP414 have been derived from BLOMAP. These three encodings are far from being the only ones specific to biological sequence. Many other encoding schemes were developed to learn from this type of sequence data. Some schemes do not encode positional data, and as such can be applied to unaligned sequences. The simplest of these would be to represent a sequence by its amino acid, or \\(k\\)-mer frequencies. The latter, is often referred to as \\(n\\)-gram encoding415 and widely used although with very short \\(k\\)-mers since the dimension of the encoding grows exponentially with \\(k\\), with 20 amino acids this encoding results in vectors that have a length of \\(20^k\\). Other encoding schemes use codon information to encode amino acids. One such scheme was proposed in400, where an amino acid is represented by a directed graph where vertices are nucleotides and edges represent paths needed to represent codons that code for that amino acid. This graph can then be converted to a 16-dimensional vector by flattening the corresponding adjacency matrix, and be used as an encoding method. During the work that led to Chapter 6, several encoding methods were tested: Ordinal, Binary, OHE, AAIndex and Group encodings. The same two training sets of sequences were encoded using each of these methods, and 10 RF models were trained on each of the encoded datasets. Accuracy, precision and recall metrics were used to evaluate the performance of the RF on each encoded dataset. According to these metrics, the RF model had the best performance on the datasets encoded with OHE. OHE, also has the advantage of being easily interpretable, as such it was chosen for the work presented in Chapter 6. Other encodings have been used to convert a biological sequence into a single real value. This encoding method based on chaos game theory416 allows for a bijective mapping between the DNA sequence set and the Real numbers set. This encoding is not specific to alignments and can be used to do alignment-free comparisons, as such it has been used often in bioinformatics applications417. Recently, this encoding scheme has been used to classify SARS-CoV2 sequences418, predict anti-microbial resistance from sequence data343 and for phylogenetic analysis419. In recent years algorithmic developments, computing power increase and the massive amounts of available data have made deep learning methods useful, possible to train and veru popular. This has given rise to new sequence encoding methods, that are learned on the training data. These are often referred to as embeddings rather than encodings. Since these learned embeddings are not used in Chapter 6, for the sake of thematical coherence I will not be mentioning them here. I will however go over these embedding methods, as well as the deep learning framework, shortly in Chapter 7. 4.5 Conclusion Alignments, and the sequences in them are a rich source of information, that have long been exploited widely for many different types of analyses. With the rise of machine learning in the last years, it is logical that machine learning models have been applied more and more frequently to biological sequence data. Machine Learning, is a wide field with many different methods and paradigms. Even simple methods like linear regression or Naive Bayes can be very useful, and more complex models like Random Forests have been able to make very good predictions on biological data. The model of choice, however, is not the only variable to take into account when looking to apply machine learning method on sequence data. Different encoding methods will yield different vector representations, with different characteristics and applications. Special care must therefore be given to the choice of biological sequence encoding scheme, prior to starting a machine learning analysis. References 115. Sahlin, K. &amp; Medvedev, P. De Novo Clustering of Long-Read Transcriptome Data Using a Greedy, Quality Value-Based Algorithm. Journal of Computational Biology 27, 472–484 (2020). 136. Jumper, J. et al. Highly accurate protein structure prediction with AlphaFold. Nature 596, 583–589 (2021). 317. Martin, J. A. &amp; Wang, Z. Next-generation transcriptome assembly. Nature Reviews Genetics 12, 671–682 (2011). 318. Kyriakidou, M., Tai, H. H., Anglin, N. L., Ellis, D. &amp; Strömvik, M. V. Current strategies of polyploid plant genome sequence assembly. Frontiers in Plant Science 9, (2018). 319. Paszkiewicz, K. &amp; Studholme, D. J. De novo assembly of short sequence reads. Briefings in Bioinformatics 11, 457–472 (2010). 320. Sohn, J. &amp; Nam, J.-W. The present and future of de novo whole-genome assembly. Briefings in Bioinformatics 19, 23–40 (2018). 321. Sleator, R. D. &amp; Walsh, P. An overview of in silico protein function prediction. Archives of Microbiology 192, 151–155 (2010). 322. Koboldt, D. C. Best practices for variant calling in clinical sequencing. Genome Medicine 12, 91 (2020). 323. Alkan, C., Coe, B. P. &amp; Eichler, E. E. Genome structural variation discovery and genotyping. Nature Reviews Genetics 12, 363–376 (2011). 324. Ho, S. S., Urban, A. E. &amp; Mills, R. E. Structural variation in the sequencing era. Nature Reviews Genetics 21, 171–189 (2020). 325. Morrison, D. A. Phylogenetic tree-building. International Journal for Parasitology 26, 589–617 (1996). 326. Kapli, P., Yang, Z. &amp; Telford, M. J. Phylogenetic tree building in the genomic age. Nature Reviews Genetics 21, 428–444 (2020). 327. Kuhlman, B. &amp; Bradley, P. Advances in protein structure prediction and design. Nature Reviews Molecular Cell Biology 20, 681–697 (2019). 328. Ammad-ud-din, M., Khan, S. A., Wennerberg, K. &amp; Aittokallio, T. Systematic identification of feature combinations for predicting drug response with bayesian multi-view multi-task linear regression. Bioinformatics 33, i359–i368 (2017). 329. Steiner, M. C., Gibson, K. M. &amp; Crandall, K. A. Drug Resistance Prediction Using Deep Learning Techniques on HIV-1 Sequence Data. Viruses 12, 560 (2020). 330. Noé, F., De Fabritiis, G. &amp; Clementi, C. Machine learning for protein folding and dynamics. Current Opinion in Structural Biology 60, 77–84 (2020). 334. AlQuraishi, M. Machine learning in protein structure prediction. Current Opinion in Chemical Biology 65, 1–8 (2021). 335. Wittmann, B. J., Johnston, K. E., Wu, Z. &amp; Arnold, F. H. Advances in machine learning for directed evolution. Current Opinion in Structural Biology 69, 11–18 (2021). 337. Li, G., Dong, Y. &amp; Reetz, M. T. Can Machine Learning Revolutionize Directed Evolution of Selective Enzymes? Advanced Synthesis &amp; Catalysis 361, 2377–2386 (2019). 338. Xie, R., Wen, J., Quitadamo, A., Cheng, J. &amp; Shi, X. A deep auto-encoder model for gene expression prediction. BMC Genomics 18, 845 (2017). 339. Ortuño, F. M. et al. Comparing different machine learning and mathematical regression models to evaluate multiple sequence alignments. Neurocomputing 164, 123–136 (2015). 340. Wang, S., Sun, S., Li, Z., Zhang, R. &amp; Xu, J. Accurate De Novo Prediction of Protein Contact Map by Ultra-Deep Learning Model. PLOS Computational Biology 13, e1005324 (2017). 341. Haga, H. et al. A machine learning-based treatment prediction model using whole genome variants of hepatitis C virus. PLOS ONE 15, e0242028 (2020). 342. Zazzi, M. et al. Predicting response to antiretroviral treatment by machine learning: The EuResist project. Intervirology 55, 123–127 (2012). 343. Ren, Y. et al. Prediction of antimicrobial resistance based on whole-genome sequencing and machine learning. Bioinformatics 38, 325–334 (2022). 344. Kim, J. I. et al. Machine learning for antimicrobial resistance prediction: Current practice, limitations, and clinical perspective. Clinical Microbiology Reviews 0, e00179–21 (2022). 345. Wang, Y. et al. Predicting DNA Methylation State of CpG Dinucleotide Using Genome Topological Features and Deep Networks. Scientific Reports 6, 19598 (2016). 346. Rätsch, G., Sonnenburg, S. &amp; Schäfer, C. Learning Interpretable SVMs for Biological Sequence Classification. BMC Bioinformatics 7, S9 (2006). 347. Jones, D. T. Protein secondary structure prediction based on position-specific scoring matrices. Journal of Molecular Biology 292, 195–202 (1999). 348. Wei, L., Ding, Y., Su, R., Tang, J. &amp; Zou, Q. Prediction of human protein subcellular localization using deep learning. Journal of Parallel and Distributed Computing 117, 212–217 (2018). 349. Wang, H., Yan, L., Huang, H. &amp; Ding, C. From protein sequence to protein function via multi-label linear discriminant analysis. IEEE/ACM Transactions on Computational Biology and Bioinformatics 14, 503–513 (2017). 350. Kelley, D. R., Snoek, J. &amp; Rinn, J. L. Basset: Learning the regulatory code of the accessible genome with deep convolutional neural networks. Genome Research 26, 990–999 (2016). 351. Hastie, T., Tibshirani, R. &amp; Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition. (Springer Science &amp; Business Media, 2009). 352. Kriventseva, E. V., Biswas, M. &amp; Apweiler, R. Clustering and analysis of protein families. Current Opinion in Structural Biology 11, 334–339 (2001). 353. Fu, L., Niu, B., Zhu, Z., Wu, S. &amp; Li, W. CD-HIT: Accelerated for clustering the next-generation sequencing data. Bioinformatics 28, 3150–3152 (2012). 354. Balaban, M., Moshiri, N., Mai, U., Jia, X. &amp; Mirarab, S. TreeCluster: Clustering biological sequences using phylogenetic trees. PLOS ONE 14, e0221068 (2019). 355. Zorita, E., Cuscó, P. &amp; Filion, G. J. Starcode: Sequence clustering based on all-pairs search. Bioinformatics 31, 1913–1919 (2015). 356. Ondov, B. D. et al. Mash: Fast genome and metagenome distance estimation using MinHash. Genome Biology 17, 132 (2016). 357. Baker, D. N. &amp; Langmead, B. Dashing: Fast and accurate genomic distances with HyperLogLog. Genome Biology 20, 265 (2019). 358. Corso, G. et al. Neural distance embeddings for biological sequences. in vol. 34 1853918551 (Curran Associates, Inc., 2021). 359. Hopf, T. A. et al. Mutation effects predicted from sequence co-variation. Nature Biotechnology 35, 128–135 (2017). 360. Castro, B. M., Lemes, R. B., Cesar, J., Hünemeier, T. &amp; Leonardi, F. A model selection approach for multiple sequence segmentation and dimensionality reduction. Journal of Multivariate Analysis 167, 319–330 (2018). 361. Haschka, T., Ponger, L., Escudé, C. &amp; Mozziconacci, J. MNHN-tree-tools: A toolbox for tree inference using multi-scale clustering of a set of sequences. Bioinformatics 37, 3947–3949 (2021). 362. Konishi, T. et al. Principal Component Analysis applied directly to Sequence Matrix. Scientific Reports 9, 19297 (2019). 363. Ben-Hur, A. &amp; Guyon, I. Detecting Stable Clusters Using Principal Component Analysis. in 159–182 (Humana Press, 2003). doi:10.1385/1-59259-364-X:159. 366. Clamp, M., Cuff, J., Searle, S. M. &amp; Barton, G. J. The jalview java alignment editor. Bioinformatics 20, 426–427 (2004). 367. Xia, Z., Wu, L.-Y., Zhou, X. &amp; Wong, S. T. Semi-supervised drug-protein interaction prediction from heterogeneous biological spaces. BMC Systems Biology 4, S6 (2010). 368. Tamposis, I. A., Tsirigos, K. D., Theodoropoulou, M. C., Kontou, P. I. &amp; Bagos, P. G. Semi-supervised learning of hidden markov models for biological sequence analysis. Bioinformatics 35, 2208–2215 (2019). 369. Elnaggar, A. et al. ProtTrans: Towards cracking the language of life’s code through self-supervised deep learning and high performance computing. doi:10.48550/arXiv.2007.06225. 370. Lu, A. X. et al. Discovering molecular features of intrinsically disordered regions by using evolution for contrastive learning. PLOS Computational Biology 18, e1010238 (2022). 371. Townshend, R., Bedi, R., Suriana, P. &amp; Dror, R. End-to-end learning on 3D protein structure for interface prediction. in vol. 32 (Curran Associates, Inc., 2019). 372. Lee, B., Baek, J., Park, S. &amp; Yoon, S. deepTarget: End-to-end learning framework for microRNA target prediction using deep recurrent neural networks. in 434442 (Association for Computing Machinery, 2016). doi:10.1145/2975167.2975212. 373. Goodfellow, I., Bengio, Y. &amp; Courville, A. Deep learning. (MIT Press, 2016). 374. Wang, Q., Ma, Y., Zhao, K. &amp; Tian, Y. A Comprehensive Survey of Loss Functions in Machine Learning. Annals of Data Science 9, 187–212 (2022). 375. Jiao, Y. &amp; Du, P. Performance measures in evaluating machine learning based bioinformatics predictors for classifications. Quantitative Biology 4, 320–330 (2016). 376. Brodersen, K. H., Ong, C. S., Stephan, K. E. &amp; Buhmann, J. M. The Balanced Accuracy and Its Posterior Distribution. in 2010 20th International Conference on Pattern Recognition 3121–3124 (2010). doi:10.1109/ICPR.2010.764. 377. Kaufman, S., Rosset, S. &amp; Perlich, C. Leakage in data mining: Formulation, detection, and avoidance. in 556563 (Association for Computing Machinery, 2011). doi:10.1145/2020408.2020496. 378. Whalen, S., Schreiber, J., Noble, W. S. &amp; Pollard, K. S. Navigating the pitfalls of applying machine learning in genomics. Nature Reviews Genetics 23, 169–181 (2022). 379. Fisher, R. A. On the interpretation of χ2 from contingency tables, and the calculation of p. Journal of the Royal Statistical Society 85, 87–94 (1922). 380. Pearson, K. X. On the criterion that a given system of deviations from the probable in the case of a correlated system of variables is such that it can be reasonably supposed to have arisen from random sampling. The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science 50, 157–175 (1900). 381. Hoerl, A. E. &amp; Kennard, R. W. Ridge regression: Biased estimation for nonorthogonal problems. Technometrics 12, 55–67 (1970). 382. Tibshirani, R. Regression Shrinkage and Selection Via the Lasso. Journal of the Royal Statistical Society: Series B (Methodological) 58, 267–288 (1996). 383. Zhang, H. The Optimality of Naive Bayes. 6. 384. Rish, I. An empirical study of the naive Bayes classifier. 6. 385. Vapnik, V. Estimation of dependences based on empirical data: Springer series in statistics (springer series in statistics). (Springer-Verlag, 1982). 386. Boser, B. E., Guyon, I. M. &amp; Vapnik, V. N. A training algorithm for optimal margin classifiers. in 144152 (Association for Computing Machinery, 1992). doi:10.1145/130385.130401. 387. Cortes, C. &amp; Vapnik, V. Support-vector networks. Machine Learning 20, 273–297 (1995). 388. Drucker, H., Burges, C. J. C., Kaufman, L., Smola, A. &amp; Vapnik, V. Support vector regression machines. in vol. 9 (MIT Press, 1996). 389. Breiman, L. Random Forests. Machine Learning 45, 5–32 (2001). 390. Breiman, L., Friedman, J. H., Olshen, R. A. &amp; Stone, C. J. Classification and regression trees. (1983). 391. Kingsford, C. &amp; Salzberg, S. L. What are decision trees? Nature Biotechnology 26, 1011–1013 (2008). 392. Caruana, R. &amp; Niculescu-Mizil, A. An empirical comparison of supervised learning algorithms. in 161168 (Association for Computing Machinery, 2006). doi:10.1145/1143844.1143865. 393. Yang, P., Hwa Yang, Y., B. Zhou, B. &amp; Y. Zomaya, A. A review of ensemble methods in bioinformatics. Current Bioinformatics 5, 296–308 (2010). 394. Potdar, K., S., T. &amp; D., C. A Comparative Study of Categorical Variable Encoding Techniques for Neural Network Classifiers. International Journal of Computer Applications 175, 7–9 (2017). 395. Hassani Saadi, H., Sameni, R. &amp; Zollanvari, A. Interpretive time-frequency analysis of genomic sequences. BMC Bioinformatics 18, 154 (2017). 397. Kunanbayev, K., Temirbek, I. &amp; Zollanvari, A. 2021 international joint conference on neural networks (IJCNN). in 1–6 (2021). doi:10.1109/IJCNN52387.2021.9534094. 398. Dufresne, Y. et al. The k-mer file format: A standardized and compact disk representation of sets of k-mers. Bioinformatics btac528 (2022) doi:10.1093/bioinformatics/btac528. 399. Wright, E. S. Using DECIPHER v2.0 to analyze big biological sequence data in r. The R Journal 8, 352–359 (2016). 400. Zamani, M. &amp; Kremer, S. C. 2011 IEEE international conference on bioinformatics and biomedicine workshops (BIBMW). in 327–333 (2011). doi:10.1109/BIBMW.2011.6112394. 401. Singh, D., Singh, P. &amp; Sisodia, D. S. Evolutionary based optimal ensemble classifiers for HIV-1 protease cleavage sites prediction. Expert Systems with Applications 109, 86–99 (2018). 402. Qian, N. &amp; Sejnowski, T. J. Predicting the secondary structure of globular proteins using neural network models. Journal of Molecular Biology 202, 865–884 (1988). 403. Budach, S. &amp; Marsico, A. Pysster: Classification of biological sequences by learning sequence and structure motifs with convolutional neural networks. Bioinformatics 34, 3035–3037 (2018). 404. Choong, A. C. H. &amp; Lee, N. K. 2017 international conference on computer and drone applications (IConDA). in 60–65 (2017). doi:10.1109/ICONDA.2017.8270400. 405. McGinnis, W. et al. Scikit-Learn-Contrib/Categorical-Encoding: Release For Zenodo. (2018) doi:10.5281/ZENODO.1157110. 406. Kawashima, S. et al. AAindex: amino acid index database, progress report 2008. Nucleic Acids Research 36, D202–D205 (2008). 407. Li, Z.-C., Zhou, X.-B., Dai, Z. &amp; Zou, X.-Y. Prediction of protein structural classes by Chou’s pseudo amino acid composition: approached using continuous wavelet transform and principal component analysis. Amino Acids 37, 415 (2008). 408. Nanni, L. &amp; Lumini, A. A new encoding technique for peptide classification. Expert Systems with Applications 38, 3185–3191 (2011). 409. Chen, Z. et al. iFeature: A python package and web server for features extraction and selection from protein and peptide sequences. Bioinformatics 34, 2499–2502 (2018). 410. Taylor, W. R. The classification of amino acid conservation. Journal of Theoretical Biology 119, 205–218 (1986). 411. Zvelebil, M. J., Barton, G. J., Taylor, W. R. &amp; Sternberg, M. J. E. Prediction of protein secondary structure and active sites using the alignment of homologous sequences. Journal of Molecular Biology 195, 957–961 (1987). 412. Kremer, S. &amp; Lac, H. Method, system and computer program product for levinthal process induction from known structure using machine learning. (2009). 413. Maetschke, S., Towsey, M. &amp; Bodén, M. Blomap: An encoding of amino acids which improves signal peptide cleavage site prediction. in vols Volume 1 141–150 (PUBLISHED BY IMPERIAL COLLEGE PRESS AND DISTRIBUTED BY WORLD SCIENTIFIC PUBLISHING CO., 2005). 414. Gök, M. &amp; Özcerit, A. T. A new feature encoding scheme for HIV-1 protease cleavage site prediction. Neural Computing and Applications 22, 1757–1761 (2013). 415. Saha, S. &amp; Bhattacharya, T. A Novel Approach to Find the Saturation Point of n-Gram Encoding Method for Protein Sequence Classification Involving Data Mining. in 101–108 (Springer, 2019). doi:10.1007/978-981-13-2354-6_12. 416. Jeffrey, H. J. Chaos game representation of gene structure. Nucleic Acids Research 18, 2163–2170 (1990). 417. Löchel, H. F. &amp; Heider, D. Chaos game representation and its applications in bioinformatics. Computational and Structural Biotechnology Journal 19, 6263–6271 (2021). 418. Cartes, J. A., Anand, S., Ciccolella, S., Bonizzoni, P. &amp; Vedova, G. D. Accurate and Fast Clade Assignment via Deep Learning and Frequency Chaos Game Representation. doi:10.1101/2022.06.13.495912. 419. Ni, H., Mu, H. &amp; Qi, D. Applying frequency chaos game representation with perceptual image hashing to gene sequence phylogenetic analyses. Journal of Molecular Graphics and Modelling 107, 107942 (2021). "],["viruses-hiv-and-drug-resistance.html", "Chapter 5 Viruses, HIV and drug resistance 5.1 What are viruses ? 5.2 Getting to know HIV 5.3 Drug resistance in HIV 5.4 Conclusion", " Chapter 5 Viruses, HIV and drug resistance 5.1 What are viruses ? Viruses occupy a strange place in the tree of life, with many debating if they are actually alive or not. André Lwoff gave what is probably the most fitting definition: “viruses are viruses”420. Despite this ambiguity, viruses share some common characteristics which allow us to define them as intracellular parasites421: Viruses have some type of genetic information, contained in either DNA or RNA This genetic information is protected by some form of envelope They use the cellular machinery of host cells to make copies of themselves. While we all know that viruses can be pathogenic and dangerous (the recent example of SARS-CoV2 springs to mind), that is not necessarily the case and some viruses like GBV-C422 and certain strains of H5N1 Influenza423 are non pathogenic and essentially harmless. Viruses have been discovered for all three domains of life: Eukaryota, Bacteria and Archea. In Eukaryota many viruses have been discovered for animals (both vertebrate424 and invertebrate425), plants426, protozoa427, chromista428 and even fungi429. Bacterial viruses known as phages have been known to exists since the beginning of the 20th century430,431. These bacteriophages are being considered as a therapeutic alternative to antibiotics432,433 which could help with multi-drug-resistant bacterial pathogens. Archea are also known to have their own viral infections434,435. Strangely even viruses of viruses seem to exist such as the plant satellite virus436,437 or hepatitis delta virus438,439. These “viroids” do not infect viral hosts per se but they cannot replicate on their own. Replication must happen during co-infection with a larger virus. More recently, true viruses of viruses called virophages have been discovered. These virophages like sputnik440 or zamilon441 specifically infect giant viruses. There is a huge diversity of viruses affecting all types of life, and new viruses are being discovered all the time442. This diversity hints at a rich and long evolutionary history. When and where viruses originated is still under study443,444 and we might never know how they emerged, it is however believed that they may have played an important role in the emergence of eukaryotic cells445. This co-evolution between virus and host cell shows a strong link between the two organisms and some parts of the human genome are likely of ancient viral origin446,447. It has been estimated that 1% to 8% of the human genome are endogenous retroviral sequences448,449. The rich diversity of viruses is reflected in the variety of genetic information support, replication strategy, physical and genomic size, as well as shape. The differences in genetic information support and replication strategy form the basis of the Baltimore virus classification system450 , still used today451 to classify virus lineages. As stated above all viruses have some genetic information, this information is stored either as DNA or as RNA, which is the molecule of choice for 70% of human pathogenic viruses452 (HIV and SARS-CoV 2 are RNA viruses). For DNA viruses, the molecule can be double-stranded as for Herpesvirus453,454, single-stranded like in the case of Papillomavirus455 or even circular in the case of the Hepatitis B virus456. This molecular diversity is also present in RNA viruses where the RNA molecule can be double-stranded like for Rotavirus457, or single-stranded. Furthermore, for single-stranded RNA viruses the strand can either be positive (i.e. can be directly translated into a protein) like Hepatitis C virus458 or Poliovirus459,460; conversely there are negative-strand RNA viruses, for which the complementary strand of RNA must be synthesized before translation into a protein, such as the Influenza or Measles viruses461. This diversity in genetic information support implies a necessary diversity in replication strategy. The main replication strategies are as follows462: The RNA molecule is directly copied as RNA. This is the strategy followed by single-stranded RNA coronaviruses463, Dengue viruses464 or Hepatitis C virus465. The DNA molecule is directly replicated as DNA. this can happen for both single-stranded DNA viruses like Papillomavirus466and double-stranded DNA viruses like Herpes simplex virus467. The DNA molecule is replicated by going through an RNA intermediary like Hepatitis B virus468. The RNA molecule is replicated by going through a DNA intermediary. This strategy is used by retroviruses that integrate this viral DNA intermediary into the host DNA, like HIV-1 (see Section 5.2.2). Finally, the genetic diversity of viruses is reflected in their physical characteristics: viruses come in all shapes and sizes. Physical size range from 17nm for plant satellite viruses469 to the giant 400nm Mimivirus470. Genomic size is also quite variable, there is a stark contrast between the 860 bp Circovirus SFBeef and the 2.5 Mbp Pandoravirus salinus genomes471. Viruses come in a variety of shapes472: icosahedral for HIV, helical for the tobacco mosaic virus or a distinctive head-tail shape for bacteriophages. Although there are a large number of viruses, and many of them are of great importance for human health, we will now focus on one virus of particular importance: Human Immunodeficiency Virus otherwise known as HIV. 5.2 Getting to know HIV 5.2.1 Quick Presentation of HIV HIV is a single-stranded RNA retrovirus that is responsible for the Acquired Immune Deficiency Syndrome (AIDS) pandemic that has been around for the last couple decades. This virus is transmitted through sexual contact or through blood. Sexual activity is the largest transmission factor followed by intravenous drug use473,474. The HIV infects cells of the host immune system, specifically CD4 T-cell lymphocytes and destroys them due to it’s replication process475. CD4 T-cells are an essential part of the immune system response helping fight against infection in humans. An HIV infection typically start with an asymptomatic phase that can last years, followed by a growth in viral replication leading to a decrease in CD4 cells which progresses into AIDS476. During AIDS, when the CD4 cell count is low enough opportunistic diseases such as pneumonia or tuberculosis477 can easily infect the host, leading to death when the immune system is weak enough. The HIV/AIDS is one of the deadliest pandemics in history, estimated to have lead to the death of 36 million people478. In 2010479 approximately 33 million people were infected with HIV, 2.6 million of which were due to new infections, and 1.8 million died of AIDS. Most of the new infections happened in economically developing regions of the world, 70% of them coming from sub-Saharan Africa479. As of 2020, these numbers have decreased with “only” 1.5 million new infections and 680,000 AIDS deaths, which is encouraging from a public health perspective. The HIV-1 virus was discovered simultaneously in 1983 by Françoise Barré-Sinoussi, Luc Montagnier480 and Robert Gallo481. There exists a second HIV-2 virus discovered shortly after HIV-1482, it is however less transmissible than HIV-1 which is largely responsible for the global HIV/AIDS pandemic483. In Africa in 2006, HIV-1 infections were rising where HIV-2 were declining484. While both viruses are of zoonotic origin, from transmissions of Simian Immunodeficiency Virus (SIV) from primates to humans, HIV-1 most likely originates from an SIV present in chimpanzees485–487, and HIV-2 from an SIV present in Sooty mangabeys488–490. Several independent such transmissions have resulted in 4 lineages of HIV-1 labeled groups M, N, O and P491 (similarly HIV-2 is split into groups A to H also resulting from independent zoonotic transmissions). While Groups N and P have been identified in only a handful of individuals in Cameroon , and group O is estimated to a few thousand cases in western Africa, the majority of the pandemic is due to viruses from group M. The most recent common ancestor, i.e. the putative virus that founded group M, is estimated to have originated in what is now the Democratic Republic of Congo492–494 at some point between 1910 and 1931492,495,496. Group M is further subdivided into 9 subtypes each with distinct genetic characteristics, labeled A to K487,497. Like in many viruses498, when 2 genetically different strains of HIV co-infect a single host there is a risk of genetic recombination leading to a new strain499. During recombination, a new genome is formed from parts of the original genomes. This can lead to new strains that can spread and form lineages of their own. HIV strains resulting from recombination are called Circulating Recombinant Forms (CRFs). There are currently 118 identified HIV-1 CRFs in the Los Alamos National Laboratory HIV sequence database500 (1 for HIV-2). There also exist many unique recombinant forms (URFs). URFs and CRFs are both the result of intra-host genetic recombination an URF becomes a CRF once it has been identified in at least three epidemiologically independent infected individuals501. Recombination can be particularly bothersome, complicating evolutionary analyses502, or facilitating drug resistance and hindering vaccine development503. While subtype C represented almost half of global infections from 2004 to 2007, subtype B is the majority subtype in richer countries of North America and Western Europe504 where sequencing efforts are more common. This accounts for an over-representation of subtype B sequences in public databases such as the Los Alamos sequence database where 54% of sequences are of the B subtype and only 15% are C505. 5.2.2 The replication cycle of HIV The viruses replication cycle and its immune-cell host specificity are what makes it particularly dangerous. This replication cycle can broadly be categorized into 9 separate steps506,507 shown in Figure 5.1. An HIV virion binds itself to the CD4 host cell through membrane proteins. The virion envelope and host cell membrane fuse together allowing the viral genetic material and proteins to enter the host cell. The viral RNA is reverse-transcribed into viral DNA The viral DNA is integrated into the host cell genome The integrated viral DNA is transcribed by the host cell machinery into multiple copies of viral RNA The viral RNA is translated into immature viral polyproteins The viral polyproteins are cleaved to form individual viral proteins. The newly synthesized viral RNA and viral proteins gather around the host-cell membrane which starts budding to create a new virion Once the budding is complete, the virion is released from the host cell and matures before being able to infect other CD4 cells and replicate again. The successive infection of CD4 cells by HIV virions leads to cellular death due to inflammatory response and/or activation of apoptosis508,509. The gradual depletion of CD4 cells in the infected individual’s body lead to the suppression of the immune system, eventually leading to AIDS. Figure 5.1: Main steps of HIV-1 replication cycle. The HIV virion contains viral RNA and three essential proteins: Reverse Transcriptase (RT) represented in red, Integrase (IN) represented in cyan and Protease (PR) represented in yellow. 5.2.3 Genetics of HIV The replication cycle described in Section 5.2.2 is made possible by the 15 proteins of HIV. These proteins are coded by 9 separate genes510. An overview of the HIV proteins, their structure and localization within the viral particle can be seen in Figure 5.2. The HIV genome is made up of three main genes each coding for polyproteins and six genes coding for proteins with regulatory and accessory roles. The three polyproteins correspond to long chains of amino acids which are subsequently cleaved at specific positions to result in separate viral proteins. The gag (“group-specific-antigen”) gene codes for the Gag polyprotein which, once cleaved, results in four proteins with mainly structural roles: The Matrix protein (MA or p17) lines the internal surface if the virion membrane maintaining the shape and structural integrity of the virion. The Capsid protein (CA or p24) forms an inner core (the capsid) inside the virion around the viral RNA. It helps protect the viral genetic information. The Nucleocapsid protein (NC or p7) binds with the viral RNA inside the capsid, stabilizing the molecule and further protecting the genetic information. The p6 protein is a small, largely unstructured protein511 that is suspected of playing a role in virion budding and release from the host cell at the end of the replication cycle512,513. The pol (“polymerase”) gene codes for the Pol polyprotein. After cleaving this results in the three essential viral enzymes at the heart of the replication cycle: The Protease (PR) is responsible for cleaving the Gag, Pol and Env polyproteins to get the individual viral proteins. Without it the individual viral proteins cannot come into being and therefore cannot function, stopping viral replication. The Reverse Transcriptase (RT or p51/p66) is responsible for synthesizing viral DNA from the viral RNA template contained in the virion. This is the first step in hijacking the cellular machinery for replication. Without viral DNA, HIV replication is impossible. The Integrase (IN) is responsible for integrating the viral DNA produced by RT in to the host cell DNA. Once the viral DNA is inside the host genome it can be transcribed and then translated (as described in Section 1.1) to produce new copies of the viral RNA and proteins. Without this integration step the viral genetic information cannot be expressed and the replication cycle is stopped. These three proteins are of particular importance and we will go into more detail about them in Section 5.3.2. The env (“envelope”) gene codes for Env, the third and last polyprotein. The two resulting proteins coat the membrane of the virion and are responsible for binding with the CD4 host cells. The Surface protein (SU or gp120) binds to receptors on the surface of CD4 cells and allows the virion to attach itself to the host cell514. It also enables membrane fusion, the essential first step in the viral replication cycle515. The Transmembrane protein (TM or gp41) anchors SU into the virion membrane. The 6 remaining genes all code for single proteins. Two of these have essential regulatory roles and the remaining four have accessory roles. The tat (“trans-activator of transcription”) gene codes for Tat, the first essential regulatory protein. Tat activates and promotes transcription leading to more numerous and longer copies of the viral RNA516. The rev (for “regulator of virion”) gene codes for Rev, the second essential regulatory protein. Rev helps transcribed viral RNA exit the nucleus of the host cell in order to be translated to viral proteins or be packaged in new, budding virions517. The remaining four accessory genes are as follows: nef (“negative regulatory factor”) code for the Nef protein which prevents the production of the CD4 cellular defense proteins increasing infectivity518; vif (“viral infectivity factor”) codes for the Vif protein which also increases viral infectivity519; vpu (“viral protein U”) codes for Vpu which likely helps during release of new virions519,520 as well as preventing production of CD4 in the host cell, it is not believed to be present in the mature virion as it binds to host cellular membranes521; vpr (“viral protein R”) likely helps viral DNA enter the host cell nucleus and prevents the natural host cell reproduction cycle522. The existence of a 10th HIV-1 gene was suggested in 1988523, overlapping the env gene and coding for proteins on the other strand of viral DNA than the other genes. This putative gene was named asp (“antisense protein”) and Asp transcripts were isolated during an HIV-1 infection in 2002524. The function of this protein is still unknown but it has been shown to have a strong evolutionary correlation with HIV-1 group M responsible for the pandemic525. Although this Asp protein is still a source of debate, it is under active research526. Figure 5.2: Structure and main components of a mature HIV-1 virion. Structural proteins MA, CA, SU and TM are represented in Blue, functional enzymes RT, IN and PR in pink, RNA binding proteins Rev, Tat and NC in orange and accessory proteins Vif, Nef, Vpr and Vpu in green. Viral RNA is shown in yellow. The phospholipd membrane of the virion is shown in a light purple color. The p6 protein is not represented as it is largely unsctructured. Vpu is not believed to be present in the HIV virion. Figure adapted from PDB101527 (PDB101.rcsb.org, CC By 4.0 License, detailed list of structures used available in Appendix B). 5.3 Drug resistance in HIV Although the HIV/AIDS pandemic has been very deadly around the world, we are not completely defenseless against it. The first antiretroviral therapy (ART) drugs were made available in the late eighties, only a couple years after discovery of the virus. ART reduce the viral load in an HIV positive patient reducing its transmissibility528, while ART is not a cure for an HIV infection it has been shown to drastically reduce mortality and morbidity529. ART is estimated to have saved the lives of 9.5 million individuals between 1995 and 2015530. 5.3.1 A quick history of ART The first available anti-HIV drug was Zidovudine (ZDV, also known as azidothymidine or AZT) approved by the FDA for usage in the USA in 1987531, a few years only after the discovery of the virus. This drug was a reverse transcriptase inhibitor (RTI) therefore preventing the viral RNA from being transcribed into viral DNA. Unfortunately, 3 years later strains of HIV resistant to ZDV were circulating532. This rapid emergence of resistance to treatment is common for HIV533 due to its very high evolution rate534 allowing it to explore many possible mutations in response to selective pressures, as well as the frequent occurrence of genetic recombination535. To counter this resistance new drugs were rapidly developed and, between 1988 and 1995, four more RTIs were approved by the FDA. Using a combination of these drugs was also shown to be effective and led to a slower rise of resistance536. Then focus was shifted to the development of a new type of drug: Protease Inhibitors (PI). Between 1995 and 1997 4 of them were approved. These, taken in combination with RTI made if harder for the virus to develop resistance537. A new class of RTIs was also explored, Non-Nucleoside RTIs (NNRTIs) that block the RT action in another manner than the previously approved Nucleoside RTIs (NRTIs). When taken in combination with other drugs they are also highly effective538. As the years advanced even more drug targets were explored, with 5 Integrase inhibitors (INSTI) being approved since 2007539, A Fusion Inhibitor (FI) in 2003540, and 3 other Entry inhibitors (EI)541,542 since 2007 all targeting different steps in the replication cycle of HIV (see Table B.1 and Figure 5.3). In response to the rapid emergence of resistance in HIV when treated with a single drug, clinicians started systematically treating HIV with a combination of multiple drugs targeting different proteins, as early as 1996. This is now referred to as Highly active antiretroviral combination therapy (HAART, also known as tritherapy). HAART usually consists of 2 NRTIs coupled with another drug: NNRTI or PI at first and later FI or INSTI543. As of 2008 22 anti-HIV single drugs were approved by the FDA544, and 27 as of today. This large array of available drugs made HAART possible and gave options to clinicians to switch targets when the multi-resistant HIV emerged. It is important to note here that, while high-income countries had access to this large panel of antiviral drugs, in most lower-income countries that was not the case. This meant that, drug switching and second-line5 drug regimens were rarely possible in these countries leading to multi-resistant viruses545. With the advent of HAART, patients had access to more potent treatments, however complexity of the treatment regimen grew. Treatments often involved several pills a day to take at precise intervals. Complex drug regimens have been associated with poorer treatment adherence546,547, which can lead to poor treatment outcome as well as the emergence of multi-resistant HIV strains548 and its spread within the population. To avoid this issue, increasingly more single pill regimens are being developed with a staggering 7 new drugs approved by the FDA in 2018. These single pill regimens greatly reduce the burden of adherence for patients leading to better therapeutic outcomes and reduced healthcare costs549. Figure 5.3: Timeline of ART drugs FDA approvals. Colored by drug type: Nucleoside Reverse transcriptase inhibitors (NRTI), Non-Nucleoside Reverse transcriptase inhibitors (NNRTI), Protease Inhibitors (PI), Integrase inhibitors (INSTI), Entry Inhibitors (EI) and pharmacokinetic enhancers (PE). Fixed Dose Combination (FDC) single pill regimens are also shown. * RPV is often also used as a pharmacokinetic enhancer in combination with other drugs. ✝ These drugs are no longer approved by the FDA or no longer recommended as first line regiment treatment. Information collected from https://hivinfo.nih.gov/understanding-hiv/fact-sheets/fda-approved-hiv-medicines, https://hivinfo.nih.gov/understanding-hiv/infographics/fda-approval-hiv-medicines and https://www.accessdata.fda.gov/scripts/cder/daf/index.cfm. See also Table B.1. Most recently, some studies explored using some of these single pill regimens (such as Truvada, c.f. Table B.1) as prophylactics i.e. Pre-exposure prophylaxis (PrEP). Putting uninfected but at risk populations on ART before any known exposure has been shown to effectively lower the risk of infection550–552. When adherence is maintained, this risk reduction has been estimated to be between 44% and 100%553. As of 2022, Truvada is the only authorized drug for PrEP in Europe554, although Descovy and Apretude are also authorized for PrEP in the USA555. All of these drugs are widely used and are by now very well studied, therefore detailed guidelines on all the aspects of ART; when to start, which drugs to use, when to change drugs; are issued and updated regularly by practitioners556 and global organisms557 alike. 5.3.2 Main mechanisms of viral proteins, antiretroviral drugs and associated resistance. Each ART drug targets a specific protein, most of them target one of the three pol proteins: RT, PR and IN. The structure of these proteins is inherently linked to their function, and as such is essential to take into account when developing ART. Similarly the structure of these proteins is very important when studying the resistance mechanisms developed by the virus558,559. In this section we will go over; for RT, IN and PR; the main structural elements and how they relate to treatment and resistance. 5.3.2.1 Reverse Transcriptase The reverse transcriptase protein is the most targeted protein in number of ART drugs (c.f. Figure 5.3 and Table B.1). The mature protein is formed of two subunits: p51 and p66. These two subunits are translated from the same section of the pol gene, and such have the same amino acid sequence, but p51 is cleaved and as such is shorter than p66. The p66 subunit contains the active sites of RT whereas p51 plays a mainly structural role. The p66 sububit can be separated into 5 domains560. The “fingers”, “palm”, and “thumb” domains are linked together and folded to form a canal through which the RNA template and newly synthesized viral DNA can pass through. The polymerase active site, responsible for incorporating nucleotides to the viral DNA molecule, is situated in the “palm” domain at the bottom of the canal. The “RNase” domain of RT contains a secondary active site responsible for cleaving the viral RNA template from the viral DNA so that the RT can fill out the complementary strand of viral DNA before integration into the host genome. The final “connection” domain is simply a link between the “RNase” and the “thumb” domains. A three dimensional view of RT with these domains highlighted can be seen in Figure 5.4. Figure 5.4: 3D structure of HIV-1 Reverse-transcriptase. The different domains of the p66 subunit are labeled and shown in different shades of blue and green. The structural p51 subunit is shown in orange. The RNA template is shown in dark gray and the newly synthesized DNA stran in light gray. The polymerase active site is shown in red although mostly hidden by the RNA template. The 3D visualization was produced with Illustrate561 using the 2hmi PDB structure. Reverse Transcriptase inhibitors can be separated into two classes: Nucleoside RTIs (NRTIs) and Non-Nucleoside RTIs (NNRTIs), inhibiting the action of RT in two disctinct manners: NRTIs are analogues of free nucleotides in the host cell. They competitively inhibit RT and can be used to elongate the viral DNA chain. Once an NRTI is incorporated, further elongation of the DNA molecule is impossible and the viral DNA cannot be synthesized anymore. This is similar to the chain terminating nucleotides introduced in Section 1.2. NNRTIs bind to a specific region of the p51 subunit: the Non Nucleoside Inhibitor Binding Pocket (NNIBP) (A view of RT with the NNIBP visible is shown in Figure 6.4). This pocket, although it is on the p51 subunit is spatially situated very close to the polymerase active site. NNRTIs bind to the NNIBP to change the conformation of the active site, lowering its flexibility562, and thus non-competitively inhibiting the action of RT. Research has been conducted into inhibition of the RNase active site of RT563,564 which could also inhibit the action of RT. There is however, to this day, no approved treatment that inhibits the RNase action of RT. Drug resistance mutations (DRMs) that arise in HIV from the selective pressures resulting from RTI exposure can similarly be grouped into two categories: NRTI and NNRTI resistance mutations. NRTI resistance mutations can further be subcategorized into two groups565,566. The first type of NRTI resistance mutations are mutations that prevent the incorporation of NRTIs into the viral DNA molecule. M184V and M184I, indicating the replacement, at site number 184, of a Methionine by a Valine or an Isoleucine respectively, are very common NRTI resistance mutations. These V and I amino acids have a different structure than the original M, interfering with the incorporation of lamiduvine (3TC) but not dNTP567. The second type of mutation, allows RT to remove an incorporated NRTI from the viral DNA to resume synthesis. Thymidine Analog Mutations (TAMs), M41L, D67N, K70R, L210W, T215Y/F and K219Q/E confer resistance to azidothymidine (AZT) through this mechanism568,569. Similarly, NNRTI resistance mutations work via several different mechanisms570,571. Some NNRTI resistance mutations, like Y181C, lower the affinity of the NNIBP to NNRTIs preventing binding of drugs to RT. Others, like K103N change the conformation of the p51 subunit, making the NNIBP disappear. NNRTI resistance mutations are particularly dangerous because they often confer cross-resistance to multiple NNRTIs without affecting the polymerase action very much558, giving rise to viruses that are both fit and highly resistant. This is contrast to NRTI resistance mutations that generally incur a fitness cost for the virus, lowering its efficacy572. 5.3.2.2 Protease The Protease protein, also a major drug target for ART, cleaves the gag and pol polyproteins in order to produce functional viral proteins, essential to replication. It has a symmetric dimeric structure, that is two say that it is composed of two identical chains of amino acids573,574. A structural view of PR is shown in Figure 5.5. These two chains are folded in order to create a “tunnel” through which the polyproteins enter. In the middle of this “tunnel”, at the bottom, is the active site. The active site is composed of two Aspartate residues, one on each chain, with water they can participate in a chemical reaction that cleaves the polyprotein at a specific position575. The roof of the “tunnel” is formed by the flaps, a flexible region from each of the two chains that can open or close the “tunnel”576. These flaps most likely control the access of polyproteins to the active site577,578. Figure 5.5: 3D structure of HIV-1 Protease. The two identical chains are colored in orange and blue shades respectively. The flexible, flaps form the the “roof” of a tunnel, at the bottom of which is the active site: 2 Asp residues, one on each chain. The 3D visualization was produced with Illustrate561 using the 2p3b PDB structure. All the approve Protease Inhibitors (PIs) share a similar mode of action, each PI binds to the active site of the PR, denying access to the “tunnel” for polyproteins and stopping the catalytic action of PR579,580. Tipranavir, one of the more recent PIs, also binds with the flaps580. According to Prabu-Jeyabalan and colleagues, the Protease structure does not recognize the specific sequence of the polyprotein cleavage site but rather its shape581. They proposed an inhibitor based on this shape for all polyproteins combined, which establishes more bonds with PR, making it supposedly more efficient582 than current approved PIs. As is the case with RTIs, when under selective pressure due to PIs, the virus tends to develop PI associated DRMs. Most PI resistance mutations result in an enlarged “tunnel”, this tends to lower the affinity of the PIs to the active site, but also the affinity of polyproteins, lowering the fitness of the virus significantly537. In addition, some mutations on the gag polyprotein seem to lower the efficacy of PIs, although the underlying mechanism is not well known537. Some mutations in the flaps of PR have also been shown to confer PI resistance. It seems likely that these mutations change conformation of the flaps, opening them leading to the release of inhibitors from the active site583. 5.3.2.3 Integrase The integrase protein is the third major anti-retroviral drug target, it is responsible for integrating the viral DNA into the host genome. It is a tetramer composed of four identical amino acid chains.584,585. Each of these chains contain three domains linked together by flexible linker sequences: the N-terminal domain, the catalytic core and the C-terminal domain. In each tetramer, two chains provide the active site for the integration reaction while the other two have a mostly structural role. It is probable that the N-terminal domain which is very conserved is necessary for stable tetramerization of IN monomers586, this tetrameric structure is shown in Figure 5.6. Figure 5.6: 3D structure of an Integrase. This Integrase tetramer is binded with viral (red) and host (orange) DNA, linked to the two light blue functional subunits via the C-terminal domain. The active site formed by the the catalytic cores of the two functional subunits (not visible in this representation), is where the strand transfer reaction will take place. The two dark blue IN subunits have a structural role. This figure was adapted from the PDB 101 molecule of the month Integrase entry by David S. Goodsell and the RCSB PDB (pdb101.rcsb.org/motm/135) with a CC By 4.0 license. Several steps are needed in order to integrate the viral DNA with the host genome587. First, IN binds to the both ends of the viral DNA, using the C-terminal domains, forming a closed loop. Secondly, both ends of the viral DNA molecule are then prepared for integration by the catalytic core. Third, the host DNA is captured with C-terminal domains. Then, the strand-transfer is done within the catalytic core: the host DNA is cut in two places and a single strand from each end of the viral DNA are attached to these two breakpoints. Finally, the IN tetramer detaches from the linked molecules and the final steps necessary to create a single hybrid DNA molecule are done by the host cellular machinery. A graphical representation of this process can be found in Figure 1 of the 2022 article by Maertens et al.587. Integrase Strand Transfer Inhibitors (INSTIs), as their name indicates, block the strand transfer reaction. They achieve this by strongly binding to the active site of the IN tetramer after it has formed a complex with the viral DNA587,588. In doing so, INSTIs prevent the IN / viral DNA complex from binding to the host DNA, effectively preventing strand transfer. In the presence of INSTIs during therapy, once more the HIV virus develops resistance mutations over time. These mutations all lower affinity of IN to INSTIs, preventing bonding587,589. Since most INSTIs behave similarly, this means that cross-resistance to INSTIs is quite common for INSTI DRMs589,590. Once more, these mutations tend to lower the overall viral fitness necessitating secondary compensatory mutations to restore fitness589,590. 5.3.2.4 Other drug targets For now, resistance has not been observed for novel drugs like entry inhibitors. This might be because the genetic barrier to resistance is higher and because not enough time has passed since their introduction for resistance to emerge. For all the other drug targets however, as stated earlier in this section, resistance is documented and problematic. Resistance has even been detected for PrEP which is prophylactic591,592. This seems to be rare however and mostly due to an unknown pre-treatment HIV infection593. 5.3.3 Consequences of resistance on global health HIV resistance to ART drugs is problematic from a global health perspective. Indeed circulation of resistant strains of HIV within populations can lead to treatment-naive individuals that will not respond well to treatment. More concerning is the fact that transmission of resistant strains of HIV between treatment-naive individuals is the main mode of resistance transmission in the UK594,595 and Switzerland596. This treatment-naive to treatment-naive transmission is particularly insidious since it can go undetected and creates long lasting drug resistant strain reservoirs in the treatment-naive population. This of course is dangerous since some infected individuals might experience poor therapeutic outcomes and even failure when administered first line regimens597. To avoid this, genotypic resistance testing has become standard practice when choosing the therapeutic strategy in high-income countries, but more effort must be done to make resistance testing less expensive and more cost-efficient in lower and middle income countries598. Although the transmitted drug resistance described above is problematic, a large portion of DRMs incur a fitness cost for the resistant strain599,600. This means that although they are selected when exposed to the evolutionary pressure of ART, when the treatment is interrupted there is another pressure leading these costly mutations to disappear. This reversion is commonly observed after interruption of treatment, however the median reversion times vary widely from 1 to 13 years601 depending on the severity of the fitness loss and type of mutation. This means that although reversion can possibly lead to loss of resistance this can potentially take a long time and possibly longer than the treatment interruption. In practice it is therefore very important to keep an eye on all drug resistance mutations, their population dynamics and spread as well as their presence or absence in a particular strain before starting treatment. 5.3.4 Finding DRMs 6 Finding and categorizing mutations as DRMs is an important task in light of the public health implications mentioned in Section 5.3.3, as such this is an active part of the HIV research field. The most important thing needed in order to study DRMs is of course viral sequences. To facilitate the search for DRMs several sequence databases exist. Sequences are often linked to metadata related to the treatment status of the patient from which the sequence was obtained. This metadata can be quite variable: from a coarse level binary indicator of treatment to a finely detailed list of all treatments received and associated phenotypic measurements like viral load. Databases like the UK-CHIC603, UK HIV drug resistance database (https://www.hivrdb.org.uk/) and Swiss cohort study (https://www.shcs.ch/) host sequences on a national level, although access can be granted to international researchers. Other databases like the PANGEA database604 host sequences from multiple countries in sub-Saharan Africa. The Stanford HIV drug resistance database (https://hivdb.stanford.edu/) hosts HIV sequences with some phenotypic data32,605. Finally some database only host sequences, such as the Los Alamos HIV sequence database (http://www.hiv.lanl.gov/), however with few specific treatment or resistance related metadata606 these have less direct applicability to the DRM search task. Some databases, like the Stanford HIV resistance database, also store specific knowledge about known resistance mutations, keeping and regularly updating lists of clinically important DRMs as well as their impact on ART607,608. Additionally, Stanford also offers tools for clinicians to do genotypic resistance testing with interpretable results609. The first step of mutations discovery is usually some kind of statistical association analysis607,610 where the association between treatment status (coarse of fine grained) and specific mutations is statistically tested. This is usually done with Fisher association tests611,612 or correlation testing with the Spearman correlation for example613. This results in a list of mutations that are significantly associated with a given treatment and corresponding p-values. Since, on a given sequence dataset, several mutations are usually tested at once this can lead to inflated false positive614 and spurious615 associations. Fortunately this is a well studied problem and many methods exist to control this effect by controlling the Familywise Error Rate (FWER) e.g. with the Bonferroni procedure,616 or the False Discovery Rate (FDR) e.g. with the Benjamini-Hochberg procedure617. These methods are often applied when testing for resistance association611,618,619. However these correction methods are a double-edged sword, some of them can be very conservative and lead to falsely rejecting true associations620. In some studies on resistance phylogenetic correlation between the sequences is also accounted for in statistical analyses621,622. Statistical testing on treatment status, while informative, can only associate a mutation with a treatment. In order to actually validate whether a mutation causes resistance or not biological analyses are needed607,610. The easiest of these are in vitro analyses where live viruses are subjected to a phenotypical assay. These assays measure the susceptibility of HIV viruses to a wide array of drugs, which can then be statistically associated with genetic traits like specific mutations. These assays like phenosense623 or antivirogram624 are widely used625–627. The viruses can be obtained from clinical isolates628 or, viruses with specific mutations can be manufactured with site directed mutagenesis629,630. In vivo can be conducted by sequencing viruses from patients failing ART, following over time and studying the association between their treatment response and HIV genetics631,632. More recently, as sequence database grow bigger and bigger (The UK-CHIC database contains more than 80,000 HIV sequences with treatment status), methods based on statistical and machine learning are being used to study resistance. Most approaches rely on training models to predict some type of resistance: either classifying sequences as resistant or not329,633 of predicting a phenotypic response like fold resistance compared to wild type634. Initial approaches were mainly designed for clinical testing, rather than new DRM search, and distributed via web services635,636. Initially these approaches were based on models like decision trees637, SVMs635 or logistic regression638. Over time the use of more complex models such as neural networks has increased, with increased prediction accuracy634. By analyzing the important features used by trained models to predict resistance, it is possible to find features, corresponding to mutations, that are useful for predicting, and therefore likely associated with, drug resistance (see Chapter 6). With the improvement in methods to interpret and extract features from complex models such as deep neural networks, this approach has been used with deep learning models329. This novel way of finding resistance associated mutations has the potential to uncover complex mutational effects that simple association testing cannot. 5.4 Conclusion Viruses are surprisingly complex in light of their apparent simplicity. They are ubiquitous and present an extreme diversity. Whether they are pathogenic or not, the role of viruses in a myriad of processes and niches make them interesting and important to study. The sequences of these viruses, although small can be very useful for evolutionary as well as clinical analyses. Although the study of viruses as a whole can be very useful, HIV is particularly important to study. The impact of the HIV pandemic on global health has been severe, both in Lower and Higher income countries. It is therefore paramount to fully understand the underlying mechanisms and evolutionary adaptations of this virus. Its high mutation rate allows it to quickly explore evolutionary alternatives when exposed to drugs, making anti HIV therapy a complex endeavor. Fortunately, with large scale sequencing efforts it is possible to study and track these evolutionary adaptations to treatments. This allows us to adapt therapeutic strategies as well as developing new compounds and approaches. In this context, studying and finding the virus’ mutational processes is paramount. This is especially important when studying resistance to RTIs as they form the backbone of first line regimen combination therapies, and are the most common type of anti-HIV drug. This process is made easier by the large scale sequence repositories now available, and the usage of machine and statistical learning to leverage that data. References 32. Rhee, S.-Y. et al. Human immunodeficiency virus reverse transcriptase and protease sequence database. Nucleic Acids Research 31, 298–303 (2003). 329. Steiner, M. C., Gibson, K. M. &amp; Crandall, K. A. Drug Resistance Prediction Using Deep Learning Techniques on HIV-1 Sequence Data. Viruses 12, 560 (2020). 420. Lwoff, A. The concept of virus. Journal of General Microbiology 17, 239–253 (1957). 421. Minor, P. D. Viruses. in (John Wiley &amp; Sons, Ltd, 2014). doi:10.1002/9780470015902.a0000441.pub3. 422. Stapleton, J. T., Foung, S., Muerhoff, A. S., Bukh, J. &amp; Simmonds, P. The GB viruses: A review and proposed classification of GBV-a, GBV-c (HGV), and GBV-d in genus pegivirus within the family flaviviridae. The Journal of General Virology 92, 233–246 (2011). 423. Yamamoto, N. et al. Characterization of a non-pathogenic H5N1 influenza virus isolated from a migratory duck flying from siberia in hokkaido, japan, in october 2009. Virology Journal 8, 65 (2011). 424. Shi, M. et al. The evolutionary history of vertebrate RNA viruses. Nature 556, 197–202 (2018). 425. Atlas of invertebrate viruses. (CRC Press, 2017). doi:10.1201/9781315149929. 426. Lefeuvre, P. et al. Evolution and ecology of plant viruses. Nature Reviews Microbiology 17, 632–644 (2019). 427. Wang, A. L. &amp; Wang, C. C. Viruses of parasitic protozoa. Parasitology Today 7, 76–80 (1991). 428. Fermin, G., Mazumdar-Leighton, S. &amp; Tennant, P. Viruses of prokaryotes, protozoa, fungi, and chromista. in 217 (2018). 429. Sutela, S., Poimala, A. &amp; Vainio, E. J. Viruses of fungi and oomycetes in the soil environment. FEMS Microbiology Ecology 95, fiz119 (2019). 430. Twort, F. W. AN INVESTIGATION ON THE NATURE OF ULTRA-MICROSCOPIC VIRUSES. The Lancet 186, 1241–1243 (1915). 431. Delbrock, M. Bacterial Viruses or Bacteriophages. Biological Reviews 21, 30–40 (1946). 432. Clark, J. R. &amp; March, J. B. Bacterial viruses as human vaccines? Expert Review of Vaccines 3, 463–476 (2004). 433. Kan-Davelaar, H. E. van, Hest, J. C. M. van, Cornelissen, J. J. L. M. &amp; Koay, M. S. T. Using viruses as nanomedicines. British Journal of Pharmacology 171, 4001–4009 (2014). 434. Prangishvili, D., Basta, T., Garrett, R. A. &amp; Krupovic, M. Viruses of the Archaea. in 1–9 (John Wiley &amp; Sons, Ltd, 2016). doi:10.1002/9780470015902.a0000774.pub3. 435. Prangishvili, D., Forterre, P. &amp; Garrett, R. A. Viruses of the Archaea: a unifying view. Nature Reviews Microbiology 4, 837–848 (2006). 436. Francki, R. I. B. Plant virus satellites. ANNUAL REVIEW OF MICROBIOLOGY. 437. Xu, P. &amp; Roossinck, M. J. Plant Virus Satellites. in (John Wiley &amp; Sons, Ltd, 2011). doi:10.1002/9780470015902.a0000771.pub2. 438. Lai, M. M. The molecular biology of hepatitis delta virus. Annual review of biochemistry 64, 259–286 (1995). 439. Hughes, S. A., Wedemeyer, H. &amp; Harrison, P. M. Hepatitis delta virus. The Lancet 378, 73–85 (2011). 440. Desnues, C., Boyer, M. &amp; Raoult, D. Chapter 3 - Sputnik, a Virophage Infecting the Viral Domain of Life. in (eds. Łobocka, M. &amp; Szybalski, W. T.) vol. 82 63–89 (Academic Press, 2012). 441. Gaia, M. et al. Zamilon, a Novel Virophage with Mimiviridae Host Specificity. PLOS ONE 9, e94923 (2014). 442. Edgar, R. C. et al. Petabase-scale sequence alignment catalyses viral discovery. Nature 602, 142–147 (2022). 443. Nasir, A., Romero-Severson, E. &amp; Claverie, J.-M. Investigating the Concept and Origin of Viruses. Trends in Microbiology 28, 959–967 (2020). 444. Forterre, P. &amp; Prangishvili, D. The origin of viruses. Research in Microbiology 160, 466–472 (2009). 445. Forterre, P. The origin of viruses and their possible roles in major evolutionary transitions. Virus Research 117, 5–16 (2006). 446. Boeke, J. &amp; Stoye, J. Retrotransposons, Endogenous Retroviruses, and the Evolution of Retroelement. (1997). 447. Kojima, S. et al. Virus-like insertions with sequence signatures similar to those of endogenous nonretroviral RNA viruses in the human genome. Proceedings of the National Academy of Sciences 118, e2010758118 (2021). 448. Löwer, R., Löwer, J. &amp; R Kurth. The viruses in all of us: Characteristics and biological significance of human endogenous retrovirus sequences. Proceedings of the National Academy of Sciences 93, 5177–5184 (1996). 449. Griffiths, D. J. Endogenous retroviruses in the human genome sequence. Genome Biology 2, reviews1017.1 (2001). 450. Baltimore, D. Expression of animal virus genomes. Bacteriological Reviews 35, 235–241 (1971). 451. Koonin, E. V., Krupovic, M. &amp; Agol, V. I. The baltimore classification of viruses 50 years later: How does it stand in the light of virus evolution? Microbiology and Molecular Biology Reviews 85, e00053–21 (2021). 452. Domingo, E. &amp; Perales, C. RNA Virus Genomes. in 1–12 (John Wiley &amp; Sons, Ltd, 2018). doi:10.1002/9780470015902.a0001488.pub3. 453. McGeoch, D. J., Rixon, F. J. &amp; Davison, A. J. Topics in herpesvirus genomics and evolution. Virus Research 117, 90–104 (2006). 454. Boehmer, P. &amp; Nimonkar, A. Herpes Virus Replication. IUBMB Life 55, 13–22 (2003). 455. Brentjens, M. H., Yeung-Yue, K. A., Lee, P. C. &amp; Tyring, S. K. Human papillomavirus: a review. Dermatologic Clinics 20, 315–331 (2002). 456. Kay, A. &amp; Zoulim, F. Hepatitis B virus genetic variability and evolution. Virus Research 127, 164–176 (2007). 457. Parashar, U. D., Bresee, J. S., Gentsch, J. R. &amp; Glass, R. I. Rotavirus. Emerging Infectious Diseases 4, 561–570 (1998). 458. Simmonds, P. Variability of hepatitis C virus. Hepatology 21, 570–583 (1995). 459. Wimmer, E., Hellen, C. U. T. &amp; Cao, X. Genetics of poliovirus. Annual Review of Genetics 27, 353–437 (1993). 460. Racaniello, V. R. One hundred years of poliovirus pathogenesis. Virology 344, 9–16 (2006). 461. Palese, P., Zheng, H., Engelhardt, O. G., Pleschka, S. &amp; García-Sastre, A. Negative-strand RNA viruses: Genetic engineering and applications. Proceedings of the National Academy of Sciences 93, 11354–11358 (1996). 462. Domingo, E. &amp; Perales, C. Virus Evolution. in (John Wiley &amp; Sons, Ltd, 2014). doi:10.1002/9780470015902.a0000436.pub3. 463. V’kovski, P., Kratzel, A., Steiner, S., Stalder, H. &amp; Thiel, V. Coronavirus biology and replication: implications for SARS-CoV-2. Nature Reviews Microbiology 19, 155–170 (2021). 464. Bäck, A. T. &amp; Lundkvist, Å. Dengue viruses an overview. Infection Ecology &amp; Epidemiology 3, 10.3402/iee.v3i0.19839 (2013). 465. Dustin, L. B., Bartolini, B., Capobianchi, M. R. &amp; Pistello, M. Hepatitis c virus: Life cycle in cells, infection and host response, and analysis of molecular markers influencing the outcome of infection and response to therapy. Clinical microbiology and infection : the official publication of the European Society of Clinical Microbiology and Infectious Diseases 22, 826–832 (2016). 466. Kadaja, M., Silla, T., Ustav, E. &amp; Ustav, M. Papillomavirus DNA replication From initiation to genomic instability. Virology 384, 360–368 (2009). 467. Weller, S. K. &amp; Coen, D. M. Herpes simplex viruses: Mechanisms of DNA replication. Cold Spring Harbor Perspectives in Biology 4, a013011 (2012). 468. Beck, J. &amp; Nassal, M. Hepatitis b virus replication. World Journal of Gastroenterology : WJG 13, 48–64 (2007). 469. Pyle, J. D. &amp; Scholthof, K.-B. G. Chapter 58 - Biology and Pathogenesis of Satellite Viruses. in (eds. Hadidi, A., Flores, R., Randles, J. W. &amp; Palukaitis, P.) 627–636 (Academic Press, 2017). doi:10.1016/B978-0-12-801498-1.00058-9. 470. Raoult, D. et al. The 1.2-megabase genome sequence of Mimivirus. Science (New York, N.Y.) 306, 1344–1350 (2004). 471. Campillo-Balderas, J. A., Lazcano, A. &amp; Becerra, A. Viral genome size distribution does not correlate with the antiquity of the host lineages. Frontiers in Ecology and Evolution 3, (2015). 472. Cann, A. J. Virus Structure. in 1–9 (John Wiley &amp; Sons, Ltd, 2015). doi:10.1002/9780470015902.a0000439.pub2. 473. Hladik, F. &amp; McElrath, M. J. Setting the stage: host invasion by HIV. Nature Reviews Immunology 8, 447–457 (2008). 474. Shaw, G. M. &amp; Hunter, E. HIV Transmission. Cold Spring Harbor Perspectives in Medicine 2, a006965 (2012). 475. Weiss, R. A. How does HIV cause AIDS? Science 260, 1273–1279 (1993). 476. Melhuish, A. &amp; Lewthwaite, P. Natural history of HIV and AIDS. Medicine 46, 356–361 (2018). 477. Murray, J. F. et al. Pulmonary complications of the acquired immunodeficiency syndrome. New England Journal of Medicine 310, 1682–1688 (1984). 478. Sampath, S. et al. Pandemics Throughout the History. Cureus 13, (2021). 479. World Health Organization. Global report: UNAIDS report on the global AIDS epidemic 2010. (World Health Organization, 2010). 480. Barré-Sinoussi, F. et al. Isolation of a T-lymphotropic retrovirus from a patient at risk for acquired immune deficiency syndrome (AIDS). Science (New York, N.Y.) 220, 868–871 (1983). 481. Gallo, R. C. et al. Isolation of human T-cell leukemia virus in acquired immune deficiency syndrome (AIDS). Science (New York, N.Y.) 220, 865–867 (1983). 482. Clavel, F. et al. Isolation of a new human retrovirus from west african patients with AIDS. Science 233, 343–346 (1986). 483. Gilbert, P. B. et al. Comparison of HIV-1 and HIV-2 infectivity from a prospective cohort study in Senegal. Statistics in Medicine 22, 573–593 (2003). 484. Loeff, M. F. S. van der et al. Sixteen years of HIV surveillance in a West African research clinic reveals divergent epidemic trends of HIV-1 and HIV-2. International Journal of Epidemiology 35, 1322–1328 (2006). 485. Gao, F. et al. Origin of HIV-1 in the chimpanzee Pan troglodytes troglodytes. Nature 397, 436–441 (1999). 487. Sharp, P. M. &amp; Hahn, B. H. Origins of HIV and the AIDS pandemic. Cold Spring Harbor Perspectives in Medicine: 1, a006841 (2011). 488. Hirsch, V. M., Olmsted, R. A., Murphey-Corb, M., Purcell, R. H. &amp; Johnson, P. R. An African primate lentivirus (SIVsmclosely related to HIV-2. Nature 339, 389–392 (1989). 490. Chen, Z. et al. Genetic characterization of new West African simian immunodeficiency virus SIVsm: geographic clustering of household-derived SIV strains with human immunodeficiency virus type 2 subtypes and genetically diverse viruses from a single feral sooty mangabey troop. Journal of Virology 70, 3617–3627 (1996). 491. Hemelaar, J. The origin and diversity of the HIV-1 pandemic. Trends in Molecular Medicine 18, 182–192 (2012). 492. Worobey, M. et al. Direct evidence of extensive diversity of HIV-1 in Kinshasa by 1960. Nature 455, 661–664 (2008). 494. Faria, N. R. et al. The early spread and epidemic ignition of HIV-1 in human populations. Science (New York, N.Y.) 346, 56–61 (2014). 495. Korber, B. et al. Timing the ancestor of the HIV-1 pandemic strains. Science (New York, N.Y.) 288, 1789–1796 (2000). 496. Rambaut, A., Posada, D., Crandall, K. A. &amp; Holmes, E. C. The causes and consequences of HIV evolution. Nature Reviews Genetics 5, 52–61 (2004). 497. McCutchan, F. E. Global epidemiology of HIV. Journal of Medical Virology 78, S7–S12 (2006). 498. Pérez-Losada, M., Arenas, M., Galán, J. C., Palero, F. &amp; González-Candelas, F. Recombination in viruses: Mechanisms, methods of study, and evolutionary consequences. Infection, Genetics and Evolution 30, 296–307 (2015). 499. Robertson, D. L., Hahn, B. H. &amp; Sharp, P. M. Recombination in AIDS viruses. Journal of Molecular Evolution 40, 249–259 (1995). 500. HIV circulating recombinant forms (CRFs). 501. Lau, K. A. &amp; Wong, J. J. L. Current trends of HIV recombination worldwide. Infectious Disease Reports 5, e4 (2013). 502. Posada, D., Crandall, K. A. &amp; Holmes, E. C. Recombination in evolutionary genomics. Annual Review of Genetics 36, 75–97 (2002). 503. Taylor, B. S., Sobieszczyk, M. E., McCutchan, F. E. &amp; Hammer, S. M. The challenge of HIV-1 subtype diversity. New England Journal of Medicine 358, 1590–1602 (2008). 504. Hemelaar, J., Gouws, E., Ghys, P. D. &amp; Osmanov, S. Global trends in molecular epidemiology of HIV-1 during 20002007. AIDS (London, England) 25, 679–689 (2011). 505. Distribution of all HIV-1 sequences: WORLD. 506. Freed, E. O. HIV-1 Replication. Somatic Cell and Molecular Genetics 26, 13–33 (2001). 507. Ferguson, M. R., Rojo, D. R., Lindern, J. J. von &amp; O’Brien, W. A. HIV-1 replication cycle. Clinics in Laboratory Medicine 22, 611–635 (2002). 508. Gougeon, M. L., Laurent-Crawford, A. G., Hovanessian, A. G. &amp; Montagnier, L. Direct and indirect mechanisms mediating apoptosis during HIV infection: contribution to in vivo CD4 T cell depletion. Seminars in Immunology 5, 187–194 (1993). 509. Vidya Vijayan, K. K., Karthigeyan, K. P., Tripathi, S. P. &amp; Hanna, L. E. Pathophysiology of CD4+ t-cell depletion in HIV-1 and HIV-2 infections. Frontiers in Immunology 8, 580 (2017). 510. Frankel, A. D. &amp; Young, J. A. HIV-1: fifteen proteins and an RNA. Annual Review of Biochemistry 67, 1–25 (1998). 511. Fossen, T. et al. Solution structure of the human immunodeficiency virus type 1 p6 protein *. Journal of Biological Chemistry 280, 42515–42527 (2005). 512. Göttlinger, H. G., Dorfman, T., Sodroski, J. G. &amp; Haseltine, W. A. Effect of mutations affecting the p6 gag protein on human immunodeficiency virus particle release. Proceedings of the National Academy of Sciences 88, 3195–3199 (1991). 513. Huang, M., Orenstein, J. M., Martin, M. A. &amp; Freed, E. O. p6Gag is required for particle production from full-length human immunodeficiency virus type 1 molecular clones expressing protease. Journal of Virology 69, 6810–6818 (1995). 514. Bour, S., Geleziunas, R. &amp; Wainberg, M. A. The human immunodeficiency virus type 1 (HIV-1) CD4 receptor and its central role in promotion of HIV-1 infection. Microbiological Reviews 59, 63–93 (1995). 515. Hernandez, L. D., Hoffman, L. R., Wolfsberg, T. G. &amp; White, J. M. Virus-cell and cell-cell fusion. Annual Review of Cell and Developmental Biology 12, 627–661 (1996). 516. Jones, K. &amp; Peterlin, B. Control of rna initiation and elongation at the hiv-1 promoter. Annual Review of Biochemistry 63, 717–743 (1994). 517. Hope, T. J. Viral RNA export. Chemistry &amp; Biology 4, 335–344 (1997). 518. Mangasarian, A. &amp; Trono, D. The multifaceted role of HIV Nef. Research in Virology 148, 30–33 (1997). 519. Cohen, é. A., Subbramanian, R. A. &amp; Göttlinger, H. G. Role of Auxiliary Proteins in Retroviral Morphogenesis. in (ed. Kräusslich, H.-G.) 219–235 (Springer, 1996). doi:10.1007/978-3-642-80145-7_7. 520. Lamb, R. A. &amp; Pinto, L. H. Do Vpu and Vpr of Human Immunodeficiency Virus Type 1 and NB of Influenza B Virus Have Ion Channel Activities in the Viral Life Cycles? Virology 229, 1–11 (1997). 521. Khan, N. &amp; Geiger, J. D. Role of viral protein u (vpu) in HIV-1 infection and pathogenesis. Viruses 13, 1466 (2021). 522. Emerman, M. HIV-1, Vpr and the cell cycle. Current Biology 6, 1096–1103 (1996). 523. Miller, R. H. Human immunodeficiency virus may encode a novel protein on the genomic DNA plus strand. Science (New York, N.Y.) 239, 1420–1422 (1988). 524. Briquet, S. &amp; Vaquero, C. Immunolocalization Studies of an Antisense Protein in HIV-1-Infected Cells and Viral Particles. Virology 292, 177–184 (2002). 525. Cassan, E., Arigon-Chifolleau, A.-M., Mesnard, J.-M., Gross, A. &amp; Gascuel, O. Concomitant emergence of the antisense protein gene of HIV-1 and of the pandemic. Proceedings of the National Academy of Sciences 113, 11537–11542 (2016). 526. Savoret, J. et al. A pilot study of the humoral response against the AntiSense protein (ASP) in HIV-1-infected patients. Frontiers in Microbiology 11, (2020). 527. Zardecki, C. et al. PDB-101: Educational resources supporting molecular explorations through biology and medicine. Protein Science 31, 129–140 (2022). 528. Eisinger, R. W., Dieffenbach, C. W. &amp; Fauci, A. S. HIV viral load and transmissibility of HIV infection: Undetectable equals untransmittable. JAMA 321, 451–452 (2019). 529. Palella, F. J. et al. Declining morbidity and mortality among patients with advanced human immunodeficiency virus infection. New England Journal of Medicine 338, 853–860 (1998). 530. Forsythe, S. S. et al. Twenty years of antiretroviral therapy for people living with HIV: Global costs, health achievements, economic benefits. Health Affairs 38, 1163–1172 (2019). 531. Fischl, M. A. et al. The efficacy of azidothymidine (AZT) in the treatment of patients with AIDS and AIDS-related complex. New England Journal of Medicine 317, 185–191 (1987). 532. Richman, D. D. Susceptibility to nucleoside analogues of zidovudine-resistant isolates of human immunodeficiency virus. The American Journal of Medicine 88, S8–S10 (1990). 533. Yeo, J. Y., Goh, G.-R., Su, C. T.-T. &amp; Gan, S. K.-E. The Determination of HIV-1 RT Mutation Rate, Its Possible Allosteric Effects, and Its Implications on Drug Resistance. Viruses 12, 297 (2020). 534. Cuevas, J. M., Geller, R., Garijo, R., López-Aldeguer, J. &amp; Sanjuán, R. Extremely High Mutation Rate of HIV-1 In Vivo. PLOS Biology 13, e1002251 (2015). 535. Carvajal-Rodríguez, A., Crandall, K. A. &amp; Posada, D. Recombination favors the evolution of drug resistance in HIV-1 during antiretroviral therapy. Infection, genetics and evolution : journal of molecular epidemiology and evolutionary genetics in infectious diseases 7, 476–483 (2007). 536. Gulick, R. M. et al. Treatment with indinavir, zidovudine, and lamivudine in adults with human immunodeficiency virus infection and prior antiretroviral therapy. The New England Journal of Medicine 337, 734–739 (1997). 537. Wensing, A. M. J., Maarseveen, N. M. van &amp; Nijhuis, M. Fifteen years of HIV Protease Inhibitors: raising the barrier to resistance. Antiviral Research 85, 59–74 (2010). 538. Pedersen, O. S. &amp; Pedersen, E. B. Non-Nucleoside Reverse Transcriptase Inhibitors: The NNRTI Boom. Antiviral Chemistry and Chemotherapy 10, 285–314 (1999). 539. Scarsi, K. K., Havens, J. P., Podany, A. T., Avedissian, S. N. &amp; Fletcher, C. V. HIV-1 Integrase Inhibitors: A Comparative Review of Efficacy and Safety. Drugs 80, 1649–1676 (2020). 540. Fletcher, C. V. Enfuvirtide, a new drug for HIV infection. The Lancet 361, 1577–1578 (2003). 541. Esté, J. A. &amp; Telenti, A. HIV entry inhibitors. The Lancet 370, 81–88 (2007). 542. Kilby, J. M. &amp; Eron, J. J. Novel therapies based on mechanisms of HIV-1 cell entry. New England Journal of Medicine 348, 2228–2238 (2003). 543. Yeni, P. Update on HAART in HIV. Journal of Hepatology 44, S100–S103 (2006). 544. Palmisano, L. &amp; Vella, S. A brief history of antiretroviral therapy of HIV infection: success and challenges. Annali dell’Istituto Superiore Di Sanita 47, 44–48 (2011). 545. Pennings, P. S. HIV drug resistance: problems and perspectives. Infectious Disease Reports 5, e5 (2013). 546. Mehta, S., Moore, R. D. &amp; Graham, N. M. H. Potential factors affecting adherence with HIV therapy. AIDS 11, 16651670 (1997). 547. Miller, N. H. Compliance with treatment regimens in chronic asymptomatic diseases. The American Journal of Medicine 102, 43–49 (1997). 548. Chesney, M. A., Morin, M. &amp; Sherr, L. Adherence to HIV combination therapy. Social Science &amp; Medicine 50, 1599–1605 (2000). 549. Aldir, I., Horta, A. &amp; Serrado, M. Single-tablet regimens in HIV: Does it really make a difference? Current Medical Research and Opinion 30, 89–97 (2014). 550. Grant, R. M. et al. Preexposure chemoprophylaxis for HIV prevention in men who have sex with men. New England Journal of Medicine 363, 2587–2599 (2010). 552. Buchbinder, S. P. &amp; Liu, A. Pre-exposure prophylaxis and the promise of combination prevention approaches. AIDS and behavior 15 Suppl 1, S72–79 (2011). 553. Riddell, J. I., Amico, K. R. &amp; Mayer, K. H. HIV preexposure prophylaxis: A review. JAMA 319, 1261–1268 (2018). 554. EMA. Truvada. (2018). 555. About PrEP | PrEP | HIV basics | HIV/AIDS | CDC. (2022). 556. Zolopa, A. R. The evolution of HIV treatment guidelines: Current state-of-the-art of ART. Antiviral Research 85, 241–244 (2010). 557. World Health Organization. Consolidated guidelines on HIV prevention, testing, treatment, service delivery and monitoring: recommendations for a public health approach. (2021). 558. Ammaranond, P. &amp; Sanguansittianan, S. Mechanism of HIV antiretroviral drugs progress toward drug resistance. Fundamental &amp; Clinical Pharmacology 26, 146–161 (2012). 559. Clavel, F. &amp; Hance, A. J. HIV drug resistance. New England Journal of Medicine 350, 1023–1035 (2004). 560. Sarafianos, S. G. et al. Structure and function of HIV-1 reverse transcriptase: Molecular mechanisms of polymerization and inhibition. Journal of molecular biology 385, 693–713 (2009). 561. Goodsell, D. S., Autin, L. &amp; Olson, A. J. Illustrate: Software for Biomolecular Illustration. Structure (London, England: 1993) 27, 1716–1720.e1 (2019). 562. Esnouf, R. M. et al. Unique features in the structure of the complex between HIV-1 reverse transcriptase and the bis(heteroaryl)piperazine (BHAP) U-90152 explain resistance mutations for this nonnucleoside inhibitor. Proceedings of the National Academy of Sciences of the United States of America 94, 3984–3989 (1997). 563. Hang, J. Q. et al. Activity of the isolated HIV RNase H domain and specific inhibition by N-hydroxyimides. Biochemical and Biophysical Research Communications 317, 321–329 (2004). 564. Klumpp, K. &amp; Mirzadegan, T. Recent progress in the design of small molecule inhibitors of HIV RNase h. Current Pharmaceutical Design 12, 1909–1922 (2006). 565. Menéndez-Arias, L. Mechanisms of resistance to nucleoside analogue inhibitors of HIV-1 reverse transcriptase. Virus Research 134, 124–146 (2008). 566. Sluis-Cremer, N., Arion, D. &amp; Parniak*, M. A. Molecular mechanisms of HIV-1 resistance to nucleoside reverse transcriptase inhibitors (NRTIs). Cellular and Molecular Life Sciences CMLS 57, 1408–1422 (2000). 567. Sarafianos, S. G. et al. Lamivudine (3TC) resistance in HIV-1 reverse transcriptase involves steric hindrance with beta-branched amino acids. Proceedings of the National Academy of Sciences of the United States of America 96, 10027–10032 (1999). 568. Meyer, P. R., Matsuura, S. E., Mian, A. M., So, A. G. &amp; Scott, W. A. A mechanism of AZT resistance: an increase in nucleotide-dependent primer unblocking by mutant HIV-1 reverse transcriptase. Molecular Cell 4, 35–43 (1999). 569. Boyer, P. L., Sarafianos, S. G., Arnold, E. &amp; Hughes, S. H. Selective excision of AZTMP by drug-resistant human immunodeficiency virus reverse transcriptase. Journal of Virology 75, 4832–4842 (2001). 570. Deeks, S. G. Nonnucleoside reverse transcriptase inhibitor resistance. JAIDS Journal of Acquired Immune Deficiency Syndromes 26, S25 (2001). 571. Ren, J. &amp; Stammers, D. K. Structural basis for drug resistance mechanisms for non-nucleoside inhibitors of HIV reverse transcriptase. Virus Research 134, 157–170 (2008). 572. Lloyd, S. B., Kent, S. J. &amp; Winnall, W. R. The high cost of fidelity. AIDS Research and Human Retroviruses 30, 8–16 (2014). 573. Pearl, L. H. &amp; Taylor, W. R. A structural model for the retroviral proteases. Nature 329, 351–354 (1987). 574. Gulnik, S., Erickson, J. W. &amp; Xie, D. HIV protease: Enzyme function and drug resistance. in vol. 58 213–256 (Academic Press, 2000). 575. Silva, A. M., Cachau, R. E., Sham, H. L. &amp; Erickson, J. W. Inhibition and catalytic mechanism of HIV-1 aspartic protease. Journal of Molecular Biology 255, 321–340 (1996). 576. Hornak, V., Okur, A., Rizzo, R. C. &amp; Simmerling, C. HIV-1 protease flaps spontaneously open and reclose in molecular dynamics simulations. Proceedings of the National Academy of Sciences 103, 915–920 (2006). 577. Freedberg, D. I. et al. Rapid structural fluctuations of the free HIV protease flaps in solution: Relationship to crystal structures and comparison with predictions of dynamics calculations. Protein Science : A Publication of the Protein Society 11, 221–232 (2002). 578. Yu, Y. et al. Structural insights into HIV-1 protease flap opening processes and key intermediates. RSC Advances 7, 45121–45128 (2017). 579. Roberts, N. A. et al. Rational design of peptide-based HIV proteinase inhibitors. Science 248, 358–361 (1990). 580. Lv, Z., Chu, Y. &amp; Wang, Y. HIV protease inhibitors: A review of molecular selectivity and toxicity. HIV/AIDS (Auckland, N.Z.) 7, 95–104 (2015). 581. Prabu-Jeyabalan, M., Nalivaika, E. &amp; Schiffer, C. A. Substrate shape determines specificity of recognition for HIV-1 protease: Analysis of crystal structures of six substrate complexes. Structure 10, 369–381 (2002). 582. Prabu-Jeyabalan, M. et al. Substrate envelope and drug resistance: Crystal structure of RO1 in complex with wild-type human immunodeficiency virus type 1 protease. Antimicrobial Agents and Chemotherapy 50, 1518–1521 (2006). 583. Kurt Yilmaz, N., Swanstrom, R. &amp; Schiffer, C. A. Improving Viral Protease Inhibitors to Counter Drug Resistance. Trends in Microbiology 24, 547–557 (2016). 584. Chiu, T. K. &amp; Davies, D. R. Structure and function of HIV-1 integrase. Current Topics in Medicinal Chemistry 4, 965–977 (2004). 585. Esposito, D. &amp; Craigie, R. HIV Integrase Structure and Function. in (eds. Rlaramorosch, K., Murphy, F. A. &amp; Shawn, A. J.) vol. 52 319–333 (Academic Press, 1999). 586. Delelis, O., Carayon, K., Saïb, A., Deprez, E. &amp; Mouscadet, J.-F. Integrase and integration: Biochemical activities of HIV-1 integrase. Retrovirology 5, 114 (2008). 587. Maertens, G. N., Engelman, A. N. &amp; Cherepanov, P. Structure and function of retroviral integrase. Nature Reviews Microbiology 20, 20–34 (2022). 588. Pommier, Y., Johnson, A. A. &amp; Marchand, C. Integrase inhibitors to treat HIV/Aids. Nature Reviews Drug Discovery 4, 236–248 (2005). 589. Blanco, J.-L., Varghese, V., Rhee, S.-Y., Gatell, J. M. &amp; Shafer, R. W. HIV-1 integrase inhibitor resistance and its clinical implications. The Journal of Infectious Diseases 203, 1204–1214 (2011). 590. Geretti, A. M., Armenia, D. &amp; Ceccherini-Silberstein, F. Emerging patterns and implications of HIV-1 integrase inhibitor resistance. Current Opinion in Infectious Diseases 25, 677686 (2012). 591. Knox, D. C., Anderson, P. L., Harrigan, P. R. &amp; Tan, D. H. S. Multidrug-resistant HIV-1 infection despite preexposure prophylaxis. New England Journal of Medicine 376, 501–502 (2017). 592. Hurt, C. B., Eron, J. J. &amp; Cohen, M. S. Pre-exposure prophylaxis and antiretroviral resistance: HIV prevention at a cost? Clinical Infectious Diseases: An Official Publication of the Infectious Diseases Society of America 53, 1265–1270 (2011). 593. Gibas, K. M., Berg, P. van den, Powell, V. E. &amp; Krakower, D. S. Drug Resistance During HIV Pre-Exposure Prophylaxis. Drugs 79, 609–619 (2019). 594. Mourad, R. et al. A phylotype-based analysis highlights the role of drug-naive HIV-positive individuals in the transmission of antiretroviral resistance in the UK. Aids 29, 1917–1925 (2015). 595. Hué, S. et al. Demonstration of Sustained Drug-Resistant Human Immunodeficiency Virus Type 1 Lineages Circulating among Treatment-Naïve Individuals. Journal of Virology 83, 2645–2654 (2009). 596. Drescher, S. M. et al. Treatment-naive individuals are the major source of transmitted HIV-1 drug resistance in men who have sex with men in the swiss HIV cohort study. Clinical Infectious Diseases 58, 285–294 (2014). 597. Boerma, R. S. et al. High levels of pre-treatment HIV drug resistance and treatment failure in Nigerian children. Journal of the International AIDS Society 19, 21140 (2016). 598. Clutter, D. S., Jordan, M. R., Bertagnolio, S. &amp; Shafer, R. W. HIV-1 drug resistance and resistance testing. Infection, Genetics and Evolution 46, 292–307 (2016). 599. Kühnert, D. et al. Quantifying the fitness cost of HIV-1 drug resistance mutations through phylodynamics. PLOS Pathogens 14, e1006895 (2018). 600. Mesplède, T. et al. Viral fitness cost prevents HIV-1 from evading dolutegravir drug pressure. Retrovirology 10, 22 (2013). 601. Castro, H. et al. Persistence of HIV-1 Transmitted Drug Resistance Mutations. The Journal of Infectious Diseases 208, 1459–1463 (2013). 602. Blassel, L. et al. Drug resistance mutations in HIV: new bioinformatics approaches and challenges. Current Opinion in Virology 51, 56–64 (2021). 603. UK CHIC Steering Committee. The creation of a large UK-based multicentre cohort of HIV-infected individuals: The UK Collaborative HIV Cohort (UK CHIC) Study. HIV Medicine 5, 115–124 (2004). 604. Abeler-Dörner, L. et al. PANGEA-HIV 2: Phylogenetics and networks for generalised epidemics in africa. Current Opinion in HIV and AIDS 14, 173180 (2019). 605. Shafer, R. W. Rationale and Uses of a Public HIV Drug-Resistance Database. The Journal of Infectious Diseases 194, S51–S58 (2006). 606. Kuiken, C., Korber, B. &amp; Shafer, R. W. HIV sequence databases. AIDS reviews 5, 52–61 (2003). 607. Wensing, A. M. et al. 2019 update of the drug resistance mutations in HIV-1. Topics in Antiviral Medicine 27, 111–121 (2019). 608. Clark, S. A., Calef, C. &amp; Mellors, J. W. Mutations in retroviral genes associated with drug resistance. HIV sequence compendium 58158 (2007). 609. Liu, T. F. &amp; Shafer, R. W. Web Resources for HIV Type 1 Genotypic-Resistance Test Interpretation. Clinical Infectious Diseases 42, 1608–1618 (2006). 610. Johnson, V. A. et al. Update of the drug resistance mutations in HIV-1: March 2013. Topics in Antiviral Medicine 21, 6–7 (2016). 611. Villabona-Arenas, C. J. et al. In-depth analysis of HIV-1 drug resistance mutations in HIV-infected individuals failing first-line regimens in West and Central Africa. AIDS 30, 2577 (2016). 612. Shulman, N. S., Bosch, R. J., Mellors, J. W., Albrecht, M. A. &amp; Katzenstein, D. A. Genetic correlates of efavirenz hypersusceptibility. AIDS 18, 17811785 (2004). 613. Miller, M. D. et al. Genotypic and phenotypic predictors of the magnitude of response to tenofovir disoproxil fumarate treatment in antiretroviral-experienced patients. The Journal of Infectious Diseases 189, 837–846 (2004). 614. Brown, B. W. &amp; Russell, K. Methods correcting for multiple testing: operating characteristics. Statistics in Medicine 16, 2511–2528 (1997). 615. Austin, P. C., Mamdani, M. M., Juurlink, D. N. &amp; Hux, J. E. Testing multiple statistical hypotheses resulted in spurious associations: a study of astrological signs and health. Journal of Clinical Epidemiology 59, 964–969 (2006). 616. Hochberg, Y. &amp; Tamhane, A. C. Multiple comparison procedures. (1987). 617. Benjamini, Y. &amp; Hochberg, Y. Controlling the false discovery rate: A practical and powerful approach to multiple testing. Journal of the Royal Statistical Society. Series B (Methodological) 57, 289–300 (1995). 618. Gonzales, M. J. et al. Extended spectrum of HIV-1 reverse transcriptase mutations in patients receiving multiple nucleoside analog inhibitors. AIDS (London, England) 17, 791–799 (2003). 619. Seoighe, C. et al. A model of directional selection applied to the evolution of drug resistance in HIV-1. Molecular Biology and Evolution 24, 1025–1031 (2007). 620. Sham, P. C. &amp; Purcell, S. M. Statistical power and significance testing in large-scale genetic studies. Nature Reviews Genetics 15, 335–346 (2014). 621. Alizon, S. et al. Phylogenetic Approach Reveals That Virus Genotype Largely Determines HIV Set-Point Viral Load. PLOS Pathogens 6, e1001123 (2010). 622. Flynn, W. F. et al. Deep Sequencing of Protease Inhibitor Resistant HIV Patient Isolates Reveals Patterns of Correlated Mutations in Gag and Protease. PLOS Computational Biology 11, e1004249 (2015). 623. Petropoulos, C. J. et al. A novel phenotypic drug susceptibility assay for human immunodeficiency virus type 1. Antimicrobial Agents and Chemotherapy 44, 920–928 (2000). 624. Hertogs, K. et al. A rapid method for simultaneous detection of phenotypic resistance to inhibitors of protease and reverse transcriptase in recombinant human immunodeficiency virus type 1 isolates from patients treated with antiretroviral drugs. Antimicrobial Agents and Chemotherapy 42, 269–276 (1998). 625. Heilek-Snyder, G. &amp; Bean, P. Role of HIV phenotypic assays in the management of HIV infection. American Clinical Laboratory 21, 40–43 (2002). 627. Gartland, M. et al. Susceptibility of global HIV-1 clinical isolates to fostemsavir using the PhenoSense® entry assay. Journal of Antimicrobial Chemotherapy 76, 648–652 (2021). 628. Masquelier, B. et al. Genotypic and phenotypic resistance patterns of human immunodeficiency virus type 1 variants with insertions or deletions in the reverse transcriptase (RT): Multicenter study of patients treated with RT inhibitors. Antimicrobial Agents and Chemotherapy 45, 1836–1842 (2001). 629. Larder, B. A. &amp; Kemp, S. D. Multiple mutations in HIV-1 reverse transcriptase confer high-level resistance to zidovudine (AZT). Science (New York, N.Y.) 246, 1155–1158 (1989). 630. Vreese, K. de et al. Resistance of human immunodeficiency virus type 1 reverse transcriptase to TIBO derivatives induced by site-directed mutagenesis. Virology 188, 900–904 (1992). 631. Tambuyzer, L., Nijs, S., Daems, B., Picchio, G. &amp; Vingerhoets, J. Effect of mutations at position E138 in HIV-1 reverse transcriptase on phenotypic susceptibility and virologic response to etravirine. JAIDS Journal of Acquired Immune Deficiency Syndromes 58, 1822 (2011). 632. Katzenstein, D. A. et al. Phenotypic susceptibility and virological outcome in nucleoside-experienced patients receiving three or four antiretroviral drugs. AIDS 17, 821830 (2003). 633. Blassel, L. et al. Using machine learning and big data to explore the drug resistance landscape in HIV. PLOS Computational Biology 17, e1008873 (2021). 634. Sheik Amamuddy, O., Bishop, N. T. &amp; Tastan Bishop, Ö. Improving fold resistance prediction of HIV-1 against protease and reverse transcriptase inhibitors using artificial neural networks. BMC Bioinformatics 18, 369 (2017). 635. Beerenwinkel, N. et al. Geno2pheno: Interpreting genotypic HIV drug resistance tests. IEEE Intelligent Systems 16, 35–41 (2001). 636. Riemenschneider, M., Hummel, T. &amp; Heider, D. SHIVA - a web application for drug resistance and tropism testing in HIV. BMC Bioinformatics 17, 314 (2016). 637. Beerenwinkel, N. et al. Diversity and complexity of HIV-1 drug resistance: A bioinformatics approach to predicting phenotype from genotype. Proceedings of the National Academy of Sciences 99, 8271–8276 (2002). 638. Heider, D., Senge, R., Cheng, W. &amp; Hüllermeier, E. Multilabel classification for exploiting cross-resistance information in HIV-1 drug resistance prediction. Bioinformatics 29, 1946–1952 (2013). When the anti-HIV therapy starts clinicians use first-line drug regimens, if this treatment is changed due to resistance emergence then the second-line regimen is used.↩︎ This sections build upon a review I participated in during my PhD602↩︎ "],["HIV-paper.html", "Chapter 6 Contribution 2: Inferring mutation roles from sequence alignments using machine learning Abstract Author summary 6.1 Introduction 6.2 Materials and methods 6.3 Results 6.4 Discussion and perspectives Acknowledgments Supporting Information", " Chapter 6 Contribution 2: Inferring mutation roles from sequence alignments using machine learning As we have seen in Sections 5.2.1 and 5.3.3, the HIV pandemic is a widespread threat to public health which can have very serious consequences at the infected individual’s level and at the population scale. Despite many advances in drug development, fundamental research in new drug targets drug resistance mutations arise very quickly in response to antiretroviral therapy. This is especially important in lower income countries where the drug switching options are less numerous and give rise to multi-resistant viruses. In order to manage this global pandemic, surveying the viral infections, finding and categorizing new drug resistance mutations is very important. One such way to do this is to use HIV viral sequences, obtained from patients, and use their alignment as input for statistical and machine learning methods (c.f. Chapter 4 and Section 5.3.4). In this chapter, I will present some work done on studying drug resistance mutations in HIV sequences using a large sequence alignment and machine learning methods. This chapter was written as an article titled: “Using Machine Learning and Big Data to Explore the Drug Resistance Landscape in HIV”. It was originally published in August 2021, in PLoS Computational Biology (doi:10.1371/journal.pcbi.1008873) and is presented as is, without any modification from the published version. The author list, complete with affiliations is given below: Luc Blassel1,2*, Anna Tostevin3, Christian Julian Villabona-Arenas4,5, Martine Peeters6, Stéphane Hué4,5, Olivier Gascuel1,7# On behalf of the UK HIV Drug Resistance Database\\(\\wedge\\) 1 Unité de Bioinformatique Évolutive, Institut Pasteur, Paris, France 2 Sorbonne Université, Collège doctoral, Paris, France 3 Institute for Global Health, UCL, London, UK 4 Department of Infectious Disease Epidemiology, London School of Hygiene and Tropical Medicine, London, UK 5 Centre for Mathematical Modelling of Infectious Diseases, London School of Hygiene and Tropical Medicine, London, UK 6 TransVIHMI (Recherches Translationnelles sur VIH et Maladies Infectieuses), Université de Montpellier, Institut de Recherche pour le Développement, INSERM, Montpellier, France 7 Institut de Systématique, Evolution, Biodiversité (ISYEB), UMR 7205 - Muséum National d’Histoire Naturelle, CNRS, SU, EPHE and UA, Paris, France # Current address: Institut de Systématique, Evolution, Biodiversité (ISYEB), UMR 7205 - Muséum National d’Histoire Naturelle, CNRS, SU, EPHE and UA, Paris, France * luc.blassel@pasteur.fr (LB) * olivier.gascuel@mnhn.fr (OG) \\(\\wedge\\) Membership list can be found in the acknowledgments section Abstract Drug resistance mutations (DRMs) appear in HIV under treatment pressure. DRMs are commonly transmitted to naive patients. The standard approach to reveal new DRMs is to test for significant frequency differences of mutations between treated and naive patients. However, we then consider each mutation individually and cannot hope to study interactions between several mutations. Here, we aim to leverage the ever-growing quantity of high-quality sequence data and machine learning methods to study such interactions (i.e. epistasis), as well as try to find new DRMs. We trained classifiers to discriminate between Reverse Transcriptase Inhibitor (RTI)-experienced and RTI-naive samples on a large HIV-1 reverse transcriptase (RT) sequence dataset from the UK (\\(n\\approx 55,000\\)), using all observed mutations as binary representation features. To assess the robustness of our findings, our classifiers were evaluated on independent data sets, both from the UK and Africa. Important representation features for each classifier were then extracted as potential DRMs. To find novel DRMs, we repeated this process by removing either features or samples associated to known DRMs. When keeping all known resistance signal, we detected sufficiently prevalent known DRMs, thus validating the approach. When removing features corresponding to known DRMs, our classifiers retained some prediction accuracy, and six new mutations significantly associated with resistance were identified. These six mutations have a low genetic barrier, are correlated to known DRMs, and are spatially close to either the RT active site or the regulatory binding pocket. When removing both known DRM features and sequences containing at least one known DRM, our classifiers lose all prediction accuracy. These results likely indicate that all mutations directly conferring resistance have been found, and that our newly discovered DRMs are accessory or compensatory mutations. Moreover, apart from the accessory nature of the relationships we found, we did not find any significant signal of further, more subtle epistasis combining several mutations which individually do not seem to confer any resistance. Author summary Almost all drugs to treat HIV target the Reverse Transcriptase (RT) and Drug resistance mutations (DRMs) appear in HIV under treatment pressure. Resistant strains can be transmitted and limit treatment options at the population level. Classically, multiple statistical testing is used to find DRMs, by comparing virus sequences of treated and naive populations. However, with this method, each mutation is considered individually and we cannot hope to reveal any interaction (epistasis) between them. Here, we used machine learning to discover new DRMs and study potential epistasis effects. We applied this approach to a very large UK dataset comprising \\(\\approx 55,000\\) RT sequences. Results robustness was checked on different UK and African datasets. Six new mutations associated to resistance were found. All six have a low genetic barrier and show high correlations with known DRMs. Moreover, all these mutations are close to either the active site or the regulatory binding pocket of RT. Thus, they are good candidates for further wet experiments to establish their role in drug resistance. Importantly, our results indicate that epistasis seems to be limited to the classical scheme where primary DRMs confer resistance and associated mutations modulate the strength of the resistance and/or compensate for the fitness cost induced by DRMs. 6.1 Introduction Drug resistance mutations (DRMs) arise in Human Immunodeficiency Virus-1 (HIV-1) due to antiretroviral treatment pressure, leading to viral rebound and treatment failure639,640. Furthermore, drug-resistant HIV strains can be transmitted to treatment-naive individuals and further spread throughout the population over time594,595,641. These transmitted resistant variants limit baseline treatment options and have clinical and public health implications worldwide. Almost all drugs to treat HIV target the reverse transcriptase (RT), encoded by the pol gene. Lists of DRMs are regularly compiled and updated by experts in the field, based on genotype analyses and phenotypic resistance tests or clinical outcome in patients on ART642–644. However, with the developement of new antiretroviral drugs that target RT but also other regions of the pol gene like protease or integrase, and the use of anti-retrovirals in high risk populations by pre-exposure prophylaxis (PREP), it is important to further our understanding of HIV polymorphisms and notably the interactions between mutations and epistatic effects. Among known DRMs, some mutations, such as M184V, directly confer resistance to antiretrovirals, more precisely the commonly used NRTI, 3TC (lamivudine) and FTC (emtricitabine), and are called primary or major drug resistance mutations, while some mutations like E40F have an accessory role and increases drug resistance when appearing alongside primary DRMs. Moreover, some mutations like S68G seem to have a compensatory role, but are not known to confer any resistance nor modulate resistance induced by primary DRMs. All of these mutations might have different functions in the virus, but they are all known to be associated with drug resistance phenomena. Therefore, during the rest of this article we will refer to all of these known mutations as resistance associated mutations (RAMs), rather than DRMs which is too specific, and our goal will be to search for new RAMs and study the interactions between known RAMs and the new ones. Classically, new RAMs have been found using statistical testing and large multiple sequence alignments (MSA) of the studied protein611,645. Tests are performed for mutations of interest on a given MSA to check if they are associated with the treatment status and outcome of the individual the viral sequences were sampled from. The test significance is corrected for multiple testing as all mutations associated to every MSA position is virtually a resistance mutation and tested. After this preliminary statistical search, the selected mutations are scrutinized to remove the effects of phylogenetic correlation (i.e. typically counting two sequences which are identical or closely related due to transmission rather than independent acquisition twice646) and check that the same mutation occurred several times in different subtypes and populations being treated with the same drug. Then, these mutations can be further experimentally tested in vitro or in vivo to validate phenotypic resistance. This method has worked well, but by design it is not ideal for studying the effect of several mutations at once, since if we have to test all couples or triplets of mutations, we quickly lose statistical power when correcting for multiple testing620, due to the large number of tests to perform. Moreover, phylogenetic correlation is again a critical issue with such an approach. Machine learning has been extensively used to predict resistance to antiretrovirals from sequence data. There are two main approaches to predicting resistance from sequence data. Regression, where machine learning models are trained to predict the value of a drug resistance indicator, typically \\(IC_{50}\\) fold change in response to a given drug647 or other indicators from phenotypic resistance assays such as PhenoSense648. Many methods have been used to predict a resistance level: Support Vector Machines (SVMs)649, k-Nearest Neighbors (KNN) and Random Forests (RFs)650, and more recently Artificial Neural Networks (ANNs)634,651. Alternatively, this task has also been approached as a classification problem. Given a certain threshold on a phenotypic resistance measure, sequences are given a label of \"resistant\" or \"susceptible\" to a certain drug. Machine learning classifiers are then trained to predict that label. For this task, SVMs and decision trees have been used635,652, ensemble classifier chains638,653 and also ANNs654. Most recently Steiner et al.329 have used Deep Learning Architectures to predict resistance status (i.e. classification) from sequence data. Since phenotypic assays are more complicated and costly to perform than simple genotyping, there is a limited number of sequences paired with a resistance level. This is the main limitation of these studies since machine learning methods typically benefit from a large amount of training data. This is especially true for deep neural networks which can need hundreds of thousands of training samples for certain tasks and architectures. However, despite this limitation, approaches proposed in these studies seem to have fairly good predictive accuracy. It is important to note that all of these studies aim to predict if a given sequence is resistant or not to a given drug, they do not aim to find new potential RAMs. Although Steiner et al.329 have checked that known DRM positions are captured by their models and found several positions potentially associated to resistance, it is not the main goal of their method. It is accepted in machine learning that there is a trade-off between model accuracy and model interpretability. In these previous studies the goal was to make the most accurate predictions possible, using complex models such as SVMs and ANNs, therefore sacrificing interpretability. Here, we have a different approach, using simpler models that might be less accurate but whose predictions we can understand and interpret. We train these models to discriminate RTI-naive from RTI-experienced sequences. Without the need for phenotypic data, we are able to use much larger HIV-1 RT sequence datasets from the UK (\\(n\\approx55,000\\)) (http://www.hivrdb.org.uk/) and Africa (\\(n\\approx4,000\\))611. By using interpretable models, we can extract mutations that are important for determining if a sequence is treated or not and potentially find new mutations potentially associated to resistance. Furthermore, we aim to detect associations between mutations and their effect on antiretroviral resistance in order to study potential underlying epistasis. The African and UK datasets are very different both from genetic and treatment history standpoints, therefore training classifiers on the UK dataset and testing them on the African one, should guarantee the robustness of our findings and greatly alleviate phylogenetic correlation effects. In the following sections, we first describe the data then the methods used. Our results include the assessment of the performance of our classifiers even when trained on data devoid of any known resistance-associated signal; as well as a description of the main features (prevalence and correlation to known mutations, genetic barrier and structural analysis) of six potentially resistance associated mutations, newly discovered thanks to our approach. These results and perspectives are discussed in the concluding section. 6.2 Materials and methods 6.2.1 Data In this study, we used all the drug resistance mutations that appeared in the Stanford HIV Drug resistance database, both for NRTI (Nucleoside Reverse Transcriptase Inhibitors; https://hivdb.stanford.edu/dr-summary/comments/NRTI/) and NNRTI (Non Nucleoside RTI; https://hivdb.stanford.edu/dr-summary/comments/NNRTI/) as known RAMs. To discover new RAMs, assess their statistical significance and study potential epistatic effects, we used two datasets of HIV-1 RT sequences. A large one (\\(n=55,539\\)) from the UK HIV Drug Resistance Database (http://www.hivrdb.org.uk/) and a smaller (\\(n=3,990\\)) one from 10 different western, eastern and central African countries611. In the UK dataset, sequences from RTI-naive individuals formed the majority class with 41,921 sequences (75%). In the African dataset, both classes were more balanced with 2,316 RTI-naive sequences (58%). In the UK dataset, RTI-naive sequences had at least one known RAM in 25% of cases, most likely due to transmissions to naive patients or undisclosed treatment history, against 48% in RTI-experienced sequences, thus making the discrimination between the RTI-experienced and RTI-naive sequences particularly difficult. In the African dataset this distribution was more contrasted, with only 14% of RTI-naive sequences having at least one known RAM, versus 83% of RTI-experienced sequences. The African dataset was also much more genetically diverse with 24 different subtypes and CRFs compared to the 2 subtypes (B and C) that we retained for this study from the UK cohort. The majority of the sequences from the African dataset were samples from Cameroon (27%), Democratic Republic of Congo (17%), Burundi (15%), Burkina Faso (13%) and Togo (11%). It is important to note that RTI-experienced sequences in both of these datasets can be considered as resistant to treatment. Since the viral load was sufficiently high to allow for sequencing of the virus, we can consider that the ART has failed. However, in some cases this resistance might be caused by non adherence to ART, rather than by the presence of RAMs, therefore adding some noise to the relationship between treatment status and resistance. In addition to differences in size, balance between RTI-naive and experienced classes, and the genetic difference between the UK and African datasets, there are also significant differences resulting from differing treatment strategies. In the UK and other higher income countries, the treatment is often tailored to the individual with genotype testing, which result in specific treatment as well as thorough follow-ups and high treatment adherence. In the African countries of the dataset that we used, the treatment is ZDV/ d4T (NRTI) + 3TC (NRTI) + NVP/EFV (NNRTI) in most cases611, and this treatment is generalized to the affected population, with poorer follow-up and adherence than in the UK. This discrepancy could lead to different mutations arising in both datasets, however since the treatment strategy is a combination of both NRTI and NNRTI drug classes, as in many countries, similar RAMs arise611. Furthermore, there is potentially more uncertainty in the African dataset than in the UK. For example some individuals may have unofficially taken antiretroviral drugs, but still identify themselves as RTI-naive, or report having some form of ART while not having been treated for HIV655. All of this explains the high prevalence of multiple resistance in the African data set: the median number of RAMs in sequences containing at least one RAM is 3 in the African sequences, while it is 1 in UK sequences (Table 6.1). Thus, we can say that African sequences are highly resistant, with possibly different mutations and epistatic effects, compared to their UK counterparts. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-bc4c0e6c{table-layout:auto;width:90%;}.cl-bc452ffc{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-bc4609f4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-bc4609fe{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-bc465008{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc465012{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc46501c{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc46501d{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc46501e{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc465026{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}UKAfricasize55,5393,990RTI naïvewith known RAMs11,429(21%)318(8%)without known RAMs30,492(55%)1,998(50%)RTI experiencedwith known RAMs6,633(12%)1,388(35%)without known RAMs6,985(13%)286(7%)sequences with ≥ 2 known RAMs8,034(14%)1,308(33%)max known RAM number1317Median known RAM number13number of subtypes / CRFs224subtypes / CRFsA0(0%)472(12%)B37,806(68%)64(2%)C17,733(32%)702(18%)CRF02 AG0(0%)1,477(37%) Table 6.1: Summary of the UK and Afican datasets. Percentages are computed with regards to the size of the considered dataset (e.g. 21% of the sequences of the UK dataset are RTI-naive and have at least one known RAM). The median number of RAMs was computed only on sequences that had at least one known RAM. All these differences between the two datasets helped us to assess the generalizability of our method and the robustness of the results. That is to say, if signal extracted from the UK dataset was still relevant on such a different dataset as the African one, we could be fairly reassured in regard to the biological and epidemiological relevance of the observed signal. Sequences in both African and UK datasets were already aligned. In order to avoid overly gappy regions of our alignment we selected only positions 41 to 235 of RT for our analysis. We used the Sierra web service (https://hivdb.stanford.edu/page/webservice/) to get amino acid positions relative to the reference HXB2 HIV genome. This allowed us to determine all the amino acids present at each reference position in both datasets, among which we distinguished the “reference amino acids” for each position, corresponding to the B and C subtype reference sequences obtained from the Los Alamos sequence database (http://www.hiv.lanl.gov/). All the other, non-reference amino acids are named “mutations” in the following, and the set of mutations was explored to reveal new potential RAMs. To train our supervised classification methods382,656,657, the sequence data needed to be encoded to numerical vectors. A common and intuitive way to do so is to create a single feature in the dataset for each position of the sequence to encode. Each amino acid is then assigned an integer value, and an amino acid sequence is represented by a succession of integers corresponding to each amino acid. There is, however, one drawback with this method: by assigning an integer value to amino acids, we transform a categorical variable into an ordinal variable. Any ordering of amino acids is hard to justify and might introduce bias. To avoid this, we represented each sequence by a binary vector using one-hot encoding. For each position in the sequence to be encoded, amino acids corresponding to mutations are mapped to a binary vector denoting its presence or absence in the sequence. For example, at site 184, amino acids M, G, I, L, T and V are present in the UK dataset. After encoding we will have 5 binary features corresponding to the M184G, M184I, M184L, M184T and M184V mutations. We did not encode the reference amino acid M, but only the mutated amino acids. With this method each mutation in the dataset (\\(n=1,318\\)) corresponds to a single feature. Some of these features corresponded to known RAMs (e.g., M184I and M184V) and are named (known) RAM features in the following (\\(n=121\\)). This encoding allows the classifiers to consider specific mutations and potentially link them to resistance. 6.2.2 Classifier training In order to find new potential RAMs, we first followed the conventional multiple testing approach611. We first used Fisher exact tests to identify which of these mutations were significantly associated with anti-retroviral treatment. All the resulting p-values were then corrected for multiple testing using the Bonferroni correction658. Those for which the corrected p-value was \\(≤ 0.05\\) were then considered as significantly associated with treatment and potentially implicated in resistance. This method was complemented by our parallel, machine learning based approach. In order to extract potential RAMs, we trained several classifiers to discriminate between RTI-experienced and RTI-naive sequences represented by the binary vectors described above. This classification task does not need any phenotypic resistance measure, allowing us to use much larger and more readily available datasets than other machine learning based approaches previously mentioned. Once the classifiers were trained, we extracted the most important representation features, which corresponded to potentially resistance-associated mutations (PRAM in short). To this aim we chose three interpretable supervised learning classification methods so as to be able to extract those features: Multinomial naive Bayes (NB), which estimates conditional probabilities of being in the RTI-experienced class given a set of representation features659; the higher (\\(\\approx 1.0\\)) and the lower (\\(\\approx0\\)) conditional probabilities correspond to the most important features. Logistic regression (LR) with L1 regularization (LASSO)382 which assigns weights to each of the features, whose sign denotes the importance to one of the 2 classes, and whose absolute value denotes the weight of this importance. Random Forest (RF) , which has feature importance measures based on the Gini impurity in the decision trees389. Interpretability was the main driver behind our classification method choice, with the conditional probabilities of NB, the weight or LR and the importance values of RF, we can easily extract which mutations are driving the discrimination of RT sequences. This is why we did not choose to use ANNs which could have led to an increase in accuracy at the cost of interpretability351,660,661. Moreover, these three classification methods have the potential to detect epistatic effects. With RF, the discrimination is based on the combination of a few features (i.e. mutations), while with LR the features are weighted positively or negatively, thus making it possible to detect cumulative effects resulting from a large number of mutations, which individually have no discrimination power. Naive Bayes is a very simple approach, generally fairly accurate, and in between the two others in terms of explanatory power657. In order to be able to compare all these approaches in a common framework, we devised a very simple classifier out of the results of the Fisher exact tests. This \"Fisher classifier\" (FC) predicts a sequence as RTI-experienced if it has at least one of the mutations significantly associated to treatment. In this way, we were able to compute metrics for all classification methods and compare their performance. It is important to note that in all of these approaches we chose to discriminate RTI-naive from RTI-experienced sequences, regardless of the type of RTI received. One of the reasons is that we did not have detailed enough treatment history for sequences in the UK and African datasets. Moreover, even without segmenting by treatment type, the size of the training set and the power of our classification methods were both high enough to be able to detect all kinds of resistance associated mutations. We shall see (Result section) that we were able to determine the likely treatment involved by further examining the important extracted features and comparing them to known RAMs. Furthermore, since the treatment strategies are so different between the UK and African sequences, training on sequences having received different treatments should increase the robustness of our classifiers and the relevance of the mutations selected as potentially associated to resistance. To avoid phylogenetic confounding factors (e.g. transmitted mutations within a specific country or region), and avoid finding mutations potentially specific to a given subtype, we split the training and testing sets by HIV-1 M subtype. This resulted in training a set of classifiers on all subtype B sequences of the UK dataset and testing them on subtype C sequences from the UK dataset, training another set of classifiers on the subtype C sequences of the UK dataset and testing on the subtype B sequences from the UK dataset, as well as training a final set of classifiers on the whole UK dataset, but testing it on the smaller African dataset with a completely different phylogenetic makeup and treatment context611. Furthermore, in order to identify novel RAMs and study the behavior of the classifiers, we repeated this training scheme on both datasets, each time removing resistance-associated signal incrementally: first by removing all representation features corresponding to known RAMs from the dataset, and second by removing all sequences that had at least one known RAM. This resulted in each type of classifier being trained and tested 9 times, on radically different sets to ensure the interpretability and robustness of the results (see Table 6.2). .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-bc79b786{table-layout:auto;width:90%;}.cl-bc737db2{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-bc739270{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-bc73e5e0{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc73e5ea{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-bc73e5f4{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}Signal removal levelTrained onTested onNoneUKsubtype B(37806)UKsubtype C(17733)UKsubtype C(17733)UKsubtype B(37806)UKsubtypes B &amp; C(55539)Africaall subtypes(3990)Known RAM features removedUKsubtype B(37806)UKsubtype C(17733)UKsubtype C(17733)UKsubtype B(37806)UKsubtypes B &amp; C(55539)Africaall subtypes(3990)Known RAM features sequences with ≥1 known RAM removedUKsubtype B(24422)UKsubtype C(13055)UKsubtype C(13055)UKsubtype B(24422)UKsubtypes B &amp; C(37477)Africaall subtypes(2284) Table 6.2: All training and testing datasets used during this study. The number of sequences in each dataset is shown in parentheses 6.2.3 Measuring classifier performance To compare the performance of our classifiers we used balanced accuracy376, which is the average of accuracies (i.e. percentages of well-classified sequences) computed separately on each class of the test set. This score takes into account, and corrects for, the imbalance between RTI-naive and RTI-experienced samples, which would lead to a classifier always predicting a sequence as RTI-naive getting a classical accuracy score of up to 77% (i.e. the frequency of naive sequences in the UK dataset). We also computed the adjusted mutual information (AMI) between predicted and true sequence labels, which is a normalized version of MI allowing comparison of performance on differently sized test sets149. Additionally, mutual information (MI) was used to compute p-values and assess the significance of the classifiers’ predictive power. The probabilistic performance of the classifiers was evaluated using an adapted Brier score656 more suited to binary classification, which is the mean squared difference between the actual class (coded by 1 and 0 for the RTI-experienced and RTI-naive samples respectively) and the predicted probability of being RTI-experienced. This approach refines the standard accuracy measure by rewarding methods that well approximate the true status of the sample (eg. predicting a probability of 0.9 while the true status is 1); conversly, binary methods (predicting 0 or 1, but no probabilities) will be penalized if they are often wrong. The Brier approach thus assigns better scores to methods that recognize their ignorance than to methods producing random predictions. 6.3 Results 6.3.1 Classifier performance &amp; interpretation As can be seen in Fig 6.1A and 6.1B, when all RAM features and sequences were kept in the training and testing sets, classifiers had good prediction accuracy, with the machine learning classifiers slightly outperforming the “Fisher” classifier. When removing RAM features from the training and testing sets, the classifiers retained a significant prediction accuracy, especially with the African data set and its multiple RAMs that are observed in a large number of sequences (but removed in this experiment). In this configuration the ML classifiers had a similar performance to the “Fisher” classifier, except for the random forest that is slightly less accurate, likely due to overfitting. Also, when removing sequences that had known RAMs, every classifier lost all prediction accuracy, and none could distinguish RTI-naive from RTI-experienced sequences. Regarding the Brier sore, we see the advantage of the machine learning classifiers over the “Fisher” classifier, which is worse than random predictions when known RAMs are removed. The ability of machine learning classifiers to quantify the resistance status should be an asset for many applications. Figure 6.1: Classifier Performance on UK and African datasets. NB: naive Bayes, LR: Logistic Regression with Lasso regularization, RF: Random Forest, FC: Fisher Classifier, RD: Agnostic random probabilistic classifier (this classifier predicts, as the probability of a sample belonging to a class, the frequency of that class in the training data). A) Adjusted mutual information (higher is better) between ground truth and predictions by classifiers trained on dataset with all features (blue), without features corresponding to known RAMs (orange) and without RAM features and without sequences that have at least 1 known RAM (green). Hatching indicates the training set on which a classifier was trained and the testing set on which the performance was measured. The expected value for a null classifier is 0, and 1 for a perfect classifier and a * denotes that the p-value derived from mutual information is \\(\\leq 0.05\\). For example when trained with all features all the classifiers have a significative MI. Conversly when removing RAM features and RAM sequences none of the classifiers have a significative MI and only LR trained on the entirety of the UK dataset has an AMI \\(&gt;10^{-3}\\) B) Balanced Accuracy score, i.e. average of accuracies per-class (higher is better) for the same classifiers as in a). The red line at \\(y=0.5\\) is the expected balanced accuracy for a null classifier that only predicts the majority class as well as a random uniform (i.e. 50/50) classifier. C) Brier score, which is the mean squared difference between the sample’s experience to RTI and the predicted probability of being RTI experienced (lower is better), for the same classifiers as in A) and B). The fact that classifiers retained prediction accuracy after removing known RAM corresponding features suggests that there was some residual, unknown resistance-associated signal in the data. The fact that this same power was non-existent when removing the known RAM-containing sequences from the training and testing sets, indicates that this residual signal was contained in these already mutated sequences. This suggests that the mutations that are found in the RAM removed experiment (see list below) are most likely accessory mutations that accompany known RAMs. This also suggests that all primary DRMs (i.e., that directly confer antiretroviral resistance) have been identified, which is reassuring from a public health perspective. The performance discrepancy between the UK and African test sets can be explained by several factors. Firstly, African sequences that have known RAMs are more likely to have multiple RAMs, and thus more (known and unknown) resistance-associated features than their UK counterparts (c.f. Table 6.1). This means that resistant African sequences are easier to detect even when removing known RAMs. Secondly, RTI-naive sequences in the UK test sets are more likely to have known RAMs than their African counterparts (c.f. Table 6.1) and therefore more companion mutations. This means that the RTI-naive sequences in the UK test set are more likely to be misclassified as RTI-experienced than in the African test set. 6.3.2 Additional classification results The fact that, when looking at classifiers trained without known RAMs , “Fisher” classifiers perform as well as the machine learning ones, leads us to believe that there is little interaction between mutations that would explain resistance better than taking each mutation separately. It is therefore likely that the kind of epistatic phenomena we were looking for, combining several mutations that do not induce any resistance when taken separately, do not come into play here. We are in a classical scheme where primary DRMs confer resistance and associated mutations reinforce the strength of the resistance and/or compensate for the fitness cost induced by primary DRMs. It is important to remember that in the previous section we were trying (as usual, e.g. see611) to find novel mutations associated with resistance by discriminating RTI-naive from RTI-experienced sequences, both with the statistical tests and the classifiers. However, this is intrinsically biased and noisy. Indeed, a RTI-naive sequence is not necessarily susceptible to RTIs as a resistant strain could have been transmitted to the individual. Conversely, an RTI-experienced sequence may not be resistant to treatment, due to poor ART adherence for example. We must therefore keep in mind that the noisy nature of the relationship between resistance and treatment status is partly responsible for the lower performance of classifiers trained on the UK sequences with reduced signal. Moreover, as all the additional resistance signal we detected is associated to the sequences having at least one known RAM (see above), we performed another analysis trying to discriminate between the sequences having at least one known RAM and those having none. The goal was to check that the mutations we discovered by discriminating RTI-experienced from RTI-naive samples, are truly accessory and compensatory mutations. As can be seen in Fig 6.2A and 6.2B, the classifiers trained to discriminate sequences that have at least one known RAM from those that have none, on datasets from which all features corresponding to known RAMs were removed, perform much better than classifiers trained to discriminate RTI-experienced from RTI-naive sequences. This increase in performance is especially visible for classifiers tested on UK sequences (more difficult to classify than the African ones, see above), with an AMI often almost one order of magnitude higher for the known-RAM presence/absence classification task. This further reinforces our belief that all there is a fairly strong residual resistance-signal in sequences that contain known RAMs, due to new accessory and compensatory mutations identified by our classifiers and Fisher tests. As a side note, Logistic regression (LR) consistently outperforms other classifiers, a tendency already observed in Fig 6.1. Figure 6.2: Discrimination between sequences having at least one RAM, and those having none on sequences with training features corresponding to known RAMs removed. NB: naive Bayes, LR: Logistic Regression with Lasso regularization, RF: Random Forest, FC: Fisher Classifier. A) Adjusted mutual information (higher is better) for classifiers trained without features corresponding to known RAMs. The classifiers are either trained to discriminate RTI-naive from RTI-experienced sequences (blue), or sequences with at least one known RAM from sequences that have none (orange). Hatching and braced annotations indicate the training and testing sets resulting in a given performance measure. B) Balanced accuracy, i.e. average of accuracies per-class for the same classifiers as in A) (higher is better). The red line at \\(y=0.5\\) is the expected value for a classifier only predicting the majority class as well as a random uniform (50/50) classifier. 6.3.3 Identifying new mutations from classifiers We assessed the importance of each mutation in the learned internal model of all the classifiers, in the setting where all known RAMs have been removed from the training dataset. For the Fisher classifier, we used one minus the p-value of the exact Fisher test as the importance value, therefore the more significantly associated mutations have the higher importance value and were ranked first. For a given classification task, we ranked each mutation according to the appropriate importance value for each classifier (see above), trained on the B or C subtypes, with the highest importance value having a rank of 0. We then computed the average rank for each mutation and each classification task (RTI-naive/RTI-experienced and RAM present/RAM absent). This gave us, for each classification task, a ranking of mutations potentially associated with resistance that took into account the importance given to this new mutation by each classifier trained on this task. Mutations that were in the 10 most important mutations for both of the classification tasks were considered of interest. Based on these criteria we selected the following potentially resistance-associated mutations (w.r.t. the HXB2 reference genome): L228R, L228H, E203K, D218E, I135L and H208Y. These mutations are referred to as “new mutations” in the rest of this study. To check the epistatic nature of these selected mutations we computed the relative risk \\(RR(new, X)\\) between a new mutation and a binary character \\(X\\). \\(RR(new,X)\\) was computed from the contingency table between \\(new\\) and \\(X\\) as follows: .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-c31ba482{table-layout:auto;width:40%;}.cl-c2cdb470{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c2cdc2bc{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c2cde5bc{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c2cde5c6{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c2cde5d0{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} nameX presentX absentnew presentABnew absentCD \\[ RR(new,X) = \\frac{A}{A+C} \\div \\frac{B}{B+D} \\] The RR gives us a measure for how over-represented each of our new mutations is in sequences that have the \\(X\\) character compared to those that don’t. To get a general idea of this over-representation, for each new mutation we computed \\(RR(new, treatment)\\) comparing the prevalence of the new mutation in RTI-experienced and RTI-naive sequences. We also computed \\(RR(new, with RAM)\\) comparing the prevalence the new mutation in sequences having at least one known RAM and sequences that have none. Both of these RRs are shown in Table 6.3 for each new mutation. We then computed \\(RR(new, RAM)\\) for each known RAM present in more than 0.1% of UK sequences and the new mutations. In Fig 6.3 we see the RRs for which the lower bound of the 95% confidence interval, computed on 1000 bootstrap samples from the UK dataset, was greater than 4. 6.3.4 Detailed analysis of potentially resistance-associated mutations As can be seen in Table 6.3, all of these new mutations except for I135L, are highly over-represented in RTI-experienced sequences and sequences that already have known RAMs, with lower bounds on the 95% RR CI always greater than 5, and often exceeding 10. When looking at the RRs computed for individual RAMs on the UK dataset (Fig 6.3), this impression is confirmed with very high over-representation of these new mutations potentially associated with resistance in sequences that have a given known RAM, with 95% RR lower CI bounds sometimes greater than 80 (H208Y/L210W and D218E/D67N), and most of the time greater than 10. with the noticeable exception of I135L where only 2 known RAMs give RRs with lower CI bounds greater than 4. The RRs computed on the African dataset (C.1) tell a similar story albeit with smaller RR values due to a smaller number of occurrences of both new mutations and known RAMs. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-c35dda3c{table-layout:auto;width:90%;}.cl-c354b39e{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c354c690{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c354c69a{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-c35523f6{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c355240a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c3552414{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c3552415{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c355241e{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c355241f{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}UKAfricasize55,5393,990RTI naïvewith known RAMs11,429(21%)318(8%)without known RAMs30,492(55%)1,998(50%)RTI experiencedwith known RAMs6,633(12%)1,388(35%)without known RAMs6,985(13%)286(7%)sequences with ≥ 2 known RAMs8,034(14%)1,308(33%)max known RAM number1317Median known RAM number13number of subtypes / CRFs224subtypes / CRFsA0(0%)472(12%)B37,806(68%)64(2%)C17,733(32%)702(18%)CRF02 AG0(0%)1,477(37%) Table 6.3: Analysis of new potential RAMs. Codon distance: For each new mutation we computed the minimum number of nucleotide mutations to go from the wild amino acid codons to those of the mutated amino acid, as well as the average codon distance between both amino acids, weighted by the prevalence of each wild and mutated codon at the given position in the UK dataset. B62: BLOSUM62 similarity values (e.g. D218E = 2, reflecting that E and D are both negatively charged and highly similar). Count: We looked at the number of occurrences of each new potential RAM in the UK dataset and the corresponding prevalence in parentheses. Relative risks: We computed \\(RR(new, treatment)\\) (e.g. L228R is 18.1 times more prevalent in RTI-experienced sequences compared to RTI-naive sequences in the UK dataset). We also computed \\(RR(new, any~RAM)\\) (e.g. L228R is 115.7 times more prevalent in sequences that have at least one known RAM than in sequences that have none in the UK dataset). The 95% confidence intervals shown under each RR were computed with 1000 bootstrap samples of size \\(n=55,000\\) drawn with replacement from the whole UK dataset. p-values: Fisher exact tests were done on the African dataset (to avoid confounding effects due to phylogenetic correlation) to see if each of these new mutations were more prevalent in RTI-experienced sequences. The same metrics were computed for all known RAMs, the median values are shown in the last two lines of this table, as well as the 5th and 95th percentiles which are shown underneath. \\(RR(RAM,any~RAM)\\) values were computed for any RAM except itself to avoid always having infinite ratios. Figure 6.3: Relative risk of the new mutations with regards to known RAMs on the UK dataset. (i.e. the prevalence of the new mutation in sequences with a given known RAM divided by the prevalence of the new mutation in sequences without this RAM). RRs were only computed for mutations (new and RAMs) that appeared in at least 0.1% (=55) sequences. 95% confidence intervals, represented by vertical bars, were computed with 1000 bootstrap samples of UK sequences. Only RRs with a lower CI boundary greater than 4 are shown. The shape and color of the point represents the type of RAM as defined by Stanford’s HIVDB. Blue circle: NRTI, orange square: NNRTI, green diamond: Other. RR values are shown from left to right, by order of decreasing values on the lower bound of the 95% CI. The genetic barrier to resistance for each of these new mutations is quite low, with a minimum of 1 base change for each of them (Table 6.3 ). We also computed the average codon distance (i.e. number of different bases), weighted by the prevalence of wild and mutated codons at the given positions in the UK (Table 6.3 ) and Africa (Table C.5) datasets, and in each case the average codon distance was always close to 1. In other words, at the amino acid level these mutations are expected to be relatively frequent. However, their frequencies are much higher in treated/with-RAM sequences than in naive/without-RAM ones (Table 6.3 ). Moreover, if we look at the BLOSUM62 scores (Table 6.3 ), some of these mutations induce some substantial changes in physicochemical properties, most notably at site 228, which reinforces again the likelihood that these mutations are associated with resistance. These metrics were also computed for all known RAMs (Table 6.3 ). For all these metrics, and the 6 new potential RAMs, values are contained between the 5th and 95th percentiles computed on known RAMs, except for the BLOSUM score of L228H that corresponds to a drastic physicochemical change. To gain more insight on these new mutations we also observed their spatial location on the 3-D HIV-1 RT structure using PyMol662. HIV-1 RT is a heterodimer with two subunits translated from the same sequence with different lengths and 3-D structures. The smaller p51 subunit (440 AAs) has a mainly structural role, while the larger p66 (560 AAs) subunit has the active site at positions 110, 185 and 186. The p66 subunit also has a regulatory pocket behind the active site: the non-nucleoside inhibitor binding pocket (NNIBP) formed of several sites of the p66 subunit as well as site 138 of the p51 subunit. Nucleoside RT Inhibitors (NRTI) are nucleotide analogs and bind in the active site, blocking reverse transcription. Non-Nucleoside RT Inhibitors (NNRTI) bind in the NNIBP, changing the protein conformation and blocking reverse transcription. More details on the structure and function of HIV-1 RT can be found in560. A general view of where the new mutations are situated with regards to the other important sites of HIV-1 RT is shown in Fig 6.4, and is detailed below. Figure 6.4: Structure of HIV-1 RT with highlighted important sites. The p66 subunit is colored dark gray and the p51 subunit white. The active site is highlighted in blue, and the NNIBP is highlighted in yellow. The sites of new mutations are colored in red. 6.3.4.1 L228R / L228H L228R is the most important of these new mutations according to the feature importance ranking done above. This is reflected in the very high over-representation in RTI-experienced sequences and sequences with known RAMs shown in Table 6.3 . When looking at the detailed RRs shown in Fig 6.3, we observe that L228R presents high RR values with mainly NRTI RAMs, but also with NNRTI RAMs such as Y181C and L100I, and this is even more so h for RRs computed on the African dataset (C.1). L228H is very similar in all regards to L228R, however its highest RRs are exclusively with NRTI RAMs. Site 228 of the p66 subunit is located very close to the active site of RT, where NRTIs operate (Figs 6.4 and C.3) which could explain the role that L228R and L228H seem to have in NRTI resistance. However, site 228 of the p66 subunit is also between sites 227 and 229 which are both part of the NNIBP. Furthermore, both L228H and L228R have very low BLOSUM62 score, of -3 and -2 respectively (Table 6.3 ). Arginine (R) and Histidine (H) are both less hydrophobic that Leucine (L), and have positively charged side-chains. This important change in physicochemical properties could explain the role they both seem to have in NRTI resistance. However, while both Arginine and Histidine are larger than Leucine, Arginine is also fairly larger than Histidine, which is aromatic. This difference between both residues might explain the association L228R seems to have with NNRTI resistance that L228H does not have. 6.3.4.2 E203K / H208Y Both E203K and H208Y are highly over-represented in RTI-experienced sequences and sequences with known RAMs. They both have high RR values for NRTI RAMs. Furthermore the most highly valued RAM RRs in Fig 6.3, are very similar for E203K and H208Y. Structurally they are close to each other on an alpha helix which is close to the active site. Both E203K and H208Y have positive, albeit not maximal, BLOSUM62 scores, meaning they are fairly common substitutions. However, these mutations induce some change in physicochemical properties with Tyrosine (Y) being less polar than Histidine (H), and the change from Glutamic Acid (E) to Lysine (K) corresponding to a change from a negatively charged side chain to a positively charged one. All this, combined with their structural proximity and the shared high RR values for single RAMs, suggests a similar role in NRTI resistance. 6.3.4.3 I135L In Table 6.3 and Fig 6.3, we observe that I135L has the lowest RR values of all the new mutations, with CI bounds lower than 2 in Table 6.3’s general RRs. However, it is the most prevalent of the new mutations. If we look at the detailed RRs of Fig 6.3, we see that I135L is significantly over-represented in sequences with NNRTI RAMs, specifically A98G and P225H. Structurally this makes sense: On the p66 subunit, site 135 is on the outside, far from both the active site and the NNIBP. However, site 135 on the p51 subunit is located very close to the NNIBP (Figs 6.3 and C.2). The BLOSUM62 score for this substitution is quite high (Table 6.3), which is expected since both residues are very similar to one another, differing only by the positioning of one methyl group. However, Leucine (L) is less hydrophobic than Isoleucine (I), despite they are still both classified as hydrophobic residues (Table C.5). The proximity between site 135 and the pocket in which NNRTI RAMs bind, as well as the high RR values for these NNRTI RAMs leads us to believe that I135L could play a subtle accessory role in NNRTI resistance, either by enhancing the effect of some NNRTI RAMs (typically, A98G and P225H), or by compensating for loss of fitness. 6.3.4.4 D218E D218E is also highly over-represented in both RTI-experienced sequences and sequences with known RAMs. It has infinite RR values in the African dataset (Table 6.3), because it is quite rare in this dataset, and all of its 25 occurrences are in sequences that have at least one known RAM and are RTI-experienced. In fact, from the UK dataset we can see that D218E has some of the highest RR values for individual RAMs (along with H208Y). The majority of these very high RR values occur for NRTI RAMs. Site 218 on the p66 subunit is quite close to the RT active site, which could explain the role D218E seems to have in NRTI resistance. Aspartic acid (D) and Glutamic acid (E) are very similar amino acids, both acidic with negatively charged side-chains, as reflected in their fairly high BLOSUM62 score, the main difference between both being molecular weight, with E being slightly larger than D. 6.4 Discussion and perspectives Our method has allowed us to identify six mutations that might play a role in drug resistance in HIV. These mutations are significantly over-represented in RTI-experienced sequences, as well as sequences exhibiting at least one other known RAM. The fact that models trained on the UK are still performant on such a different dataset as the African one strongly suggests that the learned classifier models have acquired generalized knowledge on resistance. For all of these new mutations their spatial positioning on HIV-1 RT is consistent with our conclusions, as all were either close to the active site or the regulatory binding pocket. Some of the mutations we have identified as potentially associated with resistance have been mentioned in previous studies. L228R/H have been observed before663 and were suggested to be associated with reduced susceptibility to didanosine664,665. I135L has been observed in sequences with reduced susceptibility to NNRTIs666. H208Y has been associated with NNRTI and NRTI resistance667 and it has been suggested that it has an accessory role in NRTI resistance668. E203K, D218E, L228RH and H208Y have all been mentioned in669 as probably linked to phenotypic resistance to NRTI and NNRTI. However, none of these mutations has been experimentally confirmed as conferring or helping with drug resistance to the best of our knowledge. The fact that we find them again with a big data analysis of highly different sequences and involved statistical selection procedure combining multiple testing and machine learning, and that we have very high significance, clearly indicates their potential role in resistance. Therefore, we believe they are sufficiently linked to drug resistance that they garner a closer inspection either in-vitro or in-vivo to determine the mechanisms that could allow them to play a role in resistance. With our machine classifiers we seem to have found some RAMs of an accessory nature, over-represented in sequences already containing known RAMs. This is a form of epistasis, where the interaction between the main RAM and the accessory RAM is important. However, we did not manage to find subtler forms of epistasis, in our dataset, where two mutations separately have no effect on resistance but have an effect together. This is partly indicated by the fact that there is a limited performance gap between the Fisher exact tests and more sophisticated classifiers, that are able to reveal significant association of mutations, while each individual mutation has low prediction power. However, one advantage of machine learning classifiers, is that they are probabilistic, meaning that they can give more nuanced insights into the nature or resistance level of a given sequence than the classical binary presence/absence of RAMs approach. In this regard logistic regression appears as a method of choice, showing similar or better performance than other classifiers, and an easy interpretation that is facilitated by the lasso regularization which performs a simple feature selection and retains the most important ones. Similar results were already observed on other sequence analysis tasks670. In order to investigate the second form of epistasis further we tested each pair of mutations in the UK dataset (\\(n=867,903\\)) with Fisher exact tests to see if they were linked to treatment status. In order to mitigate the effects of phylogenetic correlation which are sure to have an effect in this type of setting, we tested the pairs that were significantly associated to treatment (\\(n=1,309\\)) again on the African dataset. We also compared these results to the Fisher exact tests executed for each single mutation. We did not find any pair of mutations that was significantly associated, to treatment where neither member were significantly associated individually. Moreover, we only found 3 significantly associated pairs of mutations that did not include at least one known RAM, and they all included one of our newly found potential RAM: L228R + I142V, L228R + F214L and L228H + F214L (see appendix C.6 for details). With therapeutic strategies targeting multiple proteins that are now used, there might be some epistatic effects with other regions of the HIV genome that are targeted by some of the drugs. These potential effects however, lie outside the scope of this study. Because of the lack of detailed treatment history metadata, we did not distinguish mutations arising from NRTIs or NNRTIs. We believe that a large amount of high quality sequence data, along with a sufficiently detailed log of treatments and drugs the sequences were exposed to, could allow us to use our machine-learning approach to find mutations related to specific drugs and thus furthering our knowledge of HIV drug resistance, giving clinicians more tools to manage and help infected patients. Acknowledgments We thank Anna Zhukova, Frédéric Lemoine and Marie Morel for their help and suggestions. We also thank the UK HIV Drug Resistance Database and the UK Collaborative HIV Cohort: Steering committee: David Asboe, Anton Pozniak (Chelsea &amp; Westminster Hospital, London); Patricia Cane (Public Health England, Porton Down); David Chadwick (South Tees Hospitals NHS Trust, Middlesbrough); Duncan Churchill (Brighton and Sussex University Hospitals NHS Trust); Simon Collins (HIV i-Base, London); Valerie Delpech (National Infection Service, Public Health England); Samuel Douthwaite (Guy’s and St. Thomas’ NHS Foundation Trust, London); David Dunn, Kholoud Porter, Anna Tostevin, Oliver Stirrup (Institute for Global Health, UCL); Christophe Fraser (University of Oxford); Anna Maria Geretti (Institute of Infection and Global Health, University of Liverpool); Rory Gunson (Gartnavel General Hospital, Glasgow); Antony Hale (Leeds Teaching Hospitals NHS Trust); Stéphane Hué (London School of Hygiene and Tropical Medicine); Michael Kidd (Public Health England, Birmingham Heartlands Hospital); Linda Lazarus (Expert Advisory Group on AIDS Secretariat, Public Health England); Andrew Leigh-Brown (University of Edinburgh); Tamyo Mbisa (National Infection Service, Public Health England); Nicola Mackie (Imperial NHS Trust, London); Chloe Orkin (Barts Health NHS Trust, London); Eleni Nastouli, Deenan Pillay, Andrew Phillips, Caroline Sabin (University College London, London); Kate Templeton (Royal Infirmary of Edinburgh); Peter Tilston (Manchester Royal Infirmary); Erik Volz (Imperial College London, London); Ian Williams (Mortimer Market Centre, London); Hongyi Zhang (Addenbrooke’s Hospital, Cambridge). Coordinating Center: Institute for Global Health, UCL (David Dunn, Keith Fairbrother, Anna Tostevin, Oliver Stirrup) Centers contributing data: Clinical Microbiology and Public Health Laboratory, Addenbrooke’s Hospital, Cambridge (Justine Dawkins); Guy’s and St Thomas’ NHS Foundation Trust, London (Emma Cunningham, Jane Mullen); PHE – Public Health Laboratory, Birmingham Heartlands Hospital, Birmingham (Michael Kidd); Antiviral Unit, National Infection Service, Public Health England, London (Tamyo Mbisa); Imperial College Health NHS Trust, London (Alison Cox); King’s College Hospital, London (Richard Tandy); Medical Microbiology Laboratory, Leeds Teaching Hospitals NHS Trust (Tracy Fawcett); Specialist Virology Centre, Liverpool (Elaine O’Toole); Department of Clinical Virology, Manchester Royal Infirmary, Manchester (Peter Tilston); Department of Virology, Royal Free Hospital, London (Clare Booth, Ana Garcia-Diaz); Edinburgh Specialist Virology Centre, Royal Infirmary of Edinburgh (Lynne Renwick); Department of Infection &amp; Tropical Medicine, Royal Victoria Infirmary, Newcastle (Matthias L Schmid, Brendan Payne); South Tees Hospitals NHS Trust, Middlesbrough (David Chadwick); Department of Virology, Barts Health NHS Trust, London (Mark Hopkins); Molecular Diagnostic Unit, Imperial College, London (Simon Dustan); University College London Hospitals (Stuart Kirk); West of Scotland Specialist Virology Laboratory, Gartnavel, Glasgow (Rory Gunson, Amanda Bradley-Stewart). Supporting Information Supporting Information can be found in the appendix C References 149. Vinh, N. X., Epps, J. &amp; Bailey, J. Information Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance. Journal of Machine Learning Research 11, 18 (2010). 329. Steiner, M. C., Gibson, K. M. &amp; Crandall, K. A. Drug Resistance Prediction Using Deep Learning Techniques on HIV-1 Sequence Data. Viruses 12, 560 (2020). 351. Hastie, T., Tibshirani, R. &amp; Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition. (Springer Science &amp; Business Media, 2009). 376. Brodersen, K. H., Ong, C. S., Stephan, K. E. &amp; Buhmann, J. M. The Balanced Accuracy and Its Posterior Distribution. in 2010 20th International Conference on Pattern Recognition 3121–3124 (2010). doi:10.1109/ICPR.2010.764. 382. Tibshirani, R. Regression Shrinkage and Selection Via the Lasso. Journal of the Royal Statistical Society: Series B (Methodological) 58, 267–288 (1996). 389. Breiman, L. Random Forests. Machine Learning 45, 5–32 (2001). 560. Sarafianos, S. G. et al. Structure and function of HIV-1 reverse transcriptase: Molecular mechanisms of polymerization and inhibition. Journal of molecular biology 385, 693–713 (2009). 594. Mourad, R. et al. A phylotype-based analysis highlights the role of drug-naive HIV-positive individuals in the transmission of antiretroviral resistance in the UK. Aids 29, 1917–1925 (2015). 595. Hué, S. et al. Demonstration of Sustained Drug-Resistant Human Immunodeficiency Virus Type 1 Lineages Circulating among Treatment-Naïve Individuals. Journal of Virology 83, 2645–2654 (2009). 611. Villabona-Arenas, C. J. et al. In-depth analysis of HIV-1 drug resistance mutations in HIV-infected individuals failing first-line regimens in West and Central Africa. AIDS 30, 2577 (2016). 620. Sham, P. C. &amp; Purcell, S. M. Statistical power and significance testing in large-scale genetic studies. Nature Reviews Genetics 15, 335–346 (2014). 634. Sheik Amamuddy, O., Bishop, N. T. &amp; Tastan Bishop, Ö. Improving fold resistance prediction of HIV-1 against protease and reverse transcriptase inhibitors using artificial neural networks. BMC Bioinformatics 18, 369 (2017). 635. Beerenwinkel, N. et al. Geno2pheno: Interpreting genotypic HIV drug resistance tests. IEEE Intelligent Systems 16, 35–41 (2001). 638. Heider, D., Senge, R., Cheng, W. &amp; Hüllermeier, E. Multilabel classification for exploiting cross-resistance information in HIV-1 drug resistance prediction. Bioinformatics 29, 1946–1952 (2013). 639.Lepri, A. C. et al. The Journal of Infectious Diseases 181, 1143–1147 (2000). 640. Verhofstede, C. et al. Detection of drug resistance mutations as a predictor of subsequent virological failure in patients with HIV-1 viral rebounds of less than 1,000 RNA copies/ml. Journal of Medical Virology 79, 1254–1260 (2007). 641. Zhukova, A., Cutino-Moguel, T., Gascuel, O. &amp; Pillay, D. The Role of Phylogenetics as a Tool to Predict the Spread of Resistance. The Journal of Infectious Diseases 216, S820–S823 (2017). 642. Bennett, D. E. et al. Drug Resistance Mutations for Surveillance of Transmitted HIV-1 Drug-Resistance: 2009 Update. PLOS ONE 4, e4724 (2009). 644. Wensing, A. M. et al. 2017 Update of the Drug Resistance Mutations in HIV-1., 2017 Update of the Drug Resistance Mutations in HIV-1. Topics in antiviral medicine, Topics in Antiviral Medicine 24, 24, 132, 132–133 (2016). 645. Dudoit, S. &amp; Laan, M. J. van der. Multiple Testing Procedures with Applications to Genomics. (Springer Science &amp; Business Media, 2007). 646. Maddison, W. P. &amp; FitzJohn, R. G. The Unsolved Challenge to Phylogenetic Correlation Tests for Categorical Characters. Systematic Biology 64, 127–136 (2015). 647. Lengauer, T. &amp; Sing, T. Bioinformatics-assisted anti-HIV therapy. Nature Reviews Microbiology 4, 790–797 (2006). 648. Zhang, J., Rhee, S.-Y., Taylor, J. &amp; Shafer, R. W. Comparison of the Precision and Sensitivity of the Antivirogram and PhenoSense HIV Drug Susceptibility Assays. JAIDS Journal of Acquired Immune Deficiency Syndromes 38, 439–444 (2005). 649. Beerenwinkel, N. et al. Geno2pheno: Estimating phenotypic drug resistance from HIV-1 genotypes. Nucleic Acids Research 31, 3850–3855 (2003). 650. Shen, C., Yu, X., Harrison, R. W. &amp; Weber, I. T. Automated prediction of HIV drug resistance from genotype data. BMC Bioinformatics 17, 278 (2016). 651. Yu, X., Weber, I. T. &amp; Harrison, R. W. Prediction of HIV drug resistance from genotype with encoded three-dimensional protein structure. BMC Genomics 15, S1 (2014). 652. Araya, S. T. &amp; Hazelhurst, S. Support vector machine prediction of HIV-1 drug resistance using the viral nucleotide patterns. Transactions of the Royal Society of South Africa 64, 62–72 (2009). 653. Riemenschneider, M., Senge, R., Neumann, U., Hüllermeier, E. &amp; Heider, D. Exploiting HIV-1 protease and reverse transcriptase cross-resistance information for improved drug resistance prediction by means of multi-label classification. BioData Mining 9, 10 (2016). 654. Drăghici, S. &amp; Potter, R. B. Predicting HIV drug resistance with neural networks. Bioinformatics 19, 98–107 (2003). 655. Mooney, A. C. et al. Beyond Social Desirability Bias: Investigating Inconsistencies in Self-Reported HIV Testing and Treatment Behaviors Among HIV-Positive Adults in North West Province, South Africa. AIDS and Behavior 22, 2368–2379 (2018). 656. Brier, G. W. Verification of Forecasts Expressed in Terms of Probability. Monthly Weather Review 78, 1–3 (1950). 657. Gascuel, O. et al. Twelve Numerical, Symbolic and Hybrid Supervised Classification Methods. International Journal of Pattern Recognition and Artificial Intelligence 12, 517–571 (1998). 658. Goeman, J. J. &amp; Solari, A. Multiple hypothesis testing in genomics. Statistics in Medicine 33, 1946–1978 (2014). 659. Rennie, J. D., Shih, L., Teevan, J. &amp; Karger, D. R. Tackling the Poor Assumptions of Naive Bayes Text Classifiers. in Proceedings of the 20th international conference on machine learning (ICML-03) 616–623 (2003). 660. Alvarez Melis, D. &amp; Jaakkola, T. Towards Robust Interpretability with Self-Explaining Neural Networks. in Advances in Neural Information Processing Systems 31 (eds. Bengio, S. et al.) 7775–7784 (Curran Associates, Inc., 2018). 661. Zhang, Q., Wu, Y. N. &amp; Zhu, S.-C. Interpretable Convolutional Neural Networks. in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition 8827–8836 (2018). 662. Schrödinger, LLC. The PyMOL molecular graphics system, version 1.8. (2015). 663. Rhee, S.-Y., Liu, T. F., Holmes, S. P. &amp; Shafer, R. W. HIV-1 Subtype B Protease and Reverse Transcriptase Amino Acid Covariation. PLOS Computational Biology 3, e87 (2007). 664. De Luca, A. et al. Improved Interpretation of Genotypic Changes in the HIV-1 Reverse Transcriptase Coding Region That Determine the Virological Response to Didanosine. The Journal of Infectious Diseases 196, 1645–1653 (2007). 665. Marcelin, A.-G. et al. Impact of HIV-1 reverse transcriptase polymorphism at codons 211 and 228 on virological response to didanosine. Antiviral Therapy 8 (2006). 666. Brown, A. J. L. et al. Reduced Susceptibility of Human Immunodeficiency Virus Type 1 (HIV-1) from Patients with Primary HIV Infection to Nonnucleoside Reverse Transcriptase Inhibitors Is Associated with Variation at Novel Amino Acid Sites. Journal of Virology 74, 10269–10273 (2000). 667. Clark, S. A., Shulman, N. S., Bosch, R. J. &amp; Mellors, J. W. Reverse transcriptase mutations 118I, 208Y, and 215Y cause HIV-1 hypersusceptibility to non-nucleoside reverse transcriptase inhibitors. AIDS 20, 981–984 (2006). 668. Nebbia, G., Sabin, C. A., Dunn, D. T. &amp; Geretti, A. M. Emergence of the H208Y mutation in the reverse transcriptase (RT) of HIV-1 in association with nucleoside RT inhibitor therapy. Journal of Antimicrobial Chemotherapy 59, 1013–1016 (2007). 669. Saracino, A. et al. Impact of unreported HIV-1 reverse transcriptase mutations on phenotypic resistance to nucleoside and non-nucleoside inhibitors. Journal of Medical Virology 78, 9–17 (2006). 670. Wu, T. T., Chen, Y. F., Hastie, T., Sobel, E. &amp; Lange, K. Genome-wide association analysis by lasso penalized logistic regression. Bioinformatics 25, 714–721 (2009). "],["learning-alignments-an-interesting-perspective.html", "Chapter 7 Learning alignments, an interesting perspective 7.1 Deep learning and sequences 7.2 Learning pairwise alignment", " Chapter 7 Learning alignments, an interesting perspective 7.1 Deep learning and sequences 7.1.1 Intro to deep learning The perceptron671 &amp; neuron structure (c.f. Figure 7.1: Inputs -&gt; weighted sum -&gt; step activation function -&gt; output By tweaking the weights you can solve linear separation problems Figure 7.1: Computational graph of a perceptron. Here, \\(n\\) inputs are passed into the perceptron where they are summed, weighted by \\(w_1,\\ldots,w_n\\). This sum is then fed through the perceptron’s activation function (here a binary step function) which is the output of the perceptron. Often the sum is implicitely considered part of the activation function. Resurgence in 90s due to Back Prop672 managed by continuous, differentiable activations -&gt; gradient based training procedures!: Sigmoid Tanh Relu (has some nice convergence properties673 and the MLP (c.f. Figure 7.2) which is versatile (non linear problems!) and could now be trained efficiently674 Turns out they’re universal function approximators675–677 ! Figure 7.2: Computational graph of a multilayer perceptron. This MLP, also called feedforward neural network, has \\(n\\) inputs represented as the input layer, 2 hidden layers of 3 neurons each and an output layer of 2 neurons (e.g. suitable to binary classification). It is fully connected meaning that each node of a given layer is used as input for every neuron of the following layer. Each edge in this graph is paired to a weight, these are the tunable parameters during the training process. Then came convolution neural networks, explosion in computer vision (Le cun678,679) but also other tasks (steiner329, subcellular localization348, epidemiological parameters680, etc…). an input feature is represented as a weighted linear combination of its neighbors, very interesting you start to inculde “context” in networks. Recently super deep network with billions of params, reaching state of the art in many tasks: image recognition with deep CNNs like alexnet681 or resnet682 translation with RNNs683 and later Transformers684 (more on that below) protein folding with alphafold-2136 7.1.2 Learned sequence embeddings An area that in which deep learning has proved very useful is creating relevant learned embeddings, idea to capture some context with powerful non-linearity. (Variational) Auto-encoders: Bottlneck in deep neural neck, task is to predict input. Add noise in the hidden layers -&gt; remove noise or regularize to have smooth latent space and get embeddings Used for ancestral sequence reconstruction685 and estimating evolutionary distances358 VAEs used for sequence design as well686,687 NLP: From the field of natural language processing where very high dimensionality (470,000 words in the Merriam-Webster English dictionary688, so naive one hot is out of the question), we need other ways to transform words into sequences. Method of pre-training embedding methods Word2Vec derivatives: word2Vec689,690, take in a large corpus of text and learns a vector space from it. Then each word in the corpus can be assigned a vector, constraints mean that similar words have similar vectors (i.e. low distance in the vector space). And that the embeddings make sense grammatically (e.g. of the Paper \\(vec(Madrid) - vec(Spain)\\) should be close to \\(vec(Paris)\\) in the learned space. Context of a word = window of \\(k\\) words centered around it The model is a neural network and the hidden layer corresponds to the embedding (similar to auto-encoders) 2 ways to train it691: CBOW (continuous bag of words) = predict word from context skip-gram = predict context from word dna2vec692 Used to predict methylation sites693 seq2vec694 BioVec/ProtVec/GeneVec695 Seq2vec and ProtVec both used in classification696 Transformers / NN-based language models: Also from NLP, more recent development, Some have seen a lot of success like BERT697 and GPT-3698 Based on the very popular Transformer architecture684, with attention maps. Embed features as a linear weighted sum of other features (learn weights). Allows for long range dependencies to be captured efficiently LLMs trained with MLM Replaced methods based on RNNs / LSTMs which have trouble capturing long range dependencies699. protein language models have been developed from this with the same idea. ProGen700 and ProGen2701 ProtBERT369 DNABert702 They have interesting properties703: Intuitively learn structure of proteins704–706 Protein function707 Learn mutational effects708 Evolutionary characteristics709 Even used to generate relevant protein sequences700 Even when trained on DNA, they learn variant effects710 Include information from MSA directly in embedding711: transform aligned sequence in to tokens -&gt; use ALBERT to embed tokens MSA Transformer712 that extends attention to include aligned residues from an input MSA as well. Similarly: learn on profiles derived from MSAs713 as a pre-training task for protein language models Learn a protein structure model (potts model) directly on the MSA with a mechanism similar to attention714 Transformer used subreads aligned to CCS + sequencer info to polish HiFi reads715 EvoFormer from Alphafold2136 also takes MSAs as inputs to predict protein contacts (and is trained end-to-end) Powerful but hard to interpret what the model actually learns. i.e. “black box” but some work is being done to interpret attention maps716 7.2 Learning pairwise alignment 7.2.1 Predicting a substitution matrix One approach is to learn a substitution matrix (specific position/position scoring matrix) and plug it in a differentiable SW or NW algorithm (for end-to-end learning): SAdLSA717 sequences are encoded as PSI blast profiles Fed through a deep CNN predict a scoring matrix No differentiable alignment algorithm -&gt; cross entropy between alignment and structural alignment. DeepBLAST718 Embed sequences with LSTM-based language model (trained on PFAM) predict substitution/gap score differentiable NW (not to learn parameters but only to backpropagate the error) DEDAL719 2 seqs are embedded with encoder-only transformer Trained on TPUs with a fast differentiable algo (SW ?) Training set: parwise alignments extracted from PFAM predicts substitution, gap open and extend scoring matrices (position per position) improves alignment for remote homologies The Learned Alignement module720 Learns a “context specific scoring matrix”, i.e. a 20x20 matrix for a window around a given position. Differentiable SW Uses convolutional NN Learns an “MSA”, actually outputs all to one pairwise alignments. Used to as plugin to alphafold2 and improved some metrics Prediction of PSSM with RNN + LSTM721 , not directly used on alignment but structure prediction. 7.2.2 predicting an alignment BetaAlign722 Unaligned sequences = a “language” Aligned sequences = another “language” So use transformers to translate one into the other (tried several ways to represent these “languages”) Tested with both DNA and protein limitations: length of sequences Training / testing set Another direction could be to predict the state from 2 residues (like a PSSM but directly match/indel). To counter the space limitations (i.e. sequence length limitations) induced by attention, other types of transformers used: with linear scale attention maps not quadratic723 single layer attention or factored attention724 which lowers the number of parameters to estimate but keeps relevant information. This is not a problem limited to bioinformatics, other fields have tried to come up with solutions: adaptive attention span725 Long-Short range attention726 sparse transformers727,728 Reformer replace dot product to reduce memory from quadratic to linear729 For learning DNA alignment several challenges: longer sequences less information in a single residue than a single nucleotide In mapping size discrepancy between sequences. 7.2.3 Learning seeds Some work has been done in learning seeding procedures Learn index structures on a specific reference (not necessarily DL), although fairly recent developments already thought of in 2018730: BWA-MEME731 predicts the position in a suffix array, lowering query time and no need to compute the whole suffix array Sapling732 same thing LISA733 predict position in FM-index DeepMinimizer734: Train a neural network to select minimizers Results in a better density, seeds are spread out evenly accross sequences Select candidate alignment sites in mRNA-miRNA pairs with DL: TargetNet735 Final note, we could also learn a pre-processing function as in Chapter 3 in an end to end fashion: either by learning the connections in MSRs or by learning transformations with sequence to sequence models (like transformers). This is still a little abstract and would need a differentiable read mapping algo for end-to-end learning (SW is possible but seeding -&gt; deepminimizer ?). References 136. Jumper, J. et al. Highly accurate protein structure prediction with AlphaFold. Nature 596, 583–589 (2021). 329. Steiner, M. C., Gibson, K. M. &amp; Crandall, K. A. Drug Resistance Prediction Using Deep Learning Techniques on HIV-1 Sequence Data. Viruses 12, 560 (2020). 348. Wei, L., Ding, Y., Su, R., Tang, J. &amp; Zou, Q. Prediction of human protein subcellular localization using deep learning. Journal of Parallel and Distributed Computing 117, 212–217 (2018). 358. Corso, G. et al. Neural distance embeddings for biological sequences. in vol. 34 1853918551 (Curran Associates, Inc., 2021). 369. Elnaggar, A. et al. ProtTrans: Towards cracking the language of life’s code through self-supervised deep learning and high performance computing. doi:10.48550/arXiv.2007.06225. 671. Rosenblatt, F. The perceptron: A probabilistic model for information storage and organization in the brain. Psychological Review 65, 386–408 (1958). 672. Rumelhart, D. E., Hinton, G. E. &amp; Williams, R. J. Learning representations by back-propagating errors. Nature 323, 533–536 (1986). 673. Li, Y. &amp; Yuan, Y. Convergence analysis of two-layer neural networks with ReLU activation. in vol. 30 (Curran Associates, Inc., 2017). 674. Murtagh, F. Multilayer perceptrons for classification and regression. Neurocomputing 2, 183–197 (1991). 675. Cybenko, G. Approximation by superpositions of a sigmoidal function. Mathematics of Control, Signals and Systems 2, 303–314 (1989). 677. Hornik, K. Approximation capabilities of multilayer feedforward networks. Neural Networks 4, 251–257 (1991). 678. LeCun, Y. et al. Backpropagation applied to handwritten zip code recognition. Neural Computation 1, 541–551 (1989). 679. Lecun, Y., Bottou, L., Bengio, Y. &amp; Haffner, P. Gradient-based learning applied to document recognition. Proceedings of the IEEE 86, 2278–2324 (1998). 680. Voznica, J. et al. Deep learning from phylogenies to uncover the epidemiological dynamics of outbreaks. Nature Communications 13, 3896 (2022). 681. Krizhevsky, A., Sutskever, I. &amp; Hinton, G. E. ImageNet classification with deep convolutional neural networks. Communications of the ACM 60, 8490 (2017). 682. He, K., Zhang, X., Ren, S. &amp; Sun, J. Proceedings of the IEEE conference on computer vision and pattern recognition. in 770–778 (2016). 683. Bahdanau, D., Cho, K. &amp; Bengio, Y. Neural machine translation by jointly learning to align and translate. doi:10.48550/arXiv.1409.0473. 684. Vaswani, A. et al. Attention is all you need. in vol. 30 (Curran Associates, Inc., 2017). 685. Moreta, L. S. et al. International Conference on Learning Representations. in (2022). 686. Wu, Z., Johnston, K. E., Arnold, F. H. &amp; Yang, K. K. Protein sequence design with deep generative models. Current Opinion in Chemical Biology 65, 18–27 (2021). 687. Stanton, S. et al. Accelerating bayesian optimization for biological sequence design with denoising autoencoders. doi:10.48550/arXiv.2203.12742. 688. How many words are there in english? | merriam-webster. 689. Mikolov, T., Chen, K., Corrado, G. &amp; Dean, J. Efficient estimation of word representations in vector space. doi:10.48550/arXiv.1301.3781. 690. Mikolov, T., Sutskever, I., Chen, K., Corrado, G. S. &amp; Dean, J. Distributed representations of words and phrases and their compositionality. in vol. 26 (Curran Associates, Inc., 2013). 691. Goldberg, Y. &amp; Levy, O. word2vec explained: Deriving mikolov et al.’s negative-sampling word-embedding method. doi:10.48550/arXiv.1402.3722. 692. Ng, P. dna2vec: Consistent vector representations of variable-length k-mers. doi:10.48550/arXiv.1701.06279. 693. Liang, Y. et al. Hyb4mC: a hybrid DNA2vec-based model for DNA N4-methylcytosine sites prediction. BMC Bioinformatics 23, 258 (2022). 694. Kimothi, D., Soni, A., Biyani, P. &amp; Hogan, J. M. Distributed representations for biological sequence analysis. doi:10.48550/arXiv.1608.05949. 695. Asgari, E. &amp; Mofrad, M. R. K. Continuous distributed representation of biological sequences for deep proteomics and genomics. PLoS ONE 10, e0141287 (2015). 696. Kimothi, D., Shukla, A., Biyani, P., Anand, S. &amp; Hogan, J. M. 2017 IEEE 18th international workshop on signal processing advances in wireless communications (SPAWC). in 1–5 (2017). doi:10.1109/SPAWC.2017.8227769. 697. Devlin, J., Chang, M.-W., Lee, K. &amp; Toutanova, K. BERT: Pre-training of deep bidirectional transformers for language understanding. doi:10.48550/arXiv.1810.04805. 698. Brown, T. et al. Language models are few-shot learners. in vol. 33 18771901 (Curran Associates, Inc., 2020). 699. Song, B. et al. Pretraining model for biological sequence data. Briefings in Functional Genomics 20, 181–195 (2021). 700. Madani, A. et al. ProGen: Language modeling for protein generation. bioRxiv (2020) doi:10.1101/2020.03.07.982272. 701. Erik Nijkamp, Jeffrey A. Ruffolo, Eli N. Weinstein, Nikhil Naik &amp; Ali Madani. ProGen2: Exploring the boundaries of protein language models. ArXiv (2022) doi:10.48550/arxiv.2206.13517. 702. Ji, Y., Zhou, Z., Liu, H. &amp; Davuluri, R. V. DNABERT: Pre-trained bidirectional encoder representations from transformers model for DNA-language in genome. Bioinformatics 37, 2112–2120 (2021). 703. Bepler, T. &amp; Berger, B. Learning the protein language: Evolution, structure, and function. Cell systems 12, (2021). 704. Rao, R., Meier, J., Sercu, T., Ovchinnikov, S. &amp; Rives, A. Transformer protein language models are unsupervised structure learners. doi:10.1101/2020.12.15.422761. 706. Bhattacharya, N. et al. Single Layers of Attention Suffice to Predict Protein Contacts. doi:10.1101/2020.12.21.423882. 707. Hu, M. et al. Exploring evolution-based &amp; -free protein language models as protein function predictors. doi:10.48550/arXiv.2206.06583. 708. Meier, J. et al. Language models enable zero-shot prediction of the effects of mutations on protein function. bioRxiv 34, (2021). 709. Hie, B., Kevin K Yang &amp; Kim, S. K. Evolutionary velocity with protein language models predicts evolutionary dynamics of diverse proteins. Cell systems (2022) doi:10.1016/j.cels.2022.01.003. 710. Benegas, G., Batra, S. S. &amp; Song, Y. S. DNA language models are powerful zero-shot predictors of non-coding variant effects. doi:10.1101/2022.08.22.504706. 711. Cai, T. et al. Genome-wide Prediction of Small Molecule Binding to Remote Orphan Proteins Using Distilled Sequence Alignment Embedding. doi:10.1101/2020.08.04.236729. 712. Rao, R. et al. MSA transformer. bioRxiv (2021) doi:10.1101/2021.02.12.430858. 713. Sturmfels, P., Vig, J., Madani, A. &amp; Rajani, N. F. Profile prediction: An alignment-based pre-training task for protein sequence models. doi:10.48550/arXiv.2012.00195. 714. Sercu, T. et al. Neural Potts Model. doi:10.1101/2021.04.08.439084. 715. Baid, G. et al. DeepConsensus improves the accuracy of sequences with a gap-aware sequence transformer. Nature Biotechnology 1–7 (2022) doi:10.1038/s41587-022-01435-7. 716. Vig, J. et al. BERTology meets biology: Interpreting attention in protein language models. doi:10.48550/arXiv.2006.15222. 717. Gao, M. &amp; Skolnick, J. A novel sequence alignment algorithm based on deep learning of the protein folding code. Bioinformatics 37, 490–496 (2021). 718. Morton, J. T. et al. Protein Structural Alignments From Sequence. doi:10.1101/2020.11.03.365932. 719. Llinares-López, F., Berthet, Q., Blondel, M., Teboul, O. &amp; Vert, J.-P. Deep embedding and alignment of protein sequences. doi:10.1101/2021.11.15.468653. 720. Petti, S. et al. End-to-end learning of multiple sequence alignments with differentiable Smith-Waterman. doi:10.1101/2021.10.23.465204. 721. Guo, Y., Wu, J., Ma, H., Wang, S. &amp; Huang, J. Comprehensive study on enhancing low-quality position-specific scoring matrix with deep learning for accurate protein structure property prediction: Using bagging multiple sequence alignment learning. Journal of Computational Biology 28, 346–361 (2021). 722. Dotan, E. et al. Harnessing machine translation methods for sequence alignment. doi:10.1101/2022.07.22.501063. 723. Choromanski, K. et al. Masked language modeling for proteins via linearly scalable long-context transformers. doi:10.48550/arXiv.2006.03555. 724. Bhattacharya, N. et al. Interpreting potts and transformer protein models through the lens of simplified attention. in 34–45 (WORLD SCIENTIFIC, 2021). doi:10.1142/9789811250477_0004. 725. Sukhbaatar, S., Grave, E., Bojanowski, P. &amp; Joulin, A. Adaptive attention span in transformers. doi:10.48550/arXiv.1905.07799. 726. Wu, Z., Liu, Z., Lin, J., Lin, Y. &amp; Han, S. Lite transformer with long-short range attention. doi:10.48550/arXiv.2004.11886. 727. Child, R., Gray, S., Radford, A. &amp; Sutskever, I. Generating long sequences with sparse transformers. doi:10.48550/arXiv.1904.10509. 728. Correia, G. M., Niculae, V. &amp; Martins, A. F. T. EMNLP-IJCNLP 2019. in 21742184 (Association for Computational Linguistics, 2019). doi:10.18653/v1/D19-1223. 729. Kitaev, N., Kaiser, Ł. &amp; Levskaya, A. Reformer: The efficient transformer. doi:10.48550/arXiv.2001.04451. 730. Kraska, T., Beutel, A., Chi, E. H., Dean, J. &amp; Polyzotis, N. The case for learned index structures. in 489504 (Association for Computing Machinery, 2018). doi:10.1145/3183713.3196909. 731. Jung, Y. &amp; Han, D. BWA-MEME: BWA-MEM emulated with a machine learning approach. Bioinformatics 38, 2404–2413 (2022). 732. Kirsche, M., Das, A. &amp; Schatz, M. C. Sapling: Accelerating suffix array queries with learned data models. Bioinformatics 37, 744–749 (2021). 733. Ho, D. et al. LISA: Learned Indexes for Sequence Analysis. doi:10.1101/2020.12.22.423964. 734. Hoang, M., Zheng, H. &amp; Kingsford, C. Differentiable learning of sequence-specific minimizer schemes with DeepMinimizer. Journal of Computational Biology (2022) doi:10.1089/cmb.2022.0275. 735. Min, S., Lee, B. &amp; Yoon, S. TargetNet: Functional microRNA target prediction with deep neural networks. Bioinformatics 38, 671–677 (2022). "],["global-conclusion.html", "Global conclusion HPC part HIV part Final words", " Global conclusion HPC part We have developed a method to improve mapping by pre-processing biological sequences In terms of error rate and fraction of mapped reads Although transformations selected on whole human genome generalises to D. melanogaster and E coli genomes. Where to go next ? explore a larger space of transformations: develop more efficient ways to explore search space new search space reduction mehods Explore different applications: assembly, clustering, … Explore different types of transformations, i.e. less constraints given by us, ML/Seq2Seq,… HIV part We have used machine learning in order to find new drug resistance mutations in HIV We have showed a link to drug resistance for 6 mutations of the RT-pol protein, currently not classified as DRMS, but they have been identified as potentially linked to resistance previously These mutations seem to be accessory mutations and do not There seems to be no complex epistasis phenomena Where to go next: Confirm experimentally / in vivo the role these mutations have in resistance Explore more sensitive methods, lots of work on interpretable DL -&gt; restricted by dataset size… Explore metadata rich data, e.g. per treatment, Explore other organisms for which we have data -&gt; HCV ? Final words Alignments are fundamental, improvements in the creation and analysis steps are crucial and likely to help other people gain insight in biological processes. etc… "],["global-references.html", "Global References", " Global References 1. Watson, J. D. &amp; Crick, F. H. C. The Structure of Dna. Cold Spring Harbor Symposia on Quantitative Biology 18, 123–131 (1953). 2. Sanger, F. et al. Nucleotide sequence of bacteriophage φX174 DNA. Nature 265, 687–695 (1977). 3. Archer, C. T. et al. The genome sequence of e. Coli w (ATCC 9637): Comparative genome analysis and an improved genome-scale reconstruction of e. coli. BMC Genomics 12, 9 (2011). 4. Nurk, S. et al. The complete sequence of a human genome. Science 376, 44–53 (2022). 5. Pellicer, J., Fay, M. F. &amp; Leitch, I. J. The largest eukaryotic genome of them all? Botanical Journal of the Linnean Society 164, 10–15 (2010). 6. Macgregor, H. C. C-Value Paradox. in (eds. Brenner, S. &amp; Miller, J. H.) 249–250 (Academic Press, 2001). doi:10.1006/rwgn.2001.0301. 7. Alberts, B. et al. Molecular Biology of the Cell. 4th edition. (Garland Science, 2002). doi:10.1201/9781315735368. 8. Crick, F. H. C., Barnett, L., Brenner, S. &amp; Watts-Tobin, R. J. General Nature of the Genetic Code for Proteins. Nature 192, 1227–1232 (1961). 9. International Human Genome Sequencing Consortium. Finishing the euchromatic sequence of the human genome. Nature 431, 931–945 (2004). 10. Elkon, R. &amp; Agami, R. Characterization of noncoding regulatory DNA in the human genome. Nature Biotechnology 35, 732–746 (2017). 11. Omenn, G. S. Reflections on the HUPO human proteome project, the flagship project of the human proteome organization, at 10 years. Molecular &amp; Cellular Proteomics : MCP 20, 100062 (2021). 12. Shabalina, S. A. &amp; Spiridonov, N. A. The mammalian transcriptome and the function of non-coding DNA sequences. Genome Biology 5, 105 (2004). 13. ENCODE Project Consortium. An integrated encyclopedia of DNA elements in the human genome. Nature 489, 57–74 (2012). 14. Chatterjee, N. &amp; Walker, G. C. Mechanisms of DNA damage, repair, and mutagenesis: DNA Damage and Repair. Environmental and Molecular Mutagenesis 58, 235–263 (2017). 15. Fijalkowska, I. J., Schaaper, R. M. &amp; Jonczyk, P. DNA replication fidelity in escherichia coli: A multi-DNA polymerase affair. FEMS microbiology reviews 36, 1105–1121 (2012). 16. Pray, L. DNA replication and causes of mutation. Nature education 1, 214 (2008). 17. Gout, J.-F., Thomas, W. K., Smith, Z., Okamoto, K. &amp; Lynch, M. Large-scale detection of in vivo transcription errors. Proceedings of the National Academy of Sciences 110, 18584–18589 (2013). 18. Gout, J.-F. et al. The landscape of transcription errors in eukaryotic cells. Science Advances 3, e1701484 (2017). 19. Shcherbakov, D. et al. Ribosomal mistranslation leads to silencing of the unfolded protein response and increased mitochondrial biogenesis. Communications Biology 2, 1–16 (2019). 20. Desouky, O., Ding, N. &amp; Zhou, G. Targeted and non-targeted effects of ionizing radiation. Journal of Radiation Research and Applied Sciences 8, 247–254 (2015). 21. Kiefer, J. Effects of Ultraviolet Radiation on DNA. in (eds. Obe, G. &amp; Vijayalaxmi) 39–53 (Springer, 2007). doi:10.1007/978-3-540-71414-9_3. 22. Bennett, J. W. &amp; Klich, M. Mycotoxins. Clinical Microbiology Reviews 16, 497–516 (2003). 23. Kantidze, O. L., Velichko, A. K., Luzhin, A. V. &amp; Razin, S. V. Heat stress-induced DNA damage. Acta Naturae 8, 75–78 (2016). 24. Gregory, C. D. &amp; Milner, A. E. Regulation of cell survival in Burkitt lymphoma: implications from studies of apoptosis following cold-shock treatment. International Journal of Cancer 57, 419–426 (1994). 25. Gafter-Gvili, A. et al. Oxidative stress-induced DNA damage and repair in human peripheral blood mononuclear cells: Protective role of hemoglobin. PLoS ONE 8, e68341 (2013). 26. Roth, J. R. Frameshift mutations. Annual Review of Genetics 8, 319–346 (1974). 27. Kujovich, J. L. Factor V Leiden thrombophilia. Genetics in Medicine 13, 1–16 (2011). 28. Cutting, G. R. Cystic fibrosis genetics: from molecular understanding to clinical application. Nature Reviews Genetics 16, 45–56 (2015). 29. Fuchsberger, C. et al. The genetic architecture of type 2 diabetes. Nature 536, 41–47 (2016). 30. Morris, A. P. et al. Large-scale association analysis provides insights into the genetic architecture and pathophysiology of type 2 diabetes. Nature genetics 44, 981–990 (2012). 31. Woodford, N. &amp; Ellington, M. J. The emergence of antibiotic resistance by mutation. Clinical Microbiology and Infection 13, 5–18 (2007). 32. Rhee, S.-Y. et al. Human immunodeficiency virus reverse transcriptase and protease sequence database. Nucleic Acids Research 31, 298–303 (2003). 33. Sanger, F., Nicklen, S. &amp; Coulson, A. R. DNA sequencing with chain-terminating inhibitors. Proceedings of the National Academy of Sciences 74, 5463–5467 (1977). 34. Smith, L. M., Fung, S., Hunkapiller, M. W., Hunkapiller, T. J. &amp; Hood, L. E. The synthesis of oligonucleotides containing an aliphatic amino group at the 5′ terminus: Synthesis of fluorescent DNA primers for use in DNA sequence analysis. Nucleic Acids Research 13, 2399–2412 (1985). 35. Smith, L. M. et al. Fluorescence detection in automated DNA sequence analysis. Nature 321, 674–679 (1986). 36. Ansorge, W., Sproat, B., Stegemann, J., Schwager, C. &amp; Zenke, M. Automated DNA sequencing: Ultrasensitive detection of fluorescent bands during electrophoresis. Nucleic Acids Research 15, 4593–4602 (1987). 37. Shendure, J. &amp; Ji, H. Next-generation DNA sequencing. Nature Biotechnology 26, 1135–1145 (2008). 38. Collins, F. S., Morgan, M. &amp; Patrinos, A. The human genome project: Lessons from large-scale biology. Science 300, 286–290 (2003). 39. Liu, L. et al. Comparison of Next-Generation Sequencing Systems. Journal of Biomedicine and Biotechnology 2012, e251364 (2012). 40. The Cost of Sequencing a Human Genome. 41. Metzker, M. L. Sequencing technologies — the next generation. Nat Rev Genet 11, 31–46 (2010). 42. Canard, B. &amp; Sarfati, R. S. DNA polymerase fluorescent substrates with reversible 3’-tags. Gene 148, 1–6 (1994). 43. Nyren, P., Pettersson, B. &amp; Uhlen, M. Solid Phase DNA Minisequencing by an Enzymatic Luminometric Inorganic Pyrophosphate Detection Assay. Analytical Biochemistry 208, 171–175 (1993). 44. Mardis, E. R. A decade’s perspective on DNA sequencing technology. Nature 470, 198–203 (2011). 45. Stoler, N. &amp; Nekrutenko, A. Sequencing error profiles of illumina sequencing instruments. NAR Genomics and Bioinformatics 3, lqab019 (2021). 46. Sequencing Technology | Sequencing by synthesis. 47. Pollard, M. O., Gurdasani, D., Mentzer, A. J., Porter, T. &amp; Sandhu, M. S. Long reads: Their purpose and place. Human Molecular Genetics 27, R234–R241 (2018). 48. Eid, J. et al. Real-time DNA sequencing from single polymerase molecules. Science 323, 133–138 (2009). 49. Levene, M. J. et al. Zero-mode waveguides for single-molecule analysis at high concentrations. Science 299, 682–686 (2003). 50. Clarke, J. et al. Continuous base identification for single-molecule nanopore DNA sequencing. Nature Nanotechnology 4, 265–270 (2009). 51. Deamer, D., Akeson, M. &amp; Branton, D. Three decades of nanopore sequencing. Nature Biotechnology 34, 518–524 (2016). 52. Wick, R. R., Judd, L. M. &amp; Holt, K. E. Performance of neural network basecalling tools for Oxford Nanopore sequencing. Genome Biology 20, 129 (2019). 53. Rhoads, A. &amp; Au, K. F. PacBio Sequencing and Its Applications. Genomics, Proteomics &amp; Bioinformatics 13, 278–289 (2015). 54. Ip, C. L. C. et al. MinION analysis and reference consortium: Phase 1 data release and analysis. F1000Research 4, 1075 (2015). 55. Logsdon, G. A., Vollger, M. R. &amp; Eichler, E. E. Long-read human genome sequencing and its applications. Nat Rev Genet 21, 597–614 (2020). 56. Jain, M. et al. Nanopore sequencing and assembly of a human genome with ultra-long reads. Nature Biotechnology 36, 338–345 (2018). 57. Thar she blows! Ultra long read method for nanopore sequencing · loman labs. 58. Payne, A., Holmes, N., Rakyan, V. &amp; Loose, M. BulkVis: A graphical viewer for oxford nanopore bulk FAST5 files. Bioinformatics 35, 2193–2198 (2019). 59. Murigneux, V. et al. Comparison of long-read methods for sequencing and assembly of a plant genome. GigaScience 9, giaa146 (2020). 60. Chaisson, M. J. P. et al. Resolving the complexity of the human genome using single-molecule sequencing. Nature 517, 608–611 (2015). 61. Jain, M., Olsen, H. E., Paten, B. &amp; Akeson, M. The Oxford Nanopore MinION: delivery of nanopore sequencing to the genomics community. Genome Biology 17, 239 (2016). 62. Hong, M. et al. RNA sequencing: New technologies and applications in cancer research. Journal of Hematology &amp; Oncology 13, 166 (2020). 63. Ozsolak, F. &amp; Milos, P. M. RNA sequencing: advances, challenges and opportunities. Nature Reviews Genetics 12, 87–98 (2011). 64. Hunt, D. F., Yates, J. R., Shabanowitz, J., Winston, S. &amp; Hauer, C. R. Protein sequencing by tandem mass spectrometry. Proceedings of the National Academy of Sciences 83, 6233–6237 (1986). 65. Smith, B. J. Protein Sequencing Protocols. (Springer Science &amp; Business Media, 2002). doi:10.1385/1592593429. 66. Restrepo-Pérez, L., Joo, C. &amp; Dekker, C. Paving the way to single-molecule protein sequencing. Nature Nanotechnology 13, 786–796 (2018). 67. Weirather, J. L. et al. Comprehensive comparison of pacific biosciences and oxford nanopore technologies and their applications to transcriptome analysis. F1000Research 6, 100 (2017). 68. Wang, Y., Zhao, Y., Bollas, A., Wang, Y. &amp; Au, K. F. Nanopore sequencing technology, bioinformatics and applications. Nature Biotechnology 39, 1348–1365 (2021). 69. Ma, X. et al. Analysis of error profiles in deep next-generation sequencing data. Genome Biology 20, 50 (2019). 70. Lima, L. et al. Comparative assessment of long-read error correction software applied to nanopore RNA-sequencing data. Briefings in Bioinformatics 21, 1164–1181 (2020). 71. Fu, S., Wang, A. &amp; Au, K. F. A comparative evaluation of hybrid error correction methods for error-prone long reads. Genome Biology 20, 26 (2019). 72. Zhang, H., Jain, C. &amp; Aluru, S. A comprehensive evaluation of long read error correction methods. BMC Genomics 21, 889 (2020). 73. Amarasinghe, S. L. et al. Opportunities and challenges in long-read sequencing data analysis. Genome Biology 21, 30 (2020). 74. Ruan, J. &amp; Li, H. Fast and accurate long-read assembly with wtdbg2. Nature Methods 17, 155–158 (2020). 75. Koren, S. et al. Canu: scalable and accurate long-read assembly via adaptive k-mer weighting and repeat separation. Genome Research 27, 722–736 (2017). 76. Tischler, G. &amp; Myers, E. W. Non Hybrid Long Read Consensus Using Local De Bruijn Graph Assembly. 106252 (2017) doi:10.1101/106252. 77. Warren, R. L. et al. ntEdit: Scalable genome sequence polishing. Bioinformatics 35, 4430–4432 (2019). 78. Hepler, N. L. et al. An improved circular consensus algorithm with an application to detect HIV-1 drug-resistance associated mutations (DRAMs). in (2016). 79. Simpson, J. T. et al. Detecting DNA cytosine methylation using nanopore sequencing. Nature Methods 14, 407–410 (2017). 80. Hackl, T., Hedrich, R., Schultz, J. &amp; Förster, F. Proovread : Large-scale high-accuracy PacBio correction through iterative short read consensus. Bioinformatics 30, 3004–3011 (2014). 81. Miclotte, G. et al. Jabba: Hybrid error correction for long sequencing reads. Algorithms for Molecular Biology 11, 10 (2016). 82. Koren, S. et al. Hybrid error correction and de novo assembly of single-molecule sequencing reads. Nature Biotechnology 30, 693–700 (2012). 83. Salmela, L. &amp; Rivals, E. LoRDEC: Accurate and efficient long read error correction. Bioinformatics 30, 3506–3514 (2014). 84. Walker, B. J. et al. Pilon: An Integrated Tool for Comprehensive Microbial Variant Detection and Genome Assembly Improvement. PLOS ONE 9, e112963 (2014). 85. Vaser, R., Sović, I., Nagarajan, N. &amp; Šikić, M. Fast and accurate de novo genome assembly from long uncorrected reads. Genome Research 27, 737–746 (2017). 86. Wenger, A. M. et al. Accurate circular consensus long-read sequencing improves variant detection and assembly of a human genome. Nature Biotechnology 37, 1155–1162 (2019). 87. Timp, W., Comer, J. &amp; Aksimentiev, A. DNA Base-Calling from a Nanopore Using a Viterbi Algorithm. Biophysical Journal 102, L37–L39 (2012). 88. Perešíni, P., Boža, V., Brejová, B. &amp; Vinař, T. Nanopore base calling on the edge. Bioinformatics 37, 4661–4667 (2021). 89. Boža, V., Brejová, B. &amp; Vinař, T. DeepNano: Deep recurrent neural networks for base calling in MinION nanopore reads. PLOS ONE 12, e0178751 (2017). 90. Tyler, A. D. et al. Evaluation of Oxford Nanopore’s MinION Sequencing Device for Microbial Whole Genome Sequencing Applications. Scientific Reports 8, 10931 (2018). 91. Lin, B., Hui, J. &amp; Mao, H. Nanopore Technology and Its Applications in Gene Sequencing. Biosensors 11, 214 (2021). 92. Oxford Nanopore Tech Update: new Duplex method for Q30 nanopore single molecule reads, PromethION 2, and more. 93. Sanderson, N. et al. Comparison of R9.4.1/Kit10 and R10/Kit12 Oxford Nanopore flowcells and chemistries in bacterial genome reconstruction. doi:10.1101/2022.04.29.490057. 94. Karst, S. M. et al. High-accuracy long-read amplicon sequences using unique molecular identifiers with Nanopore or PacBio sequencing. Nature Methods 18, 165–169 (2021). 95. Chen, Z. et al. Highly accurate fluorogenic DNA sequencing with information theorybased error correction. Nature Biotechnology 35, 1170–1178 (2017). 96. High Performance Long Read Assay Enables Contiguous Data up to 10Kb on Existing Illumina Platforms. 97. Booeshaghi, A. S. &amp; Pachter, L. Pseudoalignment facilitates assignment of error-prone Ultima Genomics reads. doi:10.1101/2022.06.04.494845. 98. Delahaye, C. &amp; Nicolas, J. Sequencing DNA with nanopores: Troubles and biases. PLOS ONE 16, e0257521 (2021). 99. Goodwin, S. et al. Oxford Nanopore sequencing, hybrid error correction, and de novo assembly of a eukaryotic genome. Genome Research 25, 1750–1756 (2015). 100. Dohm, J. C., Peters, P., Stralis-Pavese, N. &amp; Himmelbauer, H. Benchmarking of long-read correction methods. NAR Genomics and Bioinformatics 2, (2020). 101. Foox, J. et al. Performance assessment of DNA sequencing platforms in the ABRF Next-Generation Sequencing Study. Nature Biotechnology 39, 1129–1140 (2021). 102. Huang, Y.-T., Liu, P.-Y. &amp; Shih, P.-W. Homopolish: A method for the removal of systematic errors in nanopore sequencing by homologous polishing. Genome Biology 22, 95 (2021). 103. Rang, F. J., Kloosterman, W. P. &amp; Ridder, J. de. From squiggle to basepair: Computational approaches for improving nanopore sequencing read accuracy. Genome Biology 19, 90 (2018). 104. Sarkozy, P., Jobbágy, Á. &amp; Antal, P. Calling Homopolymer Stretches from Raw Nanopore Reads by Analyzing k-mer Dwell Times. in (eds. Eskola, H., Väisänen, O., Viik, J. &amp; Hyttinen, J.) 241–244 (Springer, 2018). doi:10.1007/978-981-10-5122-7_61. 105. Hawkins, J. A., Jones, S. K., Finkelstein, I. J. &amp; Press, W. H. Indel-correcting DNA barcodes for high-throughput sequencing. Proceedings of the National Academy of Sciences 115, E6217–E6226 (2018). 106. Srivathsan, A. et al. A MinION-based pipeline for fast and cost-effective DNA barcoding. Molecular Ecology Resources 18, 1035–1049 (2018). 107. Wang, Y., Noor-A-Rahim, Md., Gunawan, E., Guan, Y. L. &amp; Poh, C. L. Construction of bio-constrained code for DNA data storage. IEEE Communications Letters 23, 963–966 (2019). 108. R10.3: the newest nanopore for high accuracy nanopore sequencing now available in store. 109. Zhou, L. et al. Detection of DNA homopolymer with graphene nanopore. Journal of Vacuum Science &amp; Technology B 37, 061809 (2019). 110. Goto, Y., Yanagi, I., Matsui, K., Yokoi, T. &amp; Takeda, K. Identification of four single-stranded DNA homopolymers with a solid-state nanopore in alkaline CsCl solution. Nanoscale 10, 20844–20850 (2018). 111. Nurk, S. et al. HiCanu: Accurate assembly of segmental duplications, satellites, and allelic variants from high-fidelity long reads. Genome Res. 30, 1291–1305 (2020). 112. Ekim, B., Berger, B. &amp; Chikhi, R. Minimizer-space de Bruijn graphs: Whole-genome assembly of long reads in minutes on a personal computer. Cell Systems 12, 958–968.e6 (2021). 113. Shafin, K. et al. Nanopore sequencing and the Shasta toolkit enable efficient de novo assembly of eleven human genomes. Nature Biotechnology 38, 1044–1053 (2020). 114. Miller, J. R. et al. Aggressive assembly of pyrosequencing reads with mates. Bioinformatics 24, 2818–2824 (2008). 115. Sahlin, K. &amp; Medvedev, P. De Novo Clustering of Long-Read Transcriptome Data Using a Greedy, Quality Value-Based Algorithm. Journal of Computational Biology 27, 472–484 (2020). 116. Au, K. F., Underwood, J. G., Lee, L. &amp; Wong, W. H. Improving PacBio Long Read Accuracy by Short Read Alignment. PLOS ONE 7, e46679 (2012). 117. Hu, R., Sun, G. &amp; Sun, X. LSCplus: a fast solution for improving long read accuracy by short read alignment. BMC Bioinformatics 17, 451 (2016). 118. Li, H. Minimap2: Pairwise alignment for nucleotide sequences. Bioinformatics 34, 3094–3100 (2018). 119. Jain, C. et al. Weighted minimizer sampling improves long read mapping. Bioinformatics 36, i111–i118 (2020). 120. Van Neste, C., Van Nieuwerburgh, F., Van Hoofstat, D. &amp; Deforce, D. Forensic STR analysis using massive parallel sequencing. Forensic Science International: Genetics 6, 810–818 (2012). 121. Short-read sequencing by binding. 122. Cetin, A. E. et al. Plasmonic sensor could enable label-free DNA sequencing. ACS Sensors 3, 561–568 (2018). 123. Almogy, G. et al. Cost-efficient whole genome-sequencing using novel mostly natural sequencing-by-synthesis chemistry and open fluidics platform. doi:10.1101/2022.05.29.493900. 124. Sunagawa, S. et al. Tara Oceans: towards global ocean ecosystems biology. Nature Reviews Microbiology 18, 428–445 (2020). 125. Lewin, H. A. et al. Earth BioGenome project: Sequencing life for the future of life. Proceedings of the National Academy of Sciences 115, 4325–4333 (2018). 126. Lightbody, G. et al. Review of applications of high-throughput sequencing in personalized medicine: Barriers and facilitators of future progress in research and clinical application. Briefings in Bioinformatics 20, 1795–1811 (2019). 127. Hamming, R. W. Coding and Information Theory. (Prentice-Hall, 1980). 128. Gusfield, D. Algorithms on strings, trees, and sequences: Computer science and computational biology. (Cambridge University Press, 1997). doi:10.1017/CBO9780511574931. 129. Levenshtein, V. I. Binary codes capable of correcting deletions, insertions and reversals. Soviet Physics Doklady 10, 707 (1966). 130. Hardison, R. C. Comparative Genomics. PLOS Biology 1, e58 (2003). 131. Felsenstein, J. Evolutionary trees from DNA sequences: A maximum likelihood approach. Journal of Molecular Evolution 17, 368–376 (1981). 132. Kumar, S., Tamura, K. &amp; Nei, M. MEGA: Molecular evolutionary genetics analysis software for microcomputers. Bioinformatics 10, 189–191 (1994). 133. Kozlov, A. M., Darriba, D., Flouri, T., Morel, B. &amp; Stamatakis, A. RAxML-NG: A fast, scalable and user-friendly tool for maximum likelihood phylogenetic inference. Bioinformatics 35, 4453–4455 (2019). 134. Guindon, S. et al. New algorithms and methods to estimate maximum-likelihood phylogenies: Assessing the performance of PhyML 3.0. Systematic Biology 59, 307–321 (2010). 135. Price, M. N., Dehal, P. S. &amp; Arkin, A. P. FastTree 2 Approximately Maximum-Likelihood Trees for Large Alignments. PLOS ONE 5, e9490 (2010). 136. Jumper, J. et al. Highly accurate protein structure prediction with AlphaFold. Nature 596, 583–589 (2021). 137. Karplus, K. et al. Predicting protein structure using only sequence information. Proteins: Structure, Function, and Bioinformatics 37, 121–125 (1999). 138. Watson, J. D., Laskowski, R. A. &amp; Thornton, J. M. Predicting protein function from sequence and structural data. Current Opinion in Structural Biology 15, 275–284 (2005). 139. Lee, D., Redfern, O. &amp; Orengo, C. Predicting protein function from sequence and structure. Nature Reviews Molecular Cell Biology 8, 995–1005 (2007). 140. Salmela, L. &amp; Schröder, J. Correcting errors in short reads by multiple alignments. Bioinformatics 27, 1455–1461 (2011). 141. Medvedev, P., Stanciu, M. &amp; Brudno, M. Computational methods for discovering structural variation with next-generation sequencing. Nature Methods 6, S13–S20 (2009). 142. Mahmoud, M. et al. Structural variant calling: the long and the short of it. Genome Biology 20, 246 (2019). 143. Sung, W.-K. Algorithms in bioinformatics: A practical introduction. (Chapman; Hall/CRC, 2011). doi:10.1201/9781420070347. 144. Needleman, S. B. &amp; Wunsch, C. D. A general method applicable to the search for similarities in the amino acid sequence of two proteins. Journal of Molecular Biology 48, 443–453 (1970). 145. Smith, T. F. &amp; Waterman, M. S. Identification of common molecular subsequences. Journal of Molecular Biology 147, 195–197 (1981). 146. Bradley, S. P., Hax, A. C. &amp; Magnanti, T. L. Applied Mathematical Programming. (Addison-Wesley Publishing Company, 1977). 147. Bellman, R. The theory of dynamic programming. Bulletin of the American Mathematical Society 60, 503–515 (1954). 148. Masek, W. J. &amp; Paterson, M. S. A faster algorithm computing string edit distances. Journal of Computer and System Sciences 20, 18–31 (1980). 149. Vinh, N. X., Epps, J. &amp; Bailey, J. Information Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance. Journal of Machine Learning Research 11, 18 (2010). 150. Ullman, J. D., Aho, A. V. &amp; Hirschberg, D. S. Bounds on the complexity of the longest common subsequence problem. Journal of the ACM 23, 112 (1976). 151. Hirschberg, D. S. A linear space algorithm for computing maximal common subsequences. Communications of the ACM 18, 341343 (1975). 152. Myers, E. W. &amp; Miller, W. Optimal alignments in linear space. Bioinformatics 4, 11–17 (1988). 153. Rice, P., Longden, I. &amp; Bleasby, A. EMBOSS: The european molecular biology open software suite. Trends in genetics 16, 276277 (2000). 154. Huang, X. &amp; Miller, W. A time-efficient, linear-space local similarity algorithm. Advances in Applied Mathematics 12, 337–357 (1991). 155. Waterman, M. S. &amp; Eggert, M. A new algorithm for best subsequence alignments with application to tRNA-rRNA comparisons. Journal of Molecular Biology 197, 723–728 (1987). 156. Stajich, J. E. et al. The Bioperl Toolkit: Perl Modules for the Life Sciences. Genome Research 12, 1611–1618 (2002). 157. Gentleman, R. C. et al. Bioconductor: open software development for computational biology and bioinformatics. Genome Biology 5, R80 (2004). 158. Daily, J. Parasail: SIMD c library for global, semi-global, and local pairwise sequence alignments. BMC Bioinformatics 17, 81 (2016). 159. Frohmberg, W., Kierzynka, M., Blazewicz, J. &amp; Wojciechowski, P. G-PAS 2.0 an improved version of protein alignment tool with an efficient backtracking routine on multiple GPUs. Bulletin of the Polish Academy of Sciences: Technical Sciences 60, 491–494 (2012). 160. Altschul, S. F. Substitution Matrices. in (John Wiley &amp; Sons, Ltd, 2013). doi:10.1002/9780470015902.a0005265.pub3. 161. Dayhoff, M. O., Schwartz, R. M. &amp; Orcutt, B. C. A model of evolutionary change in proteins. A Model of Evolutionary Change in Proteins 345–352 (1978). 162. Müller, T. &amp; Vingron, M. Modeling amino acid replacement. Journal of Computational Biology: A Journal of Computational Molecular Cell Biology 7, 761–776 (2000). 163. Henikoff, S. &amp; Henikoff, J. G. Amino acid substitution matrices from protein blocks. Proceedings of the National Academy of Sciences 89, 10915–10919 (1992). 164. Whelan, S. &amp; Goldman, N. A general empirical model of protein evolution derived from multiple protein families using a maximum-likelihood approach. Molecular Biology and Evolution 18, 691–699 (2001). 165. Le, S. Q. &amp; Gascuel, O. An improved general amino acid replacement matrix. Molecular Biology and Evolution 25, 1307–1320 (2008). 166. Müller, T., Rahmann, S. &amp; Rehmsmeier, M. Non-symmetric score matrices and the detection of homologous transmembrane proteins. Bioinformatics 17, S182–S189 (2001). 167. Ng, P. C., Henikoff, J. G. &amp; Henikoff, S. PHAT: a transmembrane-specific substitution matrix. Predicted hydrophobic and transmembrane. Bioinformatics (Oxford, England) 16, 760–766 (2000). 168. Trivedi, R. &amp; Nagarajaram, H. A. Amino acid substitution scoring matrices specific to intrinsically disordered regions in proteins. Scientific Reports 9, 16380 (2019). 169. Goonesekere, N. C. W. &amp; Lee, B. Context-specific amino acid substitution matrices and their use in the detection of protein homologs. Proteins: Structure, Function, and Bioinformatics 71, 910–919 (2008). 170. Paila, U., Kondam, R. &amp; Ranjan, A. Genome bias influences amino acid choices: analysis of amino acid substitution and re-compilation of substitution matrices exclusive to an AT-biased genome. Nucleic Acids Research 36, 6664–6675 (2008). 171. Nickle, D. C. et al. HIV-specific probabilistic models of protein evolution. PLoS ONE 2, e503 (2007). 172. Sardiu, M. E., Alves, G. &amp; Yu, Y.-K. Score statistics of global sequence alignment from the energy distribution of a modified directed polymer and directed percolation problem. Physical Review. E, Statistical, Nonlinear, and Soft Matter Physics 72, 061917 (2005). 173. Chiaromonte, F., Yap, V. B. &amp; Miller, W. Scoring pairwise genomic sequence alignments. in 115–126 (WORLD SCIENTIFIC, 2001). doi:10.1142/9789812799623_0012. 174. Schneider, A., Cannarozzi, G. M. &amp; Gonnet, G. H. Empirical codon substitution matrix. BMC bioinformatics 6, 134 (2005). 175. Doron-Faigenboim, A. &amp; Pupko, T. A combined empirical and mechanistic codon model. Molecular Biology and Evolution 24, 388–397 (2007). 176. Cartwright, R. A. Problems and solutions for estimating indel rates and length distributions. Molecular Biology and Evolution 26, 473–480 (2009). 177. Fitch, W. M. &amp; Smith, T. F. Optimal sequence alignments. Proceedings of the National Academy of Sciences 80, 1382–1386 (1983). 178. Waterman, M. S., Smith, T. F. &amp; Beyer, W. A. Some biological sequence metrics. Advances in Mathematics 20, 367–387 (1976). 179. Gotoh, O. An improved algorithm for matching biological sequences. Journal of Molecular Biology 162, 705–708 (1982). 180. Altschul, S. F. &amp; Erickson, B. W. Optimal sequence alignment using affine gap costs. Bulletin of Mathematical Biology 48, 603–616 (1986). 181. Waterman, M. S. Efficient sequence alignment algorithms. Journal of Theoretical Biology 108, 333–337 (1984). 182. Miller, W. &amp; Myers, E. W. Sequence comparison with concave weighting functions. Bulletin of Mathematical Biology 50, 97–120 (1988). 183. Cartwright, R. A. Logarithmic gap costs decrease alignment accuracy. BMC Bioinformatics 7, 527 (2006). 184. Goonesekere, N. C. W. &amp; Lee, B. Frequency of gaps observed in a structurally aligned protein pair database suggests a simple gap penalty function. Nucleic Acids Research 32, 2838–2843 (2004). 185. Benner, S. A., Cohen, M. A. &amp; Gonnet, G. H. Empirical and Structural Models for Insertions and Deletions in the Divergent Evolution of Proteins. Journal of Molecular Biology 229, 1065–1082 (1993). 186. Wrabl, J. O. &amp; Grishin, N. V. Gaps in structurally similar proteins: Towards improvement of multiple sequence alignment. Proteins: Structure, Function, and Bioinformatics 54, 71–87 (2004). 187. Zhang, W., Liu, S. &amp; Zhou, Y. SP5: Improving Protein Fold Recognition by Using Torsion Angle Profiles and Profile-Based Gap Penalty Model. PLOS ONE 3, e2325 (2008). 188. Jeanmougin, F., Thompson, J. D., Gouy, M., Higgins, D. G. &amp; Gibson, T. J. Multiple sequence alignment with clustal x. Trends in Biochemical Sciences 23, 403–405 (1998). 189. Wang, C., Yan, R.-X., Wang, X.-F., Si, J.-N. &amp; Zhang, Z. Comparison of linear gap penalties and profile-based variable gap penalties in profileprofile alignments. Computational Biology and Chemistry 35, 308–318 (2011). 190. Marco-Sola, S., Moure, J. C., Moreto, M. &amp; Espinosa, A. Fast gap-affine pairwise alignment using the wavefront algorithm. Bioinformatics (2020) doi:10.1093/bioinformatics/btaa777. 191. Pearson, W. R. &amp; Miller, W. [27] Dynamic programming algorithms for biological sequence comparison. in vol. 210 575–601 (Academic Press, 1992). 192. Spouge, J. L. Speeding up dynamic programming algorithms for finding optimal lattice paths. SIAM Journal on Applied Mathematics 49, 1552–1566 (1989). 193. Fickett, J. W. Fast optimal alignment. Nucleic Acids Research 12, 175–179 (1984). 194. Chao, J., Tang, F. &amp; Xu, L. Developments in Algorithms for Sequence Alignment: A Review. Biomolecules 12, 546 (2022). 195. Katoh, K., Misawa, K., Kuma, K. &amp; Miyata, T. MAFFT: A novel method for rapid multiple sequence alignment based on fast fourier transform. Nucleic Acids Research 30, 3059–3066 (2002). 196. Sun, Y. &amp; Buhler, J. Choosing the best heuristic for seeded alignment of DNA sequences. BMC Bioinformatics 7, 133 (2006). 197. Li, H. &amp; Homer, N. A survey of sequence alignment algorithms for next-generation sequencing. Briefings in Bioinformatics 11, 473–483 (2010). 198. Altschul, S. F., Gish, W., Miller, W., Myers, E. W. &amp; Lipman, D. J. Basic local alignment search tool. Journal of Molecular Biology 215, 403–410 (1990). 199. Altschul, S. F. et al. Gapped BLAST and PSI-BLAST: A new generation of protein database search programs. Nucleic Acids Research 25, 3389–3402 (1997). 200. Schwartz, S. et al. HumanMouse Alignments with BLASTZ. Genome Research 13, 103–107 (2003). 201. Ma, B., Tromp, J. &amp; Li, M. PatternHunter: Faster and more sensitive homology search. Bioinformatics 18, 440–445 (2002). 202. Edgar, R. C. Search and clustering orders of magnitude faster than BLAST. Bioinformatics 26, 2460–2461 (2010). 203. Buchfink, B., Xie, C. &amp; Huson, D. H. Fast and sensitive protein alignment using DIAMOND. Nature Methods 12, 59–60 (2015). 204. Buchfink, B., Reuter, K. &amp; Drost, H.-G. Sensitive protein alignments at tree-of-life scale using DIAMOND. Nature Methods 18, 366–368 (2021). 205. Pearson, W. R. &amp; Lipman, D. J. Improved tools for biological sequence comparison. Proceedings of the National Academy of Sciences of the United States of America 85, 2444–2448 (1988). 206. Lipman, D. J. &amp; Pearson, W. R. Rapid and sensitive protein similarity searches. Science (New York, N.Y.) 227, 1435–1441 (1985). 207. Saripella, G. V., Sonnhammer, E. L. L. &amp; Forslund, K. Benchmarking the next generation of homology inference tools. Bioinformatics 32, 2636 (2016). 208. Finn, R. D. et al. The Pfam protein families database: towards a more sustainable future. Nucleic Acids Research 44, D279 (2016). 209. Essoussi, N. &amp; Fayech, S. A comparison of four pair-wise sequence alignment methods. Bioinformation 2, 166–168 (2007). 210. Shpaer, E. G. et al. Sensitivity and Selectivity in Protein Similarity Searches: A Comparison of SmithWaterman in Hardware to BLAST and FASTA. Genomics 38, 179–191 (1996). 211. Schleimer, S., Wilkerson, D. S. &amp; Aiken, A. Winnowing: Local algorithms for document fingerprinting. in 7685 (Association for Computing Machinery, 2003). doi:10.1145/872757.872770. 212. Roberts, M., Hayes, W., Hunt, B. R., Mount, S. M. &amp; Yorke, J. A. Reducing storage requirements for biological sequence comparison. Bioinformatics 20, 3363–3369 (2004). 213. Li, H. Minimap and miniasm: Fast mapping and de novo assembly for noisy long sequences. Bioinformatics 32, 2103–2110 (2016). 214. Jain, C., Koren, S., Dilthey, A., Phillippy, A. M. &amp; Aluru, S. A fast adaptive algorithm for computing whole-genome homology maps. Bioinformatics 34, i748–i756 (2018). 215. Orenstein, Y., Pellow, D., Marçais, G., Shamir, R. &amp; Kingsford, C. Compact Universal k-mer Hitting Sets. in (eds. Frith, M. &amp; Storm Pedersen, C. N.) 257–268 (Springer International Publishing, 2016). doi:10.1007/978-3-319-43681-4_21. 216. Marçais, G. et al. Improving the performance of minimizers and winnowing schemes. Bioinformatics 33, i110–i117 (2017). 217. Chikhi, R., Limasset, A., Jackman, S., Simpson, J. T. &amp; Medvedev, P. On the Representation of de Bruijn Graphs. in 35–55 (Springer International Publishing, 2014). doi:10.1007/978-3-319-05269-4_4. 218. Edgar, R. Syncmers are more sensitive than minimizers for selecting conserved k-mers in biological sequences. PeerJ 9, e10805 (2021). 219. Sahlin, K. Effective sequence similarity detection with strobemers. Genome Research 31, 2080–2094 (2021). 220. Sahlin, K. Flexible seed size enables ultra-fast and accurate read alignment. doi:10.1101/2021.06.18.449070. 221. Weiner, P. 14th annual symposium on switching and automata theory (swat 1973). in 1–11 (1973). doi:10.1109/SWAT.1973.13. 222. Manber, U. &amp; Myers, G. Suffix arrays: A new method for on-line string searches. SIAM Journal on Computing 22, 935–948 (1993). 223. Abouelhoda, M. I., Kurtz, S. &amp; Ohlebusch, E. The Enhanced Suffix Array and Its Applications to Genome Analysis. in (eds. Guigó, R. &amp; Gusfield, D.) 449–463 (Springer, 2002). doi:10.1007/3-540-45784-4_35. 224. Ferragina, P. &amp; Manzini, G. Proceedings 41st annual symposium on foundations of computer science. in 390–398 (2000). doi:10.1109/SFCS.2000.892127. 225. Bray, N., Dubchak, I. &amp; Pachter, L. AVID: A global alignment program. Genome Research 13, 97–102 (2003). 226. Delcher, A. L., Phillippy, A., Carlton, J. &amp; Salzberg, S. L. Fast algorithms for large-scale genome alignment and comparison. Nucleic Acids Research 30, 2478–2483 (2002). 227. Abouelhoda, M. I., Kurtz, S. &amp; Ohlebusch, E. Replacing suffix trees with enhanced suffix arrays. Journal of Discrete Algorithms 2, 53–86 (2004). 228. Marçais, G. et al. MUMmer4: A fast and versatile genome alignment system. PLOS Computational Biology 14, e1005944 (2018). 229. Burrows, M. &amp; Wheeler, D. A block-sorting lossless data compression algorithm. (1994). 230. Vyverman, M., De Baets, B., Fack, V. &amp; Dawyndt, P. Prospects and limitations of full-text index structures in genome analysis. Nucleic Acids Research 40, 6993–7015 (2012). 231. Cheng, H., Wu, M. &amp; Xu, Y. FMtree: A fast locating algorithm of FM-indexes for genomic data. Bioinformatics 34, 416–424 (2018). 232. Lam, T. W., Sung, W. K., Tam, S. L., Wong, C. K. &amp; Yiu, S. M. Compressed indexing and local alignment of DNA. Bioinformatics 24, 791–797 (2008). 233. Li, H. &amp; Durbin, R. Fast and accurate short read alignment with burrowswheeler transform. Bioinformatics 25, 1754–1760 (2009). 234. Li, H. &amp; Durbin, R. Fast and accurate long-read alignment with burrowswheeler transform. Bioinformatics 26, 589–595 (2010). 235. Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. https://arxiv.org/abs/1303.3997 (2013). 236. Liu, Y. &amp; Schmidt, B. Long read alignment based on maximal exact match seeds. Bioinformatics 28, i318–i324 (2012). 237. Langmead, B. &amp; Salzberg, S. L. Fast gapped-read alignment with Bowtie 2. Nat Methods 9, 357–359 (2012). 238. Song, B. et al. AnchorWave: Sensitive alignment of genomes with high sequence diversity, extensive structural polymorphism, and whole-genome duplication. Proceedings of the National Academy of Sciences 119, e2113075119 (2022). 239. Durbin, R., Eddy, S. R., Krogh, A. &amp; Mitchison, G. Biological sequence analysis: Probabilistic models of proteins and nucleic acids. (Cambridge University Press, 1998). doi:10.1017/CBO9780511790492. 240. Söding, J. Protein homology detection by HMM-HMM comparison. Bioinformatics (Oxford, England) 21, 951–960 (2005). 241. Finn, R. D., Clements, J. &amp; Eddy, S. R. HMMER web server: Interactive sequence similarity searching. Nucleic Acids Research 39, W29–W37 (2011). 242. Wang, J., Keightley, P. D. &amp; Johnson, T. MCALIGN2: Faster, accurate global pairwise alignment of non-coding DNA sequences based on explicit models of indel evolution. BMC Bioinformatics 7, 292 (2006). 243. Ruffalo, M., LaFramboise, T. &amp; Koyutürk, M. Comparative analysis of algorithms for next-generation sequencing read alignment. Bioinformatics (Oxford, England) 27, 2790–2796 (2011). 244. Schbath, S. et al. Mapping reads on a genomic sequence: An algorithmic overview and a practical comparative analysis. Journal of Computational Biology 19, 796–813 (2012). 245. Hatem, A., Bozdağ, D., Toland, A. E. &amp; Çatalyürek, Ü. V. Benchmarking short sequence mapping tools. BMC Bioinformatics 14, 184 (2013). 246. Canzar, S. &amp; Salzberg, S. L. Short read mapping: An algorithmic tour. Proceedings of the IEEE 105, 436–458 (2017). 247. Alser, M. et al. Technology dictates algorithms: Recent developments in read alignment. Genome Biology 22, 249 (2021). 248. Břinda, K., Boeva, V. &amp; Kucherov, G. RNF: A general framework to evaluate NGS read mappers. Bioinformatics 32, 136–139 (2016). 249. Lin, H.-N. &amp; Hsu, W.-L. Kart: a divide-and-conquer algorithm for NGS read alignment. Bioinformatics (Oxford, England) 33, 2281–2287 (2017). 250. Olson, C. B. et al. 2012 IEEE 20th international symposium on field-programmable custom computing machines. in 161–168 (2012). doi:10.1109/FCCM.2012.36. 251. Chen, P., Wang, C., Li, X. &amp; Zhou, X. Accelerating the next generation long read mapping with the FPGA-based system. IEEE/ACM Transactions on Computational Biology and Bioinformatics 11, 840–852 (2014). 252. Suzuki, H. &amp; Kasahara, M. Introducing difference recurrence relations for faster semi-global alignment of long sequences. BMC Bioinformatics 19, 45 (2018). 253. Zeni, A. et al. 2020 IEEE international parallel and distributed processing symposium (IPDPS). in 462–471 (2020). doi:10.1109/IPDPS47924.2020.00055. 254. Chaisson, M. J. &amp; Tesler, G. Mapping single molecule sequencing reads using basic local alignment with successive refinement (BLASR): Application and theory. BMC Bioinformatics 13, 238 (2012). 255. Haghshenas, E., Sahinalp, S. C. &amp; Hach, F. lordFAST: sensitive and Fast Alignment Search Tool for LOng noisy Read sequencing Data. Bioinformatics (Oxford, England) 35, 20–27 (2019). 256. Sović, I. et al. Fast and sensitive mapping of nanopore sequencing reads with GraphMap. Nature Communications 7, 11307 (2016). 257. Sedlazeck, F. J. et al. Accurate detection of complex structural variations using single-molecule sequencing. Nature Methods 15, 461–468 (2018). 258. Jain, C., Dilthey, A., Koren, S., Aluru, S. &amp; Phillippy, A. M. A fast approximate algorithm for mapping long reads to large reference databases. Journal of Computational Biology 25, 766–779 (2018). 259. Prodanov, T. &amp; Bansal, V. Sensitive alignment using paralogous sequence variants improves long-read mapping and variant calling in segmental duplications. Nucleic Acids Research 48, e114 (2020). 260. Jain, C., Rhie, A., Hansen, N. F., Koren, S. &amp; Phillippy, A. M. Long-read mapping to repetitive reference sequences using Winnowmap2. Nature Methods 19, 705–710 (2022). 261. Mikheenko, A., Bzikadze, A. V., Gurevich, A., Miga, K. H. &amp; Pevzner, P. A. TandemTools: Mapping long reads and assessing/improving assembly quality in extra-long tandem repeats. Bioinformatics 36, i75–i83 (2020). 262. Li, H., Ruan, J. &amp; Durbin, R. Mapping short DNA sequencing reads and calling variants using mapping quality scores. Genome Research 18, 1851–1858 (2008). 263. Li, H. et al. The sequence alignment/map format and SAMtools. Bioinformatics 25, 2078–2079 (2009). 264. Understanding MAPQ scores in SAM files: Does 37 = 42? 265. Lee, H. &amp; Schatz, M. C. Genomic dark matter: The reliability of short read mapping illustrated by the genome mappability score. Bioinformatics 28, 2097–2105 (2012). 266. Langmead, B. A tandem simulation framework for predicting mapping quality. Genome Biology 18, 152 (2017). 267. Ruffalo, M., Koyutürk, M., Ray, S. &amp; LaFramboise, T. Accurate estimation of short read mapping quality for next-generation genome sequencing. Bioinformatics 28, i349–i355 (2012). 268. Multiple Sequence Alignment Methods. vol. 1079 (Humana Press, 2014). 269. Wang, L. &amp; Jiang, T. On the complexity of multiple sequence alignment. Journal of Computational Biology 1, 337–348 (1994). 270. Just, W. Computational complexity of multiple sequence alignment with SP-score. Journal of Computational Biology 8, 615–623 (2001). 271. Tang, F. et al. HAlign 3: Fast multiple alignment of ultra-large numbers of similar DNA/RNA sequences. Molecular Biology and Evolution 39, msac166 (2022). 272. Feng, D.-F. &amp; Doolittle, R. F. Progressive sequence alignment as a prerequisitetto correct phylogenetic trees. Journal of Molecular Evolution 25, 351–360 (1987). 273. Jones, D. T., Taylor, W. R. &amp; Thornton, J. M. The rapid generation of mutation data matrices from protein sequences. Bioinformatics 8, 275–282 (1992). 274. Blaisdell, B. E. A measure of the similarity of sets of sequences not requiring sequence alignment. Proceedings of the National Academy of Sciences 83, 5155–5159 (1986). 275. Gronau, I. &amp; Moran, S. Optimal implementations of UPGMA and other common clustering algorithms. Information Processing Letters 104, 205–210 (2007). 276. Saitou, N. &amp; Nei, M. The neighbor-joining method: A new method for reconstructing phylogenetic trees. Molecular Biology and Evolution 4, 406–425 (1987). 277. Katoh, K. &amp; Toh, H. PartTree: An algorithm to build an approximate tree from a large number of unaligned sequences. Bioinformatics 23, 372–374 (2007). 278. Sievers, F. et al. Fast, scalable generation of high-quality protein multiple sequence alignments using Clustal Omega. Molecular Systems Biology 7, 539 (2011). 279. Blackshields, G., Sievers, F., Shi, W., Wilm, A. &amp; Higgins, D. G. Sequence embedding for fast construction of guide trees for multiple sequence alignment. Algorithms for Molecular Biology 5, 21 (2010). 280. Altschul, S. F. Gap costs for multiple sequence alignment. Journal of Theoretical Biology 138, 297–309 (1989). 281. Altschul, S. F., Carroll, R. J. &amp; Lipman, D. J. Weights for data related by a tree. Journal of Molecular Biology 207, 647–653 (1989). 282. Edgar, R. C. &amp; Sjölander, K. A comparison of scoring functions for protein sequence profile alignment. Bioinformatics 20, 1301–1308 (2004). 283. Notredame, C., Holm, L. &amp; Higgins, D. G. COFFEE: An objective function for multiple sequence alignments. Bioinformatics 14, 407–422 (1998). 284. Notredame, C., Higgins, D. G. &amp; Heringa, J. T-coffee: a novel method for fast and accurate multiple sequence alignment11Edited by J. Thornton. Journal of Molecular Biology 302, 205–217 (2000). 285. Edgar, R. C. MUSCLE: A multiple sequence alignment method with reduced time and space complexity. BMC Bioinformatics 5, 113 (2004). 286. Edgar, R. C. MUSCLE: Multiple sequence alignment with high accuracy and high throughput. Nucleic Acids Research 32, 1792–1797 (2004). 287. Do, C. B., Mahabhashyam, M. S. P., Brudno, M. &amp; Batzoglou, S. ProbCons: Probabilistic consistency-based multiple sequence alignment. Genome Research 15, 330–340 (2005). 288. Thompson, J. D., Higgins, D. G. &amp; Gibson, T. J. CLUSTAL W: improving the sensitivity of progressive multiple sequence alignment through sequence weighting, position-specific gap penalties and weight matrix choice. Nucleic Acids Research 22, 4673–4680 (1994). 289. Thompson, J. D., Gibson, T. J., Plewniak, F., Jeanmougin, F. &amp; Higgins, D. G. The CLUSTAL_x windows interface: Flexible strategies for multiple sequence alignment aided by quality analysis tools. Nucleic Acids Research 25, 4876–4882 (1997). 290. Liu, Y., Schmidt, B. &amp; Maskell, D. L. MSAProbs: Multiple sequence alignment based on pair hidden markov models and partition function posterior probabilities. Bioinformatics 26, 1958–1964 (2010). 291. Lemoine, F., Blassel, L., Voznica, J. &amp; Gascuel, O. COVID-align: Accurate online alignment of hCoV-19 genomes using a profile HMM. Bioinformatics (2020) doi:10.1093/bioinformatics/btaa871. 292. Eddy, S. R. Multiple Alignment Using Hidden Markov Models. 7. 293. Kim, J., Pramanik, S. &amp; Chung, M. J. Multiple sequence alignment using simulated annealing. Bioinformatics 10, 419–426 (1994). 294. Ishikawa, M. et al. Multiple sequence alignment by parallel simulated annealing. Bioinformatics 9, 267–273 (1993). 295. Huo, H. &amp; Stojkovic, V. Third international conference on natural computation (ICNC 2007). in vol. 2 270–274 (2007). 296. Chowdhury, B. &amp; Garai, G. A review on multiple sequence alignment from the perspective of genetic algorithm. Genomics 109, 419–431 (2017). 297. Zhang, C. &amp; Wong, A. K. C. A genetic algorithm for multiple molecular sequence alignment. Bioinformatics 13, 565–581 (1997). 298. Naznin, F., Sarker, R. &amp; Essam, D. Vertical decomposition with genetic algorithm for multiple sequence alignment. BMC Bioinformatics 12, 353 (2011). 299. Naznin, F., Sarker, R. &amp; Essam, D. Progressive alignment method using genetic algorithm for multiple sequence alignment. IEEE Transactions on Evolutionary Computation 16, 615–631 (2012). 300. Notredame, C. &amp; Higgins, D. G. SAGA: Sequence alignment by genetic algorithm. Nucleic Acids Research 24, 1515–1524 (1996). 301. Aksamentov, I., Roemer, C., Hodcroft, E. &amp; Neher, R. Nextclade: clade assignment, mutation calling and quality control for viral genomes. Journal of Open Source Software 6, 3773 (2021). 302. Garriga, E. et al. Large multiple sequence alignments with a root-to-leaf regressive method. Nature Biotechnology 37, 1466–1470 (2019). 303. Notredame, C. Recent Evolutions of Multiple Sequence Alignment Algorithms. PLOS Computational Biology 3, e123 (2007). 304. Notredame, C. Recent progress in multiple sequence alignment: A survey. Pharmacogenomics 3, 131–144 (2002). 305. Edgar, R. C. &amp; Batzoglou, S. Multiple sequence alignment. Current Opinion in Structural Biology 16, 368–373 (2006). 306. Pais, F. S.-M., Ruy, P. de C., Oliveira, G. &amp; Coimbra, R. S. Assessing the efficiency of multiple sequence alignment programs. Algorithms for Molecular Biology 9, 4 (2014). 307. Thompson, J. D., Plewniak, F. &amp; Poch, O. BAliBASE: a benchmark alignment database for the evaluation of multiple alignment programs. Bioinformatics 15, 87–88 (1999). 308. Bragg, L., Stone, G., Imelfort, M., Hugenholtz, P. &amp; Tyson, G. W. Fast, accurate error-correction of amplicon pyrosequences using Acacia. Nat Methods 9, 425–426 (2012). 309. Sahlin, K. &amp; Medvedev, P. Error correction enables use of Oxford Nanopore technology for reference-free transcriptome analysis. Nat Commun 12, 2 (2021). 310. Liu, H. et al. SMARTdenovo: A de novo assembler using long noisy reads. Gigabyte 2021, 1–9 (2021). 311. Graham, R. L., Knuth, D. E. &amp; Patashnik, O. Concrete mathematics: A foundation for computer science. (Addison-Wesley, 1994). 312. Adams, M. D. et al. The genome sequence of Drosophila melanogaster. Science 287, 2185–2195 (2000). 313. Yang, C., Chu, J., Warren, R. L. &amp; Birol, I. NanoSim: Nanopore sequence read simulator based on statistical characterization. GigaScience 6, (2017). 314. Rhie, A., Walenz, B. P., Koren, S. &amp; Phillippy, A. M. Merqury: Reference-free quality, completeness, and phasing assessment for genome assemblies. Genome Biology 21, 245 (2020). 315. Li, H. New strategies to improve Minimap2 alignment accuracy. https://arxiv.org/abs/2108.03515 (2021). 316. Li, H. et al. A synthetic-diploid benchmark for accurate variant-calling evaluation. Nat Methods 15, 595–597 (2018). 317. Martin, J. A. &amp; Wang, Z. Next-generation transcriptome assembly. Nature Reviews Genetics 12, 671–682 (2011). 318. Kyriakidou, M., Tai, H. H., Anglin, N. L., Ellis, D. &amp; Strömvik, M. V. Current strategies of polyploid plant genome sequence assembly. Frontiers in Plant Science 9, (2018). 319. Paszkiewicz, K. &amp; Studholme, D. J. De novo assembly of short sequence reads. Briefings in Bioinformatics 11, 457–472 (2010). 320. Sohn, J. &amp; Nam, J.-W. The present and future of de novo whole-genome assembly. Briefings in Bioinformatics 19, 23–40 (2018). 321. Sleator, R. D. &amp; Walsh, P. An overview of in silico protein function prediction. Archives of Microbiology 192, 151–155 (2010). 322. Koboldt, D. C. Best practices for variant calling in clinical sequencing. Genome Medicine 12, 91 (2020). 323. Alkan, C., Coe, B. P. &amp; Eichler, E. E. Genome structural variation discovery and genotyping. Nature Reviews Genetics 12, 363–376 (2011). 324. Ho, S. S., Urban, A. E. &amp; Mills, R. E. Structural variation in the sequencing era. Nature Reviews Genetics 21, 171–189 (2020). 325. Morrison, D. A. Phylogenetic tree-building. International Journal for Parasitology 26, 589–617 (1996). 326. Kapli, P., Yang, Z. &amp; Telford, M. J. Phylogenetic tree building in the genomic age. Nature Reviews Genetics 21, 428–444 (2020). 327. Kuhlman, B. &amp; Bradley, P. Advances in protein structure prediction and design. Nature Reviews Molecular Cell Biology 20, 681–697 (2019). 328. Ammad-ud-din, M., Khan, S. A., Wennerberg, K. &amp; Aittokallio, T. Systematic identification of feature combinations for predicting drug response with bayesian multi-view multi-task linear regression. Bioinformatics 33, i359–i368 (2017). 329. Steiner, M. C., Gibson, K. M. &amp; Crandall, K. A. Drug Resistance Prediction Using Deep Learning Techniques on HIV-1 Sequence Data. Viruses 12, 560 (2020). 330. Noé, F., De Fabritiis, G. &amp; Clementi, C. Machine learning for protein folding and dynamics. Current Opinion in Structural Biology 60, 77–84 (2020). 331. Pearce, R. &amp; Zhang, Y. Toward the solution of the protein structure prediction problem. Journal of Biological Chemistry 297, (2021). 332. Tunyasuvunakool, K. et al. Highly accurate protein structure prediction for the human proteome. Nature 596, 590–596 (2021). 333. Cheng, J., Tegge, A. N. &amp; Baldi, P. Machine learning methods for protein structure prediction. IEEE Reviews in Biomedical Engineering 1, 41–49 (2008). 334. AlQuraishi, M. Machine learning in protein structure prediction. Current Opinion in Chemical Biology 65, 1–8 (2021). 335. Wittmann, B. J., Johnston, K. E., Wu, Z. &amp; Arnold, F. H. Advances in machine learning for directed evolution. Current Opinion in Structural Biology 69, 11–18 (2021). 336. Yang, K. K., Wu, Z. &amp; Arnold, F. H. Machine-learning-guided directed evolution for protein engineering. Nature Methods 16, 687–694 (2019). 337. Li, G., Dong, Y. &amp; Reetz, M. T. Can Machine Learning Revolutionize Directed Evolution of Selective Enzymes? Advanced Synthesis &amp; Catalysis 361, 2377–2386 (2019). 338. Xie, R., Wen, J., Quitadamo, A., Cheng, J. &amp; Shi, X. A deep auto-encoder model for gene expression prediction. BMC Genomics 18, 845 (2017). 339. Ortuño, F. M. et al. Comparing different machine learning and mathematical regression models to evaluate multiple sequence alignments. Neurocomputing 164, 123–136 (2015). 340. Wang, S., Sun, S., Li, Z., Zhang, R. &amp; Xu, J. Accurate De Novo Prediction of Protein Contact Map by Ultra-Deep Learning Model. PLOS Computational Biology 13, e1005324 (2017). 341. Haga, H. et al. A machine learning-based treatment prediction model using whole genome variants of hepatitis C virus. PLOS ONE 15, e0242028 (2020). 342. Zazzi, M. et al. Predicting response to antiretroviral treatment by machine learning: The EuResist project. Intervirology 55, 123–127 (2012). 343. Ren, Y. et al. Prediction of antimicrobial resistance based on whole-genome sequencing and machine learning. Bioinformatics 38, 325–334 (2022). 344. Kim, J. I. et al. Machine learning for antimicrobial resistance prediction: Current practice, limitations, and clinical perspective. Clinical Microbiology Reviews 0, e00179–21 (2022). 345. Wang, Y. et al. Predicting DNA Methylation State of CpG Dinucleotide Using Genome Topological Features and Deep Networks. Scientific Reports 6, 19598 (2016). 346. Rätsch, G., Sonnenburg, S. &amp; Schäfer, C. Learning Interpretable SVMs for Biological Sequence Classification. BMC Bioinformatics 7, S9 (2006). 347. Jones, D. T. Protein secondary structure prediction based on position-specific scoring matrices. Journal of Molecular Biology 292, 195–202 (1999). 348. Wei, L., Ding, Y., Su, R., Tang, J. &amp; Zou, Q. Prediction of human protein subcellular localization using deep learning. Journal of Parallel and Distributed Computing 117, 212–217 (2018). 349. Wang, H., Yan, L., Huang, H. &amp; Ding, C. From protein sequence to protein function via multi-label linear discriminant analysis. IEEE/ACM Transactions on Computational Biology and Bioinformatics 14, 503–513 (2017). 350. Kelley, D. R., Snoek, J. &amp; Rinn, J. L. Basset: Learning the regulatory code of the accessible genome with deep convolutional neural networks. Genome Research 26, 990–999 (2016). 351. Hastie, T., Tibshirani, R. &amp; Friedman, J. The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Second Edition. (Springer Science &amp; Business Media, 2009). 352. Kriventseva, E. V., Biswas, M. &amp; Apweiler, R. Clustering and analysis of protein families. Current Opinion in Structural Biology 11, 334–339 (2001). 353. Fu, L., Niu, B., Zhu, Z., Wu, S. &amp; Li, W. CD-HIT: Accelerated for clustering the next-generation sequencing data. Bioinformatics 28, 3150–3152 (2012). 354. Balaban, M., Moshiri, N., Mai, U., Jia, X. &amp; Mirarab, S. TreeCluster: Clustering biological sequences using phylogenetic trees. PLOS ONE 14, e0221068 (2019). 355. Zorita, E., Cuscó, P. &amp; Filion, G. J. Starcode: Sequence clustering based on all-pairs search. Bioinformatics 31, 1913–1919 (2015). 356. Ondov, B. D. et al. Mash: Fast genome and metagenome distance estimation using MinHash. Genome Biology 17, 132 (2016). 357. Baker, D. N. &amp; Langmead, B. Dashing: Fast and accurate genomic distances with HyperLogLog. Genome Biology 20, 265 (2019). 358. Corso, G. et al. Neural distance embeddings for biological sequences. in vol. 34 1853918551 (Curran Associates, Inc., 2021). 359. Hopf, T. A. et al. Mutation effects predicted from sequence co-variation. Nature Biotechnology 35, 128–135 (2017). 360. Castro, B. M., Lemes, R. B., Cesar, J., Hünemeier, T. &amp; Leonardi, F. A model selection approach for multiple sequence segmentation and dimensionality reduction. Journal of Multivariate Analysis 167, 319–330 (2018). 361. Haschka, T., Ponger, L., Escudé, C. &amp; Mozziconacci, J. MNHN-tree-tools: A toolbox for tree inference using multi-scale clustering of a set of sequences. Bioinformatics 37, 3947–3949 (2021). 362. Konishi, T. et al. Principal Component Analysis applied directly to Sequence Matrix. Scientific Reports 9, 19297 (2019). 363. Ben-Hur, A. &amp; Guyon, I. Detecting Stable Clusters Using Principal Component Analysis. in 159–182 (Humana Press, 2003). doi:10.1385/1-59259-364-X:159. 364. Ding, C. &amp; He, X. K-means clustering via principal component analysis. in 29 (Association for Computing Machinery, 2004). doi:10.1145/1015330.1015408. 365. Casari, G., Sander, C. &amp; Valencia, A. Sequencespace: A tool for family analysis. 2, 171178 (1995). 366. Clamp, M., Cuff, J., Searle, S. M. &amp; Barton, G. J. The jalview java alignment editor. Bioinformatics 20, 426–427 (2004). 367. Xia, Z., Wu, L.-Y., Zhou, X. &amp; Wong, S. T. Semi-supervised drug-protein interaction prediction from heterogeneous biological spaces. BMC Systems Biology 4, S6 (2010). 368. Tamposis, I. A., Tsirigos, K. D., Theodoropoulou, M. C., Kontou, P. I. &amp; Bagos, P. G. Semi-supervised learning of hidden markov models for biological sequence analysis. Bioinformatics 35, 2208–2215 (2019). 369. Elnaggar, A. et al. ProtTrans: Towards cracking the language of life’s code through self-supervised deep learning and high performance computing. doi:10.48550/arXiv.2007.06225. 370. Lu, A. X. et al. Discovering molecular features of intrinsically disordered regions by using evolution for contrastive learning. PLOS Computational Biology 18, e1010238 (2022). 371. Townshend, R., Bedi, R., Suriana, P. &amp; Dror, R. End-to-end learning on 3D protein structure for interface prediction. in vol. 32 (Curran Associates, Inc., 2019). 372. Lee, B., Baek, J., Park, S. &amp; Yoon, S. deepTarget: End-to-end learning framework for microRNA target prediction using deep recurrent neural networks. in 434442 (Association for Computing Machinery, 2016). doi:10.1145/2975167.2975212. 373. Goodfellow, I., Bengio, Y. &amp; Courville, A. Deep learning. (MIT Press, 2016). 374. Wang, Q., Ma, Y., Zhao, K. &amp; Tian, Y. A Comprehensive Survey of Loss Functions in Machine Learning. Annals of Data Science 9, 187–212 (2022). 375. Jiao, Y. &amp; Du, P. Performance measures in evaluating machine learning based bioinformatics predictors for classifications. Quantitative Biology 4, 320–330 (2016). 376. Brodersen, K. H., Ong, C. S., Stephan, K. E. &amp; Buhmann, J. M. The Balanced Accuracy and Its Posterior Distribution. in 2010 20th International Conference on Pattern Recognition 3121–3124 (2010). doi:10.1109/ICPR.2010.764. 377. Kaufman, S., Rosset, S. &amp; Perlich, C. Leakage in data mining: Formulation, detection, and avoidance. in 556563 (Association for Computing Machinery, 2011). doi:10.1145/2020408.2020496. 378. Whalen, S., Schreiber, J., Noble, W. S. &amp; Pollard, K. S. Navigating the pitfalls of applying machine learning in genomics. Nature Reviews Genetics 23, 169–181 (2022). 379. Fisher, R. A. On the interpretation of χ2 from contingency tables, and the calculation of p. Journal of the Royal Statistical Society 85, 87–94 (1922). 380. Pearson, K. X. On the criterion that a given system of deviations from the probable in the case of a correlated system of variables is such that it can be reasonably supposed to have arisen from random sampling. The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science 50, 157–175 (1900). 381. Hoerl, A. E. &amp; Kennard, R. W. Ridge regression: Biased estimation for nonorthogonal problems. Technometrics 12, 55–67 (1970). 382. Tibshirani, R. Regression Shrinkage and Selection Via the Lasso. Journal of the Royal Statistical Society: Series B (Methodological) 58, 267–288 (1996). 383. Zhang, H. The Optimality of Naive Bayes. 6. 384. Rish, I. An empirical study of the naive Bayes classifier. 6. 385. Vapnik, V. Estimation of dependences based on empirical data: Springer series in statistics (springer series in statistics). (Springer-Verlag, 1982). 386. Boser, B. E., Guyon, I. M. &amp; Vapnik, V. N. A training algorithm for optimal margin classifiers. in 144152 (Association for Computing Machinery, 1992). doi:10.1145/130385.130401. 387. Cortes, C. &amp; Vapnik, V. Support-vector networks. Machine Learning 20, 273–297 (1995). 388. Drucker, H., Burges, C. J. C., Kaufman, L., Smola, A. &amp; Vapnik, V. Support vector regression machines. in vol. 9 (MIT Press, 1996). 389. Breiman, L. Random Forests. Machine Learning 45, 5–32 (2001). 390. Breiman, L., Friedman, J. H., Olshen, R. A. &amp; Stone, C. J. Classification and regression trees. (1983). 391. Kingsford, C. &amp; Salzberg, S. L. What are decision trees? Nature Biotechnology 26, 1011–1013 (2008). 392. Caruana, R. &amp; Niculescu-Mizil, A. An empirical comparison of supervised learning algorithms. in 161168 (Association for Computing Machinery, 2006). doi:10.1145/1143844.1143865. 393. Yang, P., Hwa Yang, Y., B. Zhou, B. &amp; Y. Zomaya, A. A review of ensemble methods in bioinformatics. Current Bioinformatics 5, 296–308 (2010). 394. Potdar, K., S., T. &amp; D., C. A Comparative Study of Categorical Variable Encoding Techniques for Neural Network Classifiers. International Journal of Computer Applications 175, 7–9 (2017). 395. Hassani Saadi, H., Sameni, R. &amp; Zollanvari, A. Interpretive time-frequency analysis of genomic sequences. BMC Bioinformatics 18, 154 (2017). 396. Brouwer, R. K. A feed-forward network for input that is both categorical and quantitative. Neural Networks 15, 881–890 (2002). 397. Kunanbayev, K., Temirbek, I. &amp; Zollanvari, A. 2021 international joint conference on neural networks (IJCNN). in 1–6 (2021). doi:10.1109/IJCNN52387.2021.9534094. 398. Dufresne, Y. et al. The k-mer file format: A standardized and compact disk representation of sets of k-mers. Bioinformatics btac528 (2022) doi:10.1093/bioinformatics/btac528. 399. Wright, E. S. Using DECIPHER v2.0 to analyze big biological sequence data in r. The R Journal 8, 352–359 (2016). 400. Zamani, M. &amp; Kremer, S. C. 2011 IEEE international conference on bioinformatics and biomedicine workshops (BIBMW). in 327–333 (2011). doi:10.1109/BIBMW.2011.6112394. 401. Singh, D., Singh, P. &amp; Sisodia, D. S. Evolutionary based optimal ensemble classifiers for HIV-1 protease cleavage sites prediction. Expert Systems with Applications 109, 86–99 (2018). 402. Qian, N. &amp; Sejnowski, T. J. Predicting the secondary structure of globular proteins using neural network models. Journal of Molecular Biology 202, 865–884 (1988). 403. Budach, S. &amp; Marsico, A. Pysster: Classification of biological sequences by learning sequence and structure motifs with convolutional neural networks. Bioinformatics 34, 3035–3037 (2018). 404. Choong, A. C. H. &amp; Lee, N. K. 2017 international conference on computer and drone applications (IConDA). in 60–65 (2017). doi:10.1109/ICONDA.2017.8270400. 405. McGinnis, W. et al. Scikit-Learn-Contrib/Categorical-Encoding: Release For Zenodo. (2018) doi:10.5281/ZENODO.1157110. 406. Kawashima, S. et al. AAindex: amino acid index database, progress report 2008. Nucleic Acids Research 36, D202–D205 (2008). 407. Li, Z.-C., Zhou, X.-B., Dai, Z. &amp; Zou, X.-Y. Prediction of protein structural classes by Chou’s pseudo amino acid composition: approached using continuous wavelet transform and principal component analysis. Amino Acids 37, 415 (2008). 408. Nanni, L. &amp; Lumini, A. A new encoding technique for peptide classification. Expert Systems with Applications 38, 3185–3191 (2011). 409. Chen, Z. et al. iFeature: A python package and web server for features extraction and selection from protein and peptide sequences. Bioinformatics 34, 2499–2502 (2018). 410. Taylor, W. R. The classification of amino acid conservation. Journal of Theoretical Biology 119, 205–218 (1986). 411. Zvelebil, M. J., Barton, G. J., Taylor, W. R. &amp; Sternberg, M. J. E. Prediction of protein secondary structure and active sites using the alignment of homologous sequences. Journal of Molecular Biology 195, 957–961 (1987). 412. Kremer, S. &amp; Lac, H. Method, system and computer program product for levinthal process induction from known structure using machine learning. (2009). 413. Maetschke, S., Towsey, M. &amp; Bodén, M. Blomap: An encoding of amino acids which improves signal peptide cleavage site prediction. in vols Volume 1 141–150 (PUBLISHED BY IMPERIAL COLLEGE PRESS AND DISTRIBUTED BY WORLD SCIENTIFIC PUBLISHING CO., 2005). 414. Gök, M. &amp; Özcerit, A. T. A new feature encoding scheme for HIV-1 protease cleavage site prediction. Neural Computing and Applications 22, 1757–1761 (2013). 415. Saha, S. &amp; Bhattacharya, T. A Novel Approach to Find the Saturation Point of n-Gram Encoding Method for Protein Sequence Classification Involving Data Mining. in 101–108 (Springer, 2019). doi:10.1007/978-981-13-2354-6_12. 416. Jeffrey, H. J. Chaos game representation of gene structure. Nucleic Acids Research 18, 2163–2170 (1990). 417. Löchel, H. F. &amp; Heider, D. Chaos game representation and its applications in bioinformatics. Computational and Structural Biotechnology Journal 19, 6263–6271 (2021). 418. Cartes, J. A., Anand, S., Ciccolella, S., Bonizzoni, P. &amp; Vedova, G. D. Accurate and Fast Clade Assignment via Deep Learning and Frequency Chaos Game Representation. doi:10.1101/2022.06.13.495912. 419. Ni, H., Mu, H. &amp; Qi, D. Applying frequency chaos game representation with perceptual image hashing to gene sequence phylogenetic analyses. Journal of Molecular Graphics and Modelling 107, 107942 (2021). 420. Lwoff, A. The concept of virus. Journal of General Microbiology 17, 239–253 (1957). 421. Minor, P. D. Viruses. in (John Wiley &amp; Sons, Ltd, 2014). doi:10.1002/9780470015902.a0000441.pub3. 422. Stapleton, J. T., Foung, S., Muerhoff, A. S., Bukh, J. &amp; Simmonds, P. The GB viruses: A review and proposed classification of GBV-a, GBV-c (HGV), and GBV-d in genus pegivirus within the family flaviviridae. The Journal of General Virology 92, 233–246 (2011). 423. Yamamoto, N. et al. Characterization of a non-pathogenic H5N1 influenza virus isolated from a migratory duck flying from siberia in hokkaido, japan, in october 2009. Virology Journal 8, 65 (2011). 424. Shi, M. et al. The evolutionary history of vertebrate RNA viruses. Nature 556, 197–202 (2018). 425. Atlas of invertebrate viruses. (CRC Press, 2017). doi:10.1201/9781315149929. 426. Lefeuvre, P. et al. Evolution and ecology of plant viruses. Nature Reviews Microbiology 17, 632–644 (2019). 427. Wang, A. L. &amp; Wang, C. C. Viruses of parasitic protozoa. Parasitology Today 7, 76–80 (1991). 428. Fermin, G., Mazumdar-Leighton, S. &amp; Tennant, P. Viruses of prokaryotes, protozoa, fungi, and chromista. in 217 (2018). 429. Sutela, S., Poimala, A. &amp; Vainio, E. J. Viruses of fungi and oomycetes in the soil environment. FEMS Microbiology Ecology 95, fiz119 (2019). 430. Twort, F. W. AN INVESTIGATION ON THE NATURE OF ULTRA-MICROSCOPIC VIRUSES. The Lancet 186, 1241–1243 (1915). 431. Delbrock, M. Bacterial Viruses or Bacteriophages. Biological Reviews 21, 30–40 (1946). 432. Clark, J. R. &amp; March, J. B. Bacterial viruses as human vaccines? Expert Review of Vaccines 3, 463–476 (2004). 433. Kan-Davelaar, H. E. van, Hest, J. C. M. van, Cornelissen, J. J. L. M. &amp; Koay, M. S. T. Using viruses as nanomedicines. British Journal of Pharmacology 171, 4001–4009 (2014). 434. Prangishvili, D., Basta, T., Garrett, R. A. &amp; Krupovic, M. Viruses of the Archaea. in 1–9 (John Wiley &amp; Sons, Ltd, 2016). doi:10.1002/9780470015902.a0000774.pub3. 435. Prangishvili, D., Forterre, P. &amp; Garrett, R. A. Viruses of the Archaea: a unifying view. Nature Reviews Microbiology 4, 837–848 (2006). 436. Francki, R. I. B. Plant virus satellites. ANNUAL REVIEW OF MICROBIOLOGY. 437. Xu, P. &amp; Roossinck, M. J. Plant Virus Satellites. in (John Wiley &amp; Sons, Ltd, 2011). doi:10.1002/9780470015902.a0000771.pub2. 438. Lai, M. M. The molecular biology of hepatitis delta virus. Annual review of biochemistry 64, 259–286 (1995). 439. Hughes, S. A., Wedemeyer, H. &amp; Harrison, P. M. Hepatitis delta virus. The Lancet 378, 73–85 (2011). 440. Desnues, C., Boyer, M. &amp; Raoult, D. Chapter 3 - Sputnik, a Virophage Infecting the Viral Domain of Life. in (eds. Łobocka, M. &amp; Szybalski, W. T.) vol. 82 63–89 (Academic Press, 2012). 441. Gaia, M. et al. Zamilon, a Novel Virophage with Mimiviridae Host Specificity. PLOS ONE 9, e94923 (2014). 442. Edgar, R. C. et al. Petabase-scale sequence alignment catalyses viral discovery. Nature 602, 142–147 (2022). 443. Nasir, A., Romero-Severson, E. &amp; Claverie, J.-M. Investigating the Concept and Origin of Viruses. Trends in Microbiology 28, 959–967 (2020). 444. Forterre, P. &amp; Prangishvili, D. The origin of viruses. Research in Microbiology 160, 466–472 (2009). 445. Forterre, P. The origin of viruses and their possible roles in major evolutionary transitions. Virus Research 117, 5–16 (2006). 446. Boeke, J. &amp; Stoye, J. Retrotransposons, Endogenous Retroviruses, and the Evolution of Retroelement. (1997). 447. Kojima, S. et al. Virus-like insertions with sequence signatures similar to those of endogenous nonretroviral RNA viruses in the human genome. Proceedings of the National Academy of Sciences 118, e2010758118 (2021). 448. Löwer, R., Löwer, J. &amp; R Kurth. The viruses in all of us: Characteristics and biological significance of human endogenous retrovirus sequences. Proceedings of the National Academy of Sciences 93, 5177–5184 (1996). 449. Griffiths, D. J. Endogenous retroviruses in the human genome sequence. Genome Biology 2, reviews1017.1 (2001). 450. Baltimore, D. Expression of animal virus genomes. Bacteriological Reviews 35, 235–241 (1971). 451. Koonin, E. V., Krupovic, M. &amp; Agol, V. I. The baltimore classification of viruses 50 years later: How does it stand in the light of virus evolution? Microbiology and Molecular Biology Reviews 85, e00053–21 (2021). 452. Domingo, E. &amp; Perales, C. RNA Virus Genomes. in 1–12 (John Wiley &amp; Sons, Ltd, 2018). doi:10.1002/9780470015902.a0001488.pub3. 453. McGeoch, D. J., Rixon, F. J. &amp; Davison, A. J. Topics in herpesvirus genomics and evolution. Virus Research 117, 90–104 (2006). 454. Boehmer, P. &amp; Nimonkar, A. Herpes Virus Replication. IUBMB Life 55, 13–22 (2003). 455. Brentjens, M. H., Yeung-Yue, K. A., Lee, P. C. &amp; Tyring, S. K. Human papillomavirus: a review. Dermatologic Clinics 20, 315–331 (2002). 456. Kay, A. &amp; Zoulim, F. Hepatitis B virus genetic variability and evolution. Virus Research 127, 164–176 (2007). 457. Parashar, U. D., Bresee, J. S., Gentsch, J. R. &amp; Glass, R. I. Rotavirus. Emerging Infectious Diseases 4, 561–570 (1998). 458. Simmonds, P. Variability of hepatitis C virus. Hepatology 21, 570–583 (1995). 459. Wimmer, E., Hellen, C. U. T. &amp; Cao, X. Genetics of poliovirus. Annual Review of Genetics 27, 353–437 (1993). 460. Racaniello, V. R. One hundred years of poliovirus pathogenesis. Virology 344, 9–16 (2006). 461. Palese, P., Zheng, H., Engelhardt, O. G., Pleschka, S. &amp; García-Sastre, A. Negative-strand RNA viruses: Genetic engineering and applications. Proceedings of the National Academy of Sciences 93, 11354–11358 (1996). 462. Domingo, E. &amp; Perales, C. Virus Evolution. in (John Wiley &amp; Sons, Ltd, 2014). doi:10.1002/9780470015902.a0000436.pub3. 463. V’kovski, P., Kratzel, A., Steiner, S., Stalder, H. &amp; Thiel, V. Coronavirus biology and replication: implications for SARS-CoV-2. Nature Reviews Microbiology 19, 155–170 (2021). 464. Bäck, A. T. &amp; Lundkvist, Å. Dengue viruses an overview. Infection Ecology &amp; Epidemiology 3, 10.3402/iee.v3i0.19839 (2013). 465. Dustin, L. B., Bartolini, B., Capobianchi, M. R. &amp; Pistello, M. Hepatitis c virus: Life cycle in cells, infection and host response, and analysis of molecular markers influencing the outcome of infection and response to therapy. Clinical microbiology and infection : the official publication of the European Society of Clinical Microbiology and Infectious Diseases 22, 826–832 (2016). 466. Kadaja, M., Silla, T., Ustav, E. &amp; Ustav, M. Papillomavirus DNA replication From initiation to genomic instability. Virology 384, 360–368 (2009). 467. Weller, S. K. &amp; Coen, D. M. Herpes simplex viruses: Mechanisms of DNA replication. Cold Spring Harbor Perspectives in Biology 4, a013011 (2012). 468. Beck, J. &amp; Nassal, M. Hepatitis b virus replication. World Journal of Gastroenterology : WJG 13, 48–64 (2007). 469. Pyle, J. D. &amp; Scholthof, K.-B. G. Chapter 58 - Biology and Pathogenesis of Satellite Viruses. in (eds. Hadidi, A., Flores, R., Randles, J. W. &amp; Palukaitis, P.) 627–636 (Academic Press, 2017). doi:10.1016/B978-0-12-801498-1.00058-9. 470. Raoult, D. et al. The 1.2-megabase genome sequence of Mimivirus. Science (New York, N.Y.) 306, 1344–1350 (2004). 471. Campillo-Balderas, J. A., Lazcano, A. &amp; Becerra, A. Viral genome size distribution does not correlate with the antiquity of the host lineages. Frontiers in Ecology and Evolution 3, (2015). 472. Cann, A. J. Virus Structure. in 1–9 (John Wiley &amp; Sons, Ltd, 2015). doi:10.1002/9780470015902.a0000439.pub2. 473. Hladik, F. &amp; McElrath, M. J. Setting the stage: host invasion by HIV. Nature Reviews Immunology 8, 447–457 (2008). 474. Shaw, G. M. &amp; Hunter, E. HIV Transmission. Cold Spring Harbor Perspectives in Medicine 2, a006965 (2012). 475. Weiss, R. A. How does HIV cause AIDS? Science 260, 1273–1279 (1993). 476. Melhuish, A. &amp; Lewthwaite, P. Natural history of HIV and AIDS. Medicine 46, 356–361 (2018). 477. Murray, J. F. et al. Pulmonary complications of the acquired immunodeficiency syndrome. New England Journal of Medicine 310, 1682–1688 (1984). 478. Sampath, S. et al. Pandemics Throughout the History. Cureus 13, (2021). 479. World Health Organization. Global report: UNAIDS report on the global AIDS epidemic 2010. (World Health Organization, 2010). 480. Barré-Sinoussi, F. et al. Isolation of a T-lymphotropic retrovirus from a patient at risk for acquired immune deficiency syndrome (AIDS). Science (New York, N.Y.) 220, 868–871 (1983). 481. Gallo, R. C. et al. Isolation of human T-cell leukemia virus in acquired immune deficiency syndrome (AIDS). Science (New York, N.Y.) 220, 865–867 (1983). 482. Clavel, F. et al. Isolation of a new human retrovirus from west african patients with AIDS. Science 233, 343–346 (1986). 483. Gilbert, P. B. et al. Comparison of HIV-1 and HIV-2 infectivity from a prospective cohort study in Senegal. Statistics in Medicine 22, 573–593 (2003). 484. Loeff, M. F. S. van der et al. Sixteen years of HIV surveillance in a West African research clinic reveals divergent epidemic trends of HIV-1 and HIV-2. International Journal of Epidemiology 35, 1322–1328 (2006). 485. Gao, F. et al. Origin of HIV-1 in the chimpanzee Pan troglodytes troglodytes. Nature 397, 436–441 (1999). 486. Hamel, D. J. et al. Twenty years of prospective molecular epidemiology in Senegal: changes in HIV diversity. AIDS research and human retroviruses 23, 1189–1196 (2007). 487. Sharp, P. M. &amp; Hahn, B. H. Origins of HIV and the AIDS pandemic. Cold Spring Harbor Perspectives in Medicine: 1, a006841 (2011). 488. Hirsch, V. M., Olmsted, R. A., Murphey-Corb, M., Purcell, R. H. &amp; Johnson, P. R. An African primate lentivirus (SIVsmclosely related to HIV-2. Nature 339, 389–392 (1989). 489. Gao, F. et al. Human infection by genetically diverse SIVSM-related HIV-2 in West Africa. Nature 358, 495–499 (1992). 490. Chen, Z. et al. Genetic characterization of new West African simian immunodeficiency virus SIVsm: geographic clustering of household-derived SIV strains with human immunodeficiency virus type 2 subtypes and genetically diverse viruses from a single feral sooty mangabey troop. Journal of Virology 70, 3617–3627 (1996). 491. Hemelaar, J. The origin and diversity of the HIV-1 pandemic. Trends in Molecular Medicine 18, 182–192 (2012). 492. Worobey, M. et al. Direct evidence of extensive diversity of HIV-1 in Kinshasa by 1960. Nature 455, 661–664 (2008). 493. Vidal, N. et al. Unprecedented degree of human immunodeficiency virus type 1 (HIV-1) group M genetic diversity in the Democratic Republic of Congo suggests that the HIV-1 pandemic originated in Central Africa. Journal of Virology 74, 10498–10507 (2000). 494. Faria, N. R. et al. The early spread and epidemic ignition of HIV-1 in human populations. Science (New York, N.Y.) 346, 56–61 (2014). 495. Korber, B. et al. Timing the ancestor of the HIV-1 pandemic strains. Science (New York, N.Y.) 288, 1789–1796 (2000). 496. Rambaut, A., Posada, D., Crandall, K. A. &amp; Holmes, E. C. The causes and consequences of HIV evolution. Nature Reviews Genetics 5, 52–61 (2004). 497. McCutchan, F. E. Global epidemiology of HIV. Journal of Medical Virology 78, S7–S12 (2006). 498. Pérez-Losada, M., Arenas, M., Galán, J. C., Palero, F. &amp; González-Candelas, F. Recombination in viruses: Mechanisms, methods of study, and evolutionary consequences. Infection, Genetics and Evolution 30, 296–307 (2015). 499. Robertson, D. L., Hahn, B. H. &amp; Sharp, P. M. Recombination in AIDS viruses. Journal of Molecular Evolution 40, 249–259 (1995). 500. HIV circulating recombinant forms (CRFs). 501. Lau, K. A. &amp; Wong, J. J. L. Current trends of HIV recombination worldwide. Infectious Disease Reports 5, e4 (2013). 502. Posada, D., Crandall, K. A. &amp; Holmes, E. C. Recombination in evolutionary genomics. Annual Review of Genetics 36, 75–97 (2002). 503. Taylor, B. S., Sobieszczyk, M. E., McCutchan, F. E. &amp; Hammer, S. M. The challenge of HIV-1 subtype diversity. New England Journal of Medicine 358, 1590–1602 (2008). 504. Hemelaar, J., Gouws, E., Ghys, P. D. &amp; Osmanov, S. Global trends in molecular epidemiology of HIV-1 during 20002007. AIDS (London, England) 25, 679–689 (2011). 505. Distribution of all HIV-1 sequences: WORLD. 506. Freed, E. O. HIV-1 Replication. Somatic Cell and Molecular Genetics 26, 13–33 (2001). 507. Ferguson, M. R., Rojo, D. R., Lindern, J. J. von &amp; O’Brien, W. A. HIV-1 replication cycle. Clinics in Laboratory Medicine 22, 611–635 (2002). 508. Gougeon, M. L., Laurent-Crawford, A. G., Hovanessian, A. G. &amp; Montagnier, L. Direct and indirect mechanisms mediating apoptosis during HIV infection: contribution to in vivo CD4 T cell depletion. Seminars in Immunology 5, 187–194 (1993). 509. Vidya Vijayan, K. K., Karthigeyan, K. P., Tripathi, S. P. &amp; Hanna, L. E. Pathophysiology of CD4+ t-cell depletion in HIV-1 and HIV-2 infections. Frontiers in Immunology 8, 580 (2017). 510. Frankel, A. D. &amp; Young, J. A. HIV-1: fifteen proteins and an RNA. Annual Review of Biochemistry 67, 1–25 (1998). 511. Fossen, T. et al. Solution structure of the human immunodeficiency virus type 1 p6 protein *. Journal of Biological Chemistry 280, 42515–42527 (2005). 512. Göttlinger, H. G., Dorfman, T., Sodroski, J. G. &amp; Haseltine, W. A. Effect of mutations affecting the p6 gag protein on human immunodeficiency virus particle release. Proceedings of the National Academy of Sciences 88, 3195–3199 (1991). 513. Huang, M., Orenstein, J. M., Martin, M. A. &amp; Freed, E. O. p6Gag is required for particle production from full-length human immunodeficiency virus type 1 molecular clones expressing protease. Journal of Virology 69, 6810–6818 (1995). 514. Bour, S., Geleziunas, R. &amp; Wainberg, M. A. The human immunodeficiency virus type 1 (HIV-1) CD4 receptor and its central role in promotion of HIV-1 infection. Microbiological Reviews 59, 63–93 (1995). 515. Hernandez, L. D., Hoffman, L. R., Wolfsberg, T. G. &amp; White, J. M. Virus-cell and cell-cell fusion. Annual Review of Cell and Developmental Biology 12, 627–661 (1996). 516. Jones, K. &amp; Peterlin, B. Control of rna initiation and elongation at the hiv-1 promoter. Annual Review of Biochemistry 63, 717–743 (1994). 517. Hope, T. J. Viral RNA export. Chemistry &amp; Biology 4, 335–344 (1997). 518. Mangasarian, A. &amp; Trono, D. The multifaceted role of HIV Nef. Research in Virology 148, 30–33 (1997). 519. Cohen, é. A., Subbramanian, R. A. &amp; Göttlinger, H. G. Role of Auxiliary Proteins in Retroviral Morphogenesis. in (ed. Kräusslich, H.-G.) 219–235 (Springer, 1996). doi:10.1007/978-3-642-80145-7_7. 520. Lamb, R. A. &amp; Pinto, L. H. Do Vpu and Vpr of Human Immunodeficiency Virus Type 1 and NB of Influenza B Virus Have Ion Channel Activities in the Viral Life Cycles? Virology 229, 1–11 (1997). 521. Khan, N. &amp; Geiger, J. D. Role of viral protein u (vpu) in HIV-1 infection and pathogenesis. Viruses 13, 1466 (2021). 522. Emerman, M. HIV-1, Vpr and the cell cycle. Current Biology 6, 1096–1103 (1996). 523. Miller, R. H. Human immunodeficiency virus may encode a novel protein on the genomic DNA plus strand. Science (New York, N.Y.) 239, 1420–1422 (1988). 524. Briquet, S. &amp; Vaquero, C. Immunolocalization Studies of an Antisense Protein in HIV-1-Infected Cells and Viral Particles. Virology 292, 177–184 (2002). 525. Cassan, E., Arigon-Chifolleau, A.-M., Mesnard, J.-M., Gross, A. &amp; Gascuel, O. Concomitant emergence of the antisense protein gene of HIV-1 and of the pandemic. Proceedings of the National Academy of Sciences 113, 11537–11542 (2016). 526. Savoret, J. et al. A pilot study of the humoral response against the AntiSense protein (ASP) in HIV-1-infected patients. Frontiers in Microbiology 11, (2020). 527. Zardecki, C. et al. PDB-101: Educational resources supporting molecular explorations through biology and medicine. Protein Science 31, 129–140 (2022). 528. Eisinger, R. W., Dieffenbach, C. W. &amp; Fauci, A. S. HIV viral load and transmissibility of HIV infection: Undetectable equals untransmittable. JAMA 321, 451–452 (2019). 529. Palella, F. J. et al. Declining morbidity and mortality among patients with advanced human immunodeficiency virus infection. New England Journal of Medicine 338, 853–860 (1998). 530. Forsythe, S. S. et al. Twenty years of antiretroviral therapy for people living with HIV: Global costs, health achievements, economic benefits. Health Affairs 38, 1163–1172 (2019). 531. Fischl, M. A. et al. The efficacy of azidothymidine (AZT) in the treatment of patients with AIDS and AIDS-related complex. New England Journal of Medicine 317, 185–191 (1987). 532. Richman, D. D. Susceptibility to nucleoside analogues of zidovudine-resistant isolates of human immunodeficiency virus. The American Journal of Medicine 88, S8–S10 (1990). 533. Yeo, J. Y., Goh, G.-R., Su, C. T.-T. &amp; Gan, S. K.-E. The Determination of HIV-1 RT Mutation Rate, Its Possible Allosteric Effects, and Its Implications on Drug Resistance. Viruses 12, 297 (2020). 534. Cuevas, J. M., Geller, R., Garijo, R., López-Aldeguer, J. &amp; Sanjuán, R. Extremely High Mutation Rate of HIV-1 In Vivo. PLOS Biology 13, e1002251 (2015). 535. Carvajal-Rodríguez, A., Crandall, K. A. &amp; Posada, D. Recombination favors the evolution of drug resistance in HIV-1 during antiretroviral therapy. Infection, genetics and evolution : journal of molecular epidemiology and evolutionary genetics in infectious diseases 7, 476–483 (2007). 536. Gulick, R. M. et al. Treatment with indinavir, zidovudine, and lamivudine in adults with human immunodeficiency virus infection and prior antiretroviral therapy. The New England Journal of Medicine 337, 734–739 (1997). 537. Wensing, A. M. J., Maarseveen, N. M. van &amp; Nijhuis, M. Fifteen years of HIV Protease Inhibitors: raising the barrier to resistance. Antiviral Research 85, 59–74 (2010). 538. Pedersen, O. S. &amp; Pedersen, E. B. Non-Nucleoside Reverse Transcriptase Inhibitors: The NNRTI Boom. Antiviral Chemistry and Chemotherapy 10, 285–314 (1999). 539. Scarsi, K. K., Havens, J. P., Podany, A. T., Avedissian, S. N. &amp; Fletcher, C. V. HIV-1 Integrase Inhibitors: A Comparative Review of Efficacy and Safety. Drugs 80, 1649–1676 (2020). 540. Fletcher, C. V. Enfuvirtide, a new drug for HIV infection. The Lancet 361, 1577–1578 (2003). 541. Esté, J. A. &amp; Telenti, A. HIV entry inhibitors. The Lancet 370, 81–88 (2007). 542. Kilby, J. M. &amp; Eron, J. J. Novel therapies based on mechanisms of HIV-1 cell entry. New England Journal of Medicine 348, 2228–2238 (2003). 543. Yeni, P. Update on HAART in HIV. Journal of Hepatology 44, S100–S103 (2006). 544. Palmisano, L. &amp; Vella, S. A brief history of antiretroviral therapy of HIV infection: success and challenges. Annali dell’Istituto Superiore Di Sanita 47, 44–48 (2011). 545. Pennings, P. S. HIV drug resistance: problems and perspectives. Infectious Disease Reports 5, e5 (2013). 546. Mehta, S., Moore, R. D. &amp; Graham, N. M. H. Potential factors affecting adherence with HIV therapy. AIDS 11, 16651670 (1997). 547. Miller, N. H. Compliance with treatment regimens in chronic asymptomatic diseases. The American Journal of Medicine 102, 43–49 (1997). 548. Chesney, M. A., Morin, M. &amp; Sherr, L. Adherence to HIV combination therapy. Social Science &amp; Medicine 50, 1599–1605 (2000). 549. Aldir, I., Horta, A. &amp; Serrado, M. Single-tablet regimens in HIV: Does it really make a difference? Current Medical Research and Opinion 30, 89–97 (2014). 550. Grant, R. M. et al. Preexposure chemoprophylaxis for HIV prevention in men who have sex with men. New England Journal of Medicine 363, 2587–2599 (2010). 551. Baeten, J. M. et al. Antiretroviral prophylaxis for HIV prevention in heterosexual men and women. The New England Journal of Medicine 367, 399–410 (2012). 552. Buchbinder, S. P. &amp; Liu, A. Pre-exposure prophylaxis and the promise of combination prevention approaches. AIDS and behavior 15 Suppl 1, S72–79 (2011). 553. Riddell, J. I., Amico, K. R. &amp; Mayer, K. H. HIV preexposure prophylaxis: A review. JAMA 319, 1261–1268 (2018). 554. EMA. Truvada. (2018). 555. About PrEP | PrEP | HIV basics | HIV/AIDS | CDC. (2022). 556. Zolopa, A. R. The evolution of HIV treatment guidelines: Current state-of-the-art of ART. Antiviral Research 85, 241–244 (2010). 557. World Health Organization. Consolidated guidelines on HIV prevention, testing, treatment, service delivery and monitoring: recommendations for a public health approach. (2021). 558. Ammaranond, P. &amp; Sanguansittianan, S. Mechanism of HIV antiretroviral drugs progress toward drug resistance. Fundamental &amp; Clinical Pharmacology 26, 146–161 (2012). 559. Clavel, F. &amp; Hance, A. J. HIV drug resistance. New England Journal of Medicine 350, 1023–1035 (2004). 560. Sarafianos, S. G. et al. Structure and function of HIV-1 reverse transcriptase: Molecular mechanisms of polymerization and inhibition. Journal of molecular biology 385, 693–713 (2009). 561. Goodsell, D. S., Autin, L. &amp; Olson, A. J. Illustrate: Software for Biomolecular Illustration. Structure (London, England: 1993) 27, 1716–1720.e1 (2019). 562. Esnouf, R. M. et al. Unique features in the structure of the complex between HIV-1 reverse transcriptase and the bis(heteroaryl)piperazine (BHAP) U-90152 explain resistance mutations for this nonnucleoside inhibitor. Proceedings of the National Academy of Sciences of the United States of America 94, 3984–3989 (1997). 563. Hang, J. Q. et al. Activity of the isolated HIV RNase H domain and specific inhibition by N-hydroxyimides. Biochemical and Biophysical Research Communications 317, 321–329 (2004). 564. Klumpp, K. &amp; Mirzadegan, T. Recent progress in the design of small molecule inhibitors of HIV RNase h. Current Pharmaceutical Design 12, 1909–1922 (2006). 565. Menéndez-Arias, L. Mechanisms of resistance to nucleoside analogue inhibitors of HIV-1 reverse transcriptase. Virus Research 134, 124–146 (2008). 566. Sluis-Cremer, N., Arion, D. &amp; Parniak*, M. A. Molecular mechanisms of HIV-1 resistance to nucleoside reverse transcriptase inhibitors (NRTIs). Cellular and Molecular Life Sciences CMLS 57, 1408–1422 (2000). 567. Sarafianos, S. G. et al. Lamivudine (3TC) resistance in HIV-1 reverse transcriptase involves steric hindrance with beta-branched amino acids. Proceedings of the National Academy of Sciences of the United States of America 96, 10027–10032 (1999). 568. Meyer, P. R., Matsuura, S. E., Mian, A. M., So, A. G. &amp; Scott, W. A. A mechanism of AZT resistance: an increase in nucleotide-dependent primer unblocking by mutant HIV-1 reverse transcriptase. Molecular Cell 4, 35–43 (1999). 569. Boyer, P. L., Sarafianos, S. G., Arnold, E. &amp; Hughes, S. H. Selective excision of AZTMP by drug-resistant human immunodeficiency virus reverse transcriptase. Journal of Virology 75, 4832–4842 (2001). 570. Deeks, S. G. Nonnucleoside reverse transcriptase inhibitor resistance. JAIDS Journal of Acquired Immune Deficiency Syndromes 26, S25 (2001). 571. Ren, J. &amp; Stammers, D. K. Structural basis for drug resistance mechanisms for non-nucleoside inhibitors of HIV reverse transcriptase. Virus Research 134, 157–170 (2008). 572. Lloyd, S. B., Kent, S. J. &amp; Winnall, W. R. The high cost of fidelity. AIDS Research and Human Retroviruses 30, 8–16 (2014). 573. Pearl, L. H. &amp; Taylor, W. R. A structural model for the retroviral proteases. Nature 329, 351–354 (1987). 574. Gulnik, S., Erickson, J. W. &amp; Xie, D. HIV protease: Enzyme function and drug resistance. in vol. 58 213–256 (Academic Press, 2000). 575. Silva, A. M., Cachau, R. E., Sham, H. L. &amp; Erickson, J. W. Inhibition and catalytic mechanism of HIV-1 aspartic protease. Journal of Molecular Biology 255, 321–340 (1996). 576. Hornak, V., Okur, A., Rizzo, R. C. &amp; Simmerling, C. HIV-1 protease flaps spontaneously open and reclose in molecular dynamics simulations. Proceedings of the National Academy of Sciences 103, 915–920 (2006). 577. Freedberg, D. I. et al. Rapid structural fluctuations of the free HIV protease flaps in solution: Relationship to crystal structures and comparison with predictions of dynamics calculations. Protein Science : A Publication of the Protein Society 11, 221–232 (2002). 578. Yu, Y. et al. Structural insights into HIV-1 protease flap opening processes and key intermediates. RSC Advances 7, 45121–45128 (2017). 579. Roberts, N. A. et al. Rational design of peptide-based HIV proteinase inhibitors. Science 248, 358–361 (1990). 580. Lv, Z., Chu, Y. &amp; Wang, Y. HIV protease inhibitors: A review of molecular selectivity and toxicity. HIV/AIDS (Auckland, N.Z.) 7, 95–104 (2015). 581. Prabu-Jeyabalan, M., Nalivaika, E. &amp; Schiffer, C. A. Substrate shape determines specificity of recognition for HIV-1 protease: Analysis of crystal structures of six substrate complexes. Structure 10, 369–381 (2002). 582. Prabu-Jeyabalan, M. et al. Substrate envelope and drug resistance: Crystal structure of RO1 in complex with wild-type human immunodeficiency virus type 1 protease. Antimicrobial Agents and Chemotherapy 50, 1518–1521 (2006). 583. Kurt Yilmaz, N., Swanstrom, R. &amp; Schiffer, C. A. Improving Viral Protease Inhibitors to Counter Drug Resistance. Trends in Microbiology 24, 547–557 (2016). 584. Chiu, T. K. &amp; Davies, D. R. Structure and function of HIV-1 integrase. Current Topics in Medicinal Chemistry 4, 965–977 (2004). 585. Esposito, D. &amp; Craigie, R. HIV Integrase Structure and Function. in (eds. Rlaramorosch, K., Murphy, F. A. &amp; Shawn, A. J.) vol. 52 319–333 (Academic Press, 1999). 586. Delelis, O., Carayon, K., Saïb, A., Deprez, E. &amp; Mouscadet, J.-F. Integrase and integration: Biochemical activities of HIV-1 integrase. Retrovirology 5, 114 (2008). 587. Maertens, G. N., Engelman, A. N. &amp; Cherepanov, P. Structure and function of retroviral integrase. Nature Reviews Microbiology 20, 20–34 (2022). 588. Pommier, Y., Johnson, A. A. &amp; Marchand, C. Integrase inhibitors to treat HIV/Aids. Nature Reviews Drug Discovery 4, 236–248 (2005). 589. Blanco, J.-L., Varghese, V., Rhee, S.-Y., Gatell, J. M. &amp; Shafer, R. W. HIV-1 integrase inhibitor resistance and its clinical implications. The Journal of Infectious Diseases 203, 1204–1214 (2011). 590. Geretti, A. M., Armenia, D. &amp; Ceccherini-Silberstein, F. Emerging patterns and implications of HIV-1 integrase inhibitor resistance. Current Opinion in Infectious Diseases 25, 677686 (2012). 591. Knox, D. C., Anderson, P. L., Harrigan, P. R. &amp; Tan, D. H. S. Multidrug-resistant HIV-1 infection despite preexposure prophylaxis. New England Journal of Medicine 376, 501–502 (2017). 592. Hurt, C. B., Eron, J. J. &amp; Cohen, M. S. Pre-exposure prophylaxis and antiretroviral resistance: HIV prevention at a cost? Clinical Infectious Diseases: An Official Publication of the Infectious Diseases Society of America 53, 1265–1270 (2011). 593. Gibas, K. M., Berg, P. van den, Powell, V. E. &amp; Krakower, D. S. Drug Resistance During HIV Pre-Exposure Prophylaxis. Drugs 79, 609–619 (2019). 594. Mourad, R. et al. A phylotype-based analysis highlights the role of drug-naive HIV-positive individuals in the transmission of antiretroviral resistance in the UK. Aids 29, 1917–1925 (2015). 595. Hué, S. et al. Demonstration of Sustained Drug-Resistant Human Immunodeficiency Virus Type 1 Lineages Circulating among Treatment-Naïve Individuals. Journal of Virology 83, 2645–2654 (2009). 596. Drescher, S. M. et al. Treatment-naive individuals are the major source of transmitted HIV-1 drug resistance in men who have sex with men in the swiss HIV cohort study. Clinical Infectious Diseases 58, 285–294 (2014). 597. Boerma, R. S. et al. High levels of pre-treatment HIV drug resistance and treatment failure in Nigerian children. Journal of the International AIDS Society 19, 21140 (2016). 598. Clutter, D. S., Jordan, M. R., Bertagnolio, S. &amp; Shafer, R. W. HIV-1 drug resistance and resistance testing. Infection, Genetics and Evolution 46, 292–307 (2016). 599. Kühnert, D. et al. Quantifying the fitness cost of HIV-1 drug resistance mutations through phylodynamics. PLOS Pathogens 14, e1006895 (2018). 600. Mesplède, T. et al. Viral fitness cost prevents HIV-1 from evading dolutegravir drug pressure. Retrovirology 10, 22 (2013). 601. Castro, H. et al. Persistence of HIV-1 Transmitted Drug Resistance Mutations. The Journal of Infectious Diseases 208, 1459–1463 (2013). 602. Blassel, L. et al. Drug resistance mutations in HIV: new bioinformatics approaches and challenges. Current Opinion in Virology 51, 56–64 (2021). 603. UK CHIC Steering Committee. The creation of a large UK-based multicentre cohort of HIV-infected individuals: The UK Collaborative HIV Cohort (UK CHIC) Study. HIV Medicine 5, 115–124 (2004). 604. Abeler-Dörner, L. et al. PANGEA-HIV 2: Phylogenetics and networks for generalised epidemics in africa. Current Opinion in HIV and AIDS 14, 173180 (2019). 605. Shafer, R. W. Rationale and Uses of a Public HIV Drug-Resistance Database. The Journal of Infectious Diseases 194, S51–S58 (2006). 606. Kuiken, C., Korber, B. &amp; Shafer, R. W. HIV sequence databases. AIDS reviews 5, 52–61 (2003). 607. Wensing, A. M. et al. 2019 update of the drug resistance mutations in HIV-1. Topics in Antiviral Medicine 27, 111–121 (2019). 608. Clark, S. A., Calef, C. &amp; Mellors, J. W. Mutations in retroviral genes associated with drug resistance. HIV sequence compendium 58158 (2007). 609. Liu, T. F. &amp; Shafer, R. W. Web Resources for HIV Type 1 Genotypic-Resistance Test Interpretation. Clinical Infectious Diseases 42, 1608–1618 (2006). 610. Johnson, V. A. et al. Update of the drug resistance mutations in HIV-1: March 2013. Topics in Antiviral Medicine 21, 6–7 (2016). 611. Villabona-Arenas, C. J. et al. In-depth analysis of HIV-1 drug resistance mutations in HIV-infected individuals failing first-line regimens in West and Central Africa. AIDS 30, 2577 (2016). 612. Shulman, N. S., Bosch, R. J., Mellors, J. W., Albrecht, M. A. &amp; Katzenstein, D. A. Genetic correlates of efavirenz hypersusceptibility. AIDS 18, 17811785 (2004). 613. Miller, M. D. et al. Genotypic and phenotypic predictors of the magnitude of response to tenofovir disoproxil fumarate treatment in antiretroviral-experienced patients. The Journal of Infectious Diseases 189, 837–846 (2004). 614. Brown, B. W. &amp; Russell, K. Methods correcting for multiple testing: operating characteristics. Statistics in Medicine 16, 2511–2528 (1997). 615. Austin, P. C., Mamdani, M. M., Juurlink, D. N. &amp; Hux, J. E. Testing multiple statistical hypotheses resulted in spurious associations: a study of astrological signs and health. Journal of Clinical Epidemiology 59, 964–969 (2006). 616. Hochberg, Y. &amp; Tamhane, A. C. Multiple comparison procedures. (1987). 617. Benjamini, Y. &amp; Hochberg, Y. Controlling the false discovery rate: A practical and powerful approach to multiple testing. Journal of the Royal Statistical Society. Series B (Methodological) 57, 289–300 (1995). 618. Gonzales, M. J. et al. Extended spectrum of HIV-1 reverse transcriptase mutations in patients receiving multiple nucleoside analog inhibitors. AIDS (London, England) 17, 791–799 (2003). 619. Seoighe, C. et al. A model of directional selection applied to the evolution of drug resistance in HIV-1. Molecular Biology and Evolution 24, 1025–1031 (2007). 620. Sham, P. C. &amp; Purcell, S. M. Statistical power and significance testing in large-scale genetic studies. Nature Reviews Genetics 15, 335–346 (2014). 621. Alizon, S. et al. Phylogenetic Approach Reveals That Virus Genotype Largely Determines HIV Set-Point Viral Load. PLOS Pathogens 6, e1001123 (2010). 622. Flynn, W. F. et al. Deep Sequencing of Protease Inhibitor Resistant HIV Patient Isolates Reveals Patterns of Correlated Mutations in Gag and Protease. PLOS Computational Biology 11, e1004249 (2015). 623. Petropoulos, C. J. et al. A novel phenotypic drug susceptibility assay for human immunodeficiency virus type 1. Antimicrobial Agents and Chemotherapy 44, 920–928 (2000). 624. Hertogs, K. et al. A rapid method for simultaneous detection of phenotypic resistance to inhibitors of protease and reverse transcriptase in recombinant human immunodeficiency virus type 1 isolates from patients treated with antiretroviral drugs. Antimicrobial Agents and Chemotherapy 42, 269–276 (1998). 625. Heilek-Snyder, G. &amp; Bean, P. Role of HIV phenotypic assays in the management of HIV infection. American Clinical Laboratory 21, 40–43 (2002). 626. Moyle, G. J. et al. Epidemiology and predictive factors for chemokine receptor use in HIV-1 infection. The Journal of Infectious Diseases 191, 866–872 (2005). 627. Gartland, M. et al. Susceptibility of global HIV-1 clinical isolates to fostemsavir using the PhenoSense® entry assay. Journal of Antimicrobial Chemotherapy 76, 648–652 (2021). 628. Masquelier, B. et al. Genotypic and phenotypic resistance patterns of human immunodeficiency virus type 1 variants with insertions or deletions in the reverse transcriptase (RT): Multicenter study of patients treated with RT inhibitors. Antimicrobial Agents and Chemotherapy 45, 1836–1842 (2001). 629. Larder, B. A. &amp; Kemp, S. D. Multiple mutations in HIV-1 reverse transcriptase confer high-level resistance to zidovudine (AZT). Science (New York, N.Y.) 246, 1155–1158 (1989). 630. Vreese, K. de et al. Resistance of human immunodeficiency virus type 1 reverse transcriptase to TIBO derivatives induced by site-directed mutagenesis. Virology 188, 900–904 (1992). 631. Tambuyzer, L., Nijs, S., Daems, B., Picchio, G. &amp; Vingerhoets, J. Effect of mutations at position E138 in HIV-1 reverse transcriptase on phenotypic susceptibility and virologic response to etravirine. JAIDS Journal of Acquired Immune Deficiency Syndromes 58, 1822 (2011). 632. Katzenstein, D. A. et al. Phenotypic susceptibility and virological outcome in nucleoside-experienced patients receiving three or four antiretroviral drugs. AIDS 17, 821830 (2003). 633. Blassel, L. et al. Using machine learning and big data to explore the drug resistance landscape in HIV. PLOS Computational Biology 17, e1008873 (2021). 634. Sheik Amamuddy, O., Bishop, N. T. &amp; Tastan Bishop, Ö. Improving fold resistance prediction of HIV-1 against protease and reverse transcriptase inhibitors using artificial neural networks. BMC Bioinformatics 18, 369 (2017). 635. Beerenwinkel, N. et al. Geno2pheno: Interpreting genotypic HIV drug resistance tests. IEEE Intelligent Systems 16, 35–41 (2001). 636. Riemenschneider, M., Hummel, T. &amp; Heider, D. SHIVA - a web application for drug resistance and tropism testing in HIV. BMC Bioinformatics 17, 314 (2016). 637. Beerenwinkel, N. et al. Diversity and complexity of HIV-1 drug resistance: A bioinformatics approach to predicting phenotype from genotype. Proceedings of the National Academy of Sciences 99, 8271–8276 (2002). 638. Heider, D., Senge, R., Cheng, W. &amp; Hüllermeier, E. Multilabel classification for exploiting cross-resistance information in HIV-1 drug resistance prediction. Bioinformatics 29, 1946–1952 (2013). 639.Lepri, A. C. et al. The Journal of Infectious Diseases 181, 1143–1147 (2000). 640. Verhofstede, C. et al. Detection of drug resistance mutations as a predictor of subsequent virological failure in patients with HIV-1 viral rebounds of less than 1,000 RNA copies/ml. Journal of Medical Virology 79, 1254–1260 (2007). 641. Zhukova, A., Cutino-Moguel, T., Gascuel, O. &amp; Pillay, D. The Role of Phylogenetics as a Tool to Predict the Spread of Resistance. The Journal of Infectious Diseases 216, S820–S823 (2017). 642. Bennett, D. E. et al. Drug Resistance Mutations for Surveillance of Transmitted HIV-1 Drug-Resistance: 2009 Update. PLOS ONE 4, e4724 (2009). 643. Hammond, J., Calef, C., Larder, B., Schinazi, R. &amp; Mellors, J. W. Mutations in Retroviral Genes Associated with Drug Resistance. Human retroviruses and AIDS 11136–11179 (1998). 644. Wensing, A. M. et al. 2017 Update of the Drug Resistance Mutations in HIV-1., 2017 Update of the Drug Resistance Mutations in HIV-1. Topics in antiviral medicine, Topics in Antiviral Medicine 24, 24, 132, 132–133 (2016). 645. Dudoit, S. &amp; Laan, M. J. van der. Multiple Testing Procedures with Applications to Genomics. (Springer Science &amp; Business Media, 2007). 646. Maddison, W. P. &amp; FitzJohn, R. G. The Unsolved Challenge to Phylogenetic Correlation Tests for Categorical Characters. Systematic Biology 64, 127–136 (2015). 647. Lengauer, T. &amp; Sing, T. Bioinformatics-assisted anti-HIV therapy. Nature Reviews Microbiology 4, 790–797 (2006). 648. Zhang, J., Rhee, S.-Y., Taylor, J. &amp; Shafer, R. W. Comparison of the Precision and Sensitivity of the Antivirogram and PhenoSense HIV Drug Susceptibility Assays. JAIDS Journal of Acquired Immune Deficiency Syndromes 38, 439–444 (2005). 649. Beerenwinkel, N. et al. Geno2pheno: Estimating phenotypic drug resistance from HIV-1 genotypes. Nucleic Acids Research 31, 3850–3855 (2003). 650. Shen, C., Yu, X., Harrison, R. W. &amp; Weber, I. T. Automated prediction of HIV drug resistance from genotype data. BMC Bioinformatics 17, 278 (2016). 651. Yu, X., Weber, I. T. &amp; Harrison, R. W. Prediction of HIV drug resistance from genotype with encoded three-dimensional protein structure. BMC Genomics 15, S1 (2014). 652. Araya, S. T. &amp; Hazelhurst, S. Support vector machine prediction of HIV-1 drug resistance using the viral nucleotide patterns. Transactions of the Royal Society of South Africa 64, 62–72 (2009). 653. Riemenschneider, M., Senge, R., Neumann, U., Hüllermeier, E. &amp; Heider, D. Exploiting HIV-1 protease and reverse transcriptase cross-resistance information for improved drug resistance prediction by means of multi-label classification. BioData Mining 9, 10 (2016). 654. Drăghici, S. &amp; Potter, R. B. Predicting HIV drug resistance with neural networks. Bioinformatics 19, 98–107 (2003). 655. Mooney, A. C. et al. Beyond Social Desirability Bias: Investigating Inconsistencies in Self-Reported HIV Testing and Treatment Behaviors Among HIV-Positive Adults in North West Province, South Africa. AIDS and Behavior 22, 2368–2379 (2018). 656. Brier, G. W. Verification of Forecasts Expressed in Terms of Probability. Monthly Weather Review 78, 1–3 (1950). 657. Gascuel, O. et al. Twelve Numerical, Symbolic and Hybrid Supervised Classification Methods. International Journal of Pattern Recognition and Artificial Intelligence 12, 517–571 (1998). 658. Goeman, J. J. &amp; Solari, A. Multiple hypothesis testing in genomics. Statistics in Medicine 33, 1946–1978 (2014). 659. Rennie, J. D., Shih, L., Teevan, J. &amp; Karger, D. R. Tackling the Poor Assumptions of Naive Bayes Text Classifiers. in Proceedings of the 20th international conference on machine learning (ICML-03) 616–623 (2003). 660. Alvarez Melis, D. &amp; Jaakkola, T. Towards Robust Interpretability with Self-Explaining Neural Networks. in Advances in Neural Information Processing Systems 31 (eds. Bengio, S. et al.) 7775–7784 (Curran Associates, Inc., 2018). 661. Zhang, Q., Wu, Y. N. &amp; Zhu, S.-C. Interpretable Convolutional Neural Networks. in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition 8827–8836 (2018). 662. Schrödinger, LLC. The PyMOL molecular graphics system, version 1.8. (2015). 663. Rhee, S.-Y., Liu, T. F., Holmes, S. P. &amp; Shafer, R. W. HIV-1 Subtype B Protease and Reverse Transcriptase Amino Acid Covariation. PLOS Computational Biology 3, e87 (2007). 664. De Luca, A. et al. Improved Interpretation of Genotypic Changes in the HIV-1 Reverse Transcriptase Coding Region That Determine the Virological Response to Didanosine. The Journal of Infectious Diseases 196, 1645–1653 (2007). 665. Marcelin, A.-G. et al. Impact of HIV-1 reverse transcriptase polymorphism at codons 211 and 228 on virological response to didanosine. Antiviral Therapy 8 (2006). 666. Brown, A. J. L. et al. Reduced Susceptibility of Human Immunodeficiency Virus Type 1 (HIV-1) from Patients with Primary HIV Infection to Nonnucleoside Reverse Transcriptase Inhibitors Is Associated with Variation at Novel Amino Acid Sites. Journal of Virology 74, 10269–10273 (2000). 667. Clark, S. A., Shulman, N. S., Bosch, R. J. &amp; Mellors, J. W. Reverse transcriptase mutations 118I, 208Y, and 215Y cause HIV-1 hypersusceptibility to non-nucleoside reverse transcriptase inhibitors. AIDS 20, 981–984 (2006). 668. Nebbia, G., Sabin, C. A., Dunn, D. T. &amp; Geretti, A. M. Emergence of the H208Y mutation in the reverse transcriptase (RT) of HIV-1 in association with nucleoside RT inhibitor therapy. Journal of Antimicrobial Chemotherapy 59, 1013–1016 (2007). 669. Saracino, A. et al. Impact of unreported HIV-1 reverse transcriptase mutations on phenotypic resistance to nucleoside and non-nucleoside inhibitors. Journal of Medical Virology 78, 9–17 (2006). 670. Wu, T. T., Chen, Y. F., Hastie, T., Sobel, E. &amp; Lange, K. Genome-wide association analysis by lasso penalized logistic regression. Bioinformatics 25, 714–721 (2009). 671. Rosenblatt, F. The perceptron: A probabilistic model for information storage and organization in the brain. Psychological Review 65, 386–408 (1958). 672. Rumelhart, D. E., Hinton, G. E. &amp; Williams, R. J. Learning representations by back-propagating errors. Nature 323, 533–536 (1986). 673. Li, Y. &amp; Yuan, Y. Convergence analysis of two-layer neural networks with ReLU activation. in vol. 30 (Curran Associates, Inc., 2017). 674. Murtagh, F. Multilayer perceptrons for classification and regression. Neurocomputing 2, 183–197 (1991). 675. Cybenko, G. Approximation by superpositions of a sigmoidal function. Mathematics of Control, Signals and Systems 2, 303–314 (1989). 676. Hornik, K., Stinchcombe, M. &amp; White, H. Multilayer feedforward networks are universal approximators. Neural Networks 2, 359–366 (1989). 677. Hornik, K. Approximation capabilities of multilayer feedforward networks. Neural Networks 4, 251–257 (1991). 678. LeCun, Y. et al. Backpropagation applied to handwritten zip code recognition. Neural Computation 1, 541–551 (1989). 679. Lecun, Y., Bottou, L., Bengio, Y. &amp; Haffner, P. Gradient-based learning applied to document recognition. Proceedings of the IEEE 86, 2278–2324 (1998). 680. Voznica, J. et al. Deep learning from phylogenies to uncover the epidemiological dynamics of outbreaks. Nature Communications 13, 3896 (2022). 681. Krizhevsky, A., Sutskever, I. &amp; Hinton, G. E. ImageNet classification with deep convolutional neural networks. Communications of the ACM 60, 8490 (2017). 682. He, K., Zhang, X., Ren, S. &amp; Sun, J. Proceedings of the IEEE conference on computer vision and pattern recognition. in 770–778 (2016). 683. Bahdanau, D., Cho, K. &amp; Bengio, Y. Neural machine translation by jointly learning to align and translate. doi:10.48550/arXiv.1409.0473. 684. Vaswani, A. et al. Attention is all you need. in vol. 30 (Curran Associates, Inc., 2017). 685. Moreta, L. S. et al. International Conference on Learning Representations. in (2022). 686. Wu, Z., Johnston, K. E., Arnold, F. H. &amp; Yang, K. K. Protein sequence design with deep generative models. Current Opinion in Chemical Biology 65, 18–27 (2021). 687. Stanton, S. et al. Accelerating bayesian optimization for biological sequence design with denoising autoencoders. doi:10.48550/arXiv.2203.12742. 688. How many words are there in english? | merriam-webster. 689. Mikolov, T., Chen, K., Corrado, G. &amp; Dean, J. Efficient estimation of word representations in vector space. doi:10.48550/arXiv.1301.3781. 690. Mikolov, T., Sutskever, I., Chen, K., Corrado, G. S. &amp; Dean, J. Distributed representations of words and phrases and their compositionality. in vol. 26 (Curran Associates, Inc., 2013). 691. Goldberg, Y. &amp; Levy, O. word2vec explained: Deriving mikolov et al.’s negative-sampling word-embedding method. doi:10.48550/arXiv.1402.3722. 692. Ng, P. dna2vec: Consistent vector representations of variable-length k-mers. doi:10.48550/arXiv.1701.06279. 693. Liang, Y. et al. Hyb4mC: a hybrid DNA2vec-based model for DNA N4-methylcytosine sites prediction. BMC Bioinformatics 23, 258 (2022). 694. Kimothi, D., Soni, A., Biyani, P. &amp; Hogan, J. M. Distributed representations for biological sequence analysis. doi:10.48550/arXiv.1608.05949. 695. Asgari, E. &amp; Mofrad, M. R. K. Continuous distributed representation of biological sequences for deep proteomics and genomics. PLoS ONE 10, e0141287 (2015). 696. Kimothi, D., Shukla, A., Biyani, P., Anand, S. &amp; Hogan, J. M. 2017 IEEE 18th international workshop on signal processing advances in wireless communications (SPAWC). in 1–5 (2017). doi:10.1109/SPAWC.2017.8227769. 697. Devlin, J., Chang, M.-W., Lee, K. &amp; Toutanova, K. BERT: Pre-training of deep bidirectional transformers for language understanding. doi:10.48550/arXiv.1810.04805. 698. Brown, T. et al. Language models are few-shot learners. in vol. 33 18771901 (Curran Associates, Inc., 2020). 699. Song, B. et al. Pretraining model for biological sequence data. Briefings in Functional Genomics 20, 181–195 (2021). 700. Madani, A. et al. ProGen: Language modeling for protein generation. bioRxiv (2020) doi:10.1101/2020.03.07.982272. 701. Erik Nijkamp, Jeffrey A. Ruffolo, Eli N. Weinstein, Nikhil Naik &amp; Ali Madani. ProGen2: Exploring the boundaries of protein language models. ArXiv (2022) doi:10.48550/arxiv.2206.13517. 702. Ji, Y., Zhou, Z., Liu, H. &amp; Davuluri, R. V. DNABERT: Pre-trained bidirectional encoder representations from transformers model for DNA-language in genome. Bioinformatics 37, 2112–2120 (2021). 703. Bepler, T. &amp; Berger, B. Learning the protein language: Evolution, structure, and function. Cell systems 12, (2021). 704. Rao, R., Meier, J., Sercu, T., Ovchinnikov, S. &amp; Rives, A. Transformer protein language models are unsupervised structure learners. doi:10.1101/2020.12.15.422761. 705. Rives, A. et al. Biological Structure and Function Emerge from Scaling Unsupervised Learning to 250 Million Protein Sequences. bioRxiv 622803 (2019) doi:10.1101/622803. 706. Bhattacharya, N. et al. Single Layers of Attention Suffice to Predict Protein Contacts. doi:10.1101/2020.12.21.423882. 707. Hu, M. et al. Exploring evolution-based &amp; -free protein language models as protein function predictors. doi:10.48550/arXiv.2206.06583. 708. Meier, J. et al. Language models enable zero-shot prediction of the effects of mutations on protein function. bioRxiv 34, (2021). 709. Hie, B., Kevin K Yang &amp; Kim, S. K. Evolutionary velocity with protein language models predicts evolutionary dynamics of diverse proteins. Cell systems (2022) doi:10.1016/j.cels.2022.01.003. 710. Benegas, G., Batra, S. S. &amp; Song, Y. S. DNA language models are powerful zero-shot predictors of non-coding variant effects. doi:10.1101/2022.08.22.504706. 711. Cai, T. et al. Genome-wide Prediction of Small Molecule Binding to Remote Orphan Proteins Using Distilled Sequence Alignment Embedding. doi:10.1101/2020.08.04.236729. 712. Rao, R. et al. MSA transformer. bioRxiv (2021) doi:10.1101/2021.02.12.430858. 713. Sturmfels, P., Vig, J., Madani, A. &amp; Rajani, N. F. Profile prediction: An alignment-based pre-training task for protein sequence models. doi:10.48550/arXiv.2012.00195. 714. Sercu, T. et al. Neural Potts Model. doi:10.1101/2021.04.08.439084. 715. Baid, G. et al. DeepConsensus improves the accuracy of sequences with a gap-aware sequence transformer. Nature Biotechnology 1–7 (2022) doi:10.1038/s41587-022-01435-7. 716. Vig, J. et al. BERTology meets biology: Interpreting attention in protein language models. doi:10.48550/arXiv.2006.15222. 717. Gao, M. &amp; Skolnick, J. A novel sequence alignment algorithm based on deep learning of the protein folding code. Bioinformatics 37, 490–496 (2021). 718. Morton, J. T. et al. Protein Structural Alignments From Sequence. doi:10.1101/2020.11.03.365932. 719. Llinares-López, F., Berthet, Q., Blondel, M., Teboul, O. &amp; Vert, J.-P. Deep embedding and alignment of protein sequences. doi:10.1101/2021.11.15.468653. 720. Petti, S. et al. End-to-end learning of multiple sequence alignments with differentiable Smith-Waterman. doi:10.1101/2021.10.23.465204. 721. Guo, Y., Wu, J., Ma, H., Wang, S. &amp; Huang, J. Comprehensive study on enhancing low-quality position-specific scoring matrix with deep learning for accurate protein structure property prediction: Using bagging multiple sequence alignment learning. Journal of Computational Biology 28, 346–361 (2021). 722. Dotan, E. et al. Harnessing machine translation methods for sequence alignment. doi:10.1101/2022.07.22.501063. 723. Choromanski, K. et al. Masked language modeling for proteins via linearly scalable long-context transformers. doi:10.48550/arXiv.2006.03555. 724. Bhattacharya, N. et al. Interpreting potts and transformer protein models through the lens of simplified attention. in 34–45 (WORLD SCIENTIFIC, 2021). doi:10.1142/9789811250477_0004. 725. Sukhbaatar, S., Grave, E., Bojanowski, P. &amp; Joulin, A. Adaptive attention span in transformers. doi:10.48550/arXiv.1905.07799. 726. Wu, Z., Liu, Z., Lin, J., Lin, Y. &amp; Han, S. Lite transformer with long-short range attention. doi:10.48550/arXiv.2004.11886. 727. Child, R., Gray, S., Radford, A. &amp; Sutskever, I. Generating long sequences with sparse transformers. doi:10.48550/arXiv.1904.10509. 728. Correia, G. M., Niculae, V. &amp; Martins, A. F. T. EMNLP-IJCNLP 2019. in 21742184 (Association for Computational Linguistics, 2019). doi:10.18653/v1/D19-1223. 729. Kitaev, N., Kaiser, Ł. &amp; Levskaya, A. Reformer: The efficient transformer. doi:10.48550/arXiv.2001.04451. 730. Kraska, T., Beutel, A., Chi, E. H., Dean, J. &amp; Polyzotis, N. The case for learned index structures. in 489504 (Association for Computing Machinery, 2018). doi:10.1145/3183713.3196909. 731. Jung, Y. &amp; Han, D. BWA-MEME: BWA-MEM emulated with a machine learning approach. Bioinformatics 38, 2404–2413 (2022). 732. Kirsche, M., Das, A. &amp; Schatz, M. C. Sapling: Accelerating suffix array queries with learned data models. Bioinformatics 37, 744–749 (2021). 733. Ho, D. et al. LISA: Learned Indexes for Sequence Analysis. doi:10.1101/2020.12.22.423964. 734. Hoang, M., Zheng, H. &amp; Kingsford, C. Differentiable learning of sequence-specific minimizer schemes with DeepMinimizer. Journal of Computational Biology (2022) doi:10.1089/cmb.2022.0275. 735. Min, S., Lee, B. &amp; Yoon, S. TargetNet: Functional microRNA target prediction with deep neural networks. Bioinformatics 38, 671–677 (2022). 736. Bzikadze, A. V. &amp; Pevzner, P. A. Automated assembly of centromeres from ultra-long error-prone reads. Nat Biotechnol 38, 1309–1316 (2020). 737. Castresana, J. Selection of Conserved Blocks from Multiple Alignments for Their Use in Phylogenetic Analysis. Molecular Biology and Evolution 17, 540–552 (2000). 738. Pedregosa, F. et al. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12, 2825–2830 (2011). 739. Virtanen, P. et al. SciPy 1.0: Fundamental algorithms for scientific computing in Python. Nature Methods 17, 261–272 (2020). 740. Seabold, Skipper &amp; Perktold, Josef. Statsmodels: Econometric and Statistical Modeling with Python. in Proceedings of the 9th Python in Science Conference (eds. Walt, Stéfan van der &amp; Millman, Jarrod) 92–96 (2010). doi:10.25080/Majora-92bf1922-011 . 741. Vinh, N. X. &amp; Epps, J. A Novel Approach for Automatic Number of Clusters Detection in Microarray Data Based on Consensus Clustering. in 2009 Ninth IEEE International Conference on Bioinformatics and BioEngineering 84–91 (2009). doi:10.1109/BIBE.2009.19. 742. Harremoes, P. Mutual information of contingency tables and related inequalities. in 2014 IEEE International Symposium on Information Theory 2474–2478 (IEEE, 2014). doi:10.1109/ISIT.2014.6875279. "],["HPC-appendix.html", "A Supporting Information for “Mapping-friendly sequence reductions: going beyond homopolymer compression” A.1 “TandemTools” dataset generation A.2 MSR performance comparison A.3 Analyzing read origin on whole human genome A.4 Performance of MSRs on the Drosophila genome A.5 Key Resource Table", " A Supporting Information for “Mapping-friendly sequence reductions: going beyond homopolymer compression” A.1 “TandemTools” dataset generation This dataset was obtained by taking a human X chromosome HOR sequence, concatenating it 500 times with added mutations in order to obtain an approximately 1 Mbp long sequence. Then 1200 reads were simulated from the sequence using nanosim313 and assembled using a centromere-tailored pipeline736. A 10kbp deletion was then added to this assembly. The resulting sequence is the one we refer to as the “Centromeric sequence”. A.2 MSR performance comparison .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-ca4f290e{table-layout:auto;width:100%;}.cl-ca448ea4{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ca448eae{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ca448eb8{font-family:'Helvetica';font-size:6.6pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;position: relative;top:3.3pt;}.cl-ca449d36{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ca4538b8{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ca4538cc{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ca4538cd{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ca4538d6{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ca4538e0{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}labelmapq = 60mapq ≥ 50any mapqfractionerrorfractionerrorfractionerrorWhole Drosophila melanogaster genome - minimap (n=25764)HPC0.957 +0%2.27e-03 +0%0.963 +0%2.34e-03 +0%0.998 +0%1.48e-02 +0%raw0.958 +0%2.27e-03 -0%0.962 -0%2.34e-03 +0%0.997 -0%1.17e-02 -21%MSRF0.952 -1%1.18e-03 -48%0.960 -0%1.37e-03 -41%0.998 +0%1.36e-02 -8%MSRE0.946 -1%0 -100%0.954 -1%0 -100%0.998 +0%1.53e-02 +3%MSRP0.950 -1%4.90e-04 -78%0.957 -1%8.11e-04 -65%0.998 -0%1.39e-02 -6%Whole Drosophila melanogaster genome - winnowmap (n=25764)HPC0.923 +0%1.51e-03 +0%0.930 +0%1.59e-03 +0%0.989 +0%1.50e-02 +0%raw0.949 +3%1.92e-03 +27%0.954 +3%1.99e-03 +26%0.995 +1%1.33e-02 -12%MSRF0.918 -1%1.27e-03 -16%0.925 -0%1.30e-03 -18%0.987 -0%1.37e-02 -9%MSRP0.905 -2%1.33e-03 -12%0.912 -2%1.53e-03 -3%0.983 -1%1.40e-02 -7%MSRE0.905 -2%1.42e-03 -6%0.912 -2%1.49e-03 -6%0.983 -1%1.44e-02 -4%Synthetic centromeric sequence - minimap (n=12673)HPC0.870 +0%1.36e-03 +0%0.964 +0%1.56e-03 +0%1.000 +0%9.00e-03 +0%raw0.936 +8%1.86e-03 +36%0.984 +2%2.09e-03 +34%1.000 +0%4.50e-03 -50%MSRE0.885 +2%3.39e-03 +149%0.962 -0%3.53e-03 +127%1.000 +0%1.20e-02 +33%MSRF0.850 -2%2.04e-03 +50%0.968 +0%2.12e-03 +36%1.000 +0%6.63e-03 -26%MSRP0.898 +3%1.58e-03 +16%0.968 +0%1.79e-03 +15%1.000 +0%9.78e-03 +9%Synthetic centromeric sequence - winnowmap (n=12673)HPC0.775 +0%1.32e-03 +0%0.822 +0%1.82e-03 +0%0.997 +0%8.37e-02 +0%raw0.850 +10%2.04e-03 +54%0.890 +8%1.95e-03 +7%0.999 +0%4.60e-02 -45%MSRE0.795 +2%2.28e-03 +73%0.846 +3%2.52e-03 +38%0.997 -0%6.96e-02 -17%MSRF0.820 +6%1.83e-03 +38%0.867 +6%2.27e-03 +25%0.997 -0%5.97e-02 -29%MSRP0.780 +1%1.62e-03 +22%0.829 +1%2.09e-03 +15%0.997 -0%8.65e-02 +3%Whole human genome - minimap (n=655594)HPC0.935 +0%1.85e-03 +0%0.942 +0%1.85e-03 +0%1.000 +0%1.46e-02 +0%raw0.921 -1%1.86e-03 +0%0.927 -2%1.86e-03 +1%0.998 -0%1.29e-02 -11%MSRE0.926 -1%6.92e-05 -96%0.936 -1%1.17e-04 -94%0.999 -0%1.76e-02 +20%MSRP0.929 -1%2.20e-04 -88%0.938 -0%4.15e-04 -78%0.999 -0%1.55e-02 +6%MSRF0.930 -1%1.09e-03 -41%0.938 -0%1.29e-03 -30%1.000 -0%1.51e-02 +4%Whole human genome - winnowmap (n=655594)HPC0.894 +0%1.43e-03 +0%0.902 +0%1.49e-03 +0%0.988 +0%1.92e-02 +0%raw0.932 +4%1.75e-03 +23%0.937 +4%1.79e-03 +20%0.994 +1%1.43e-02 -26%MSRF0.874 -2%2.81e-04 -80%0.886 -2%3.82e-04 -74%0.984 -0%1.94e-02 +1%MSRE0.795 -11%6.33e-05 -96%0.820 -9%8.93e-05 -94%0.971 -2%2.08e-02 +9%MSRP0.826 -8%8.68e-05 -94%0.845 -6%1.14e-04 -92%0.975 -1%2.11e-02 +10%Whole Human genome (repeated regions) - minimap (n=68811)HPC0.619 +0%3.29e-04 +0%0.656 +0%3.10e-04 +0%0.998 +0%7.79e-02 +0%raw0.514 -17%1.98e-04 -40%0.539 -18%2.16e-04 -30%0.981 -2%6.69e-02 -14%MSRF0.601 -3%2.18e-04 -34%0.640 -2%2.27e-04 -27%0.998 -0%8.15e-02 +5%MSRE0.618 -0%1.41e-04 -57%0.658 +0%1.55e-04 -50%0.997 -0%8.23e-02 +6%MSRP0.616 -1%1.18e-04 -64%0.656 +0%1.99e-04 -36%0.997 -0%8.31e-02 +7%Whole Human genome (repeated regions) - winnowmap (n=68811)HPC0.525 +0%1.24e-03 +0%0.557 +0%1.49e-03 +0%0.950 +0%1.19e-01 +0%raw0.648 +23%1.26e-03 +1%0.672 +21%1.49e-03 +0%0.968 +2%8.09e-02 -32%MSRF0.482 -8%1.63e-03 +31%0.516 -7%1.83e-03 +23%0.940 -1%1.21e-01 +2%MSRE0.366 -30%6.35e-04 -49%0.405 -27%9.32e-04 -37%0.911 -4%1.38e-01 +17%MSRP0.415 -21%9.45e-04 -24%0.451 -19%1.16e-03 -22%0.920 -3%1.39e-01 +17% Table A.1: Comparing performance of MSRs on the whole human genome, whole Drosophila melanogaster genome, repeated regions of the whole human genome and synthetic centromeric sequence. Results using minimap2118 and winnowmap2119. The number of simulated reads for each reference sequence is given in parentheses and called \\(n\\). Results are reported for mapq thresholds of 60, 50 and 0. The best performance for each category is highlighted in bold. The percentage difference are computed w.r.t HPC at each given threshold. A.3 Analyzing read origin on whole human genome Figure A.1: Origin of correctly (teal) and incorrectly (red) mapped raw reads. Distribution of the origin of correctly and incorrectly mapped simulated reads (in teal and red respectively) on the different chromosomes of the whole human genome. The dark grey rectangle for each chromosome represents the centromere of that chromosome. The lighter gray rectangle on chromosomes 13, 14, 15, 21 and 22 correspond to satellites denoted as “stalk”, another repetitive region. Figure A.2: Origin of correctly (teal) and incorrectly (red) mapped reads, transformed with HPC. Distribution of the origin of correctly and incorrectly mapped simulated reads (in teal and red respectively) on the different chromosomes of the whole human genome. The dark grey rectangle for each chromosome represents the centromere of that chromosome. The lighter gray rectangle on chromosomes 13, 14, 15, 21 and 22 correspond to satellites denoted as “stalk”, another repetitive region. Figure A.3: Origin of correctly (teal) and incorrectly (red) mapped reads, transformed with MSRE. Distribution of the origin of correctly and incorrectly mapped simulated reads (in teal and red respectively) on the different chromosomes of the whole human genome. The dark grey rectangle for each chromosome represents the centromere of that chromosome. The lighter gray rectangle on chromosomes 13, 14, 15, 21 and 22 correspond to satellites denoted as “stalk”, another repetitive region. Figure A.4: Origin of correctly (teal) and incorrectly (red) mapped reads, transformed with MSRP. Distribution of the origin of correctly and incorrectly mapped simulated reads (in teal and red respectively) on the different chromosomes of the whole human genome. The dark grey rectangle for each chromosome represents the centromere of that chromosome. The lighter gray rectangle on chromosomes 13, 14, 15, 21 and 22 correspond to satellites denoted as “stalk”, another repetitive region. Figure A.5: Origin of correctly (teal) and incorrectly (red) mapped reads, transformed with MSRF. Distribution of the origin of correctly and incorrectly mapped simulated reads (in teal and red respectively) on the different chromosomes of the whole human genome. The dark grey rectangle for each chromosome represents the centromere of that chromosome. The lighter gray rectangle on chromosomes 13, 14, 15, 21 and 22 correspond to satellites denoted as “stalk”, another repetitive region. A.4 Performance of MSRs on the Drosophila genome Figure A.6: Results of the paftools mapeval evaluation on reads simulated and mapped to whole Drosophila melanogaster and Escherichia coli genomes. MSRs E, F and P are shown in different shades of blue to differentiate them from other MSRs. Reads were simulated with nanosim, and mapped with minimap2. The E. coli genome was obtained from Genbank ID U00096.2 A.5 Key Resource Table .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cadc72f0{table-layout:auto;width:100%;}.cl-cad5e66a{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cad5e67e{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cad5e688{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 255, 1.00);background-color:transparent;}.cl-cad5fc7c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cad66798{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cad667ac{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cad667ad{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} REAGENT or RESOURCESOURCEIDENTIFIERDeposited DataT2T CHM13 v1.1, whole human genome assembly(Nurk et al., 2022)Genbank accession number GCA_009914755.3Release 6 plus ISO1 MT, whole drosophila melanogaster genome assembly(Adams et al., 2000)Genbank accession number GCA_000001215.4Synthetic centrormeric sequence(Mikheenko et al., 2020)https://github.com/ablab/TandemTools/blob/master/test_data/simulated_del.fastaEscherichia coli str. K-12 substr. MG1655, complete genome(Blattner et al., 1997)Genbank accession number U00096.2Coordinates of repeated regions of the CHM13 whole genome assemblyTelomere to Telomere consortiumhttps://t2t.gi.ucsc.edu/chm13/hub/t2t-chm13-v1.1/rmsk/rmsk.bigBedSoftware and Algorithmsminimap2 v2.22-r1101(Li, 2018)https://github.com/lh3/minimap2Winnowmap v2.0(Jain et al., 2020)https://github.com/marbl/WinnowmapNanoSim v3.0.0(Yang et al., 2017)https://github.com/bcgsc/NanoSimBedtools v2.30.0(Quinlan et al., 2010)https://github.com/arq5x/bedtools2Meryl v1.0(Rhie et al., 2020)https://github.com/marbl/WinnowmapAnalysis pipelinesThis paperhttps://doi.org/10.5281/zenodo.6859636 References 118. Li, H. Minimap2: Pairwise alignment for nucleotide sequences. Bioinformatics 34, 3094–3100 (2018). 119. Jain, C. et al. Weighted minimizer sampling improves long read mapping. Bioinformatics 36, i111–i118 (2020). 313. Yang, C., Chu, J., Warren, R. L. &amp; Birol, I. NanoSim: Nanopore sequence read simulator based on statistical characterization. GigaScience 6, (2017). 736. Bzikadze, A. V. &amp; Pevzner, P. A. Automated assembly of centromeres from ultra-long error-prone reads. Nat Biotechnol 38, 1309–1316 (2020). "],["HIV-intro-appendix.html", "B Supporting Information for “HIV and DRMs” B.1 Detailed list of HIV-1 protein structures used for figure generation. B.2 List of all antiretroviral drugs", " B Supporting Information for “HIV and DRMs” B.1 Detailed list of HIV-1 protein structures used for figure generation. The images for HIV-1 structures used in Figure 5.2 were obtained from: https://cdn.rcsb.org/pdb101/learn/resources/structural-biology-of-hiv/. They are licensed under a Creative Commons By 4.0 license which allows reuse and adaptation for non commercial use. PDB structure IDs: SU and TM: 4nco MA: 1hiw CA: 3h47 NC: 1a1t RT: 1hys (for Figure 5.2) and 2hmi (for Figure 5.4) IN: 1ex4 PR: 1hpv Vpu: 1pi7 and 1vpu Vif: 3dcg Vpr: 1esx Nef: 1avv and 1qa5 Rev: 1etf Tat: 1biv and 1jfw B.2 List of all antiretroviral drugs .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cbea1e72{table-layout:auto;width:90%;}.cl-cbe2a52a{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cbe2a534{font-family:'Helvetica';font-size:6.6pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;position: relative;bottom:3.3pt;}.cl-cbe2b420{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cbe2b42a{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cbe34066{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cbe34070{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cbe3407a{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cbe3407b{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cbe34084{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cbe34085{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}NameBrand nameAbbreviationClassApproval datezidovudineretrovirZDVNRTI1987-03-19didanosine†videxddINRTI1991-10-09zalcitabine†hividddCNRTI1992-06-19stavudine†zeritd4TNRTI1994-06-24lamivudineepivir3TCNRTI1995-11-17saquinavirinviraseSQVPI1995-12-06ritonavir*norvirRTVPI1996-03-01indinavir†crixivanIDVPI1996-03-13neviparineviramuneNVPNNRTI1996-06-21nelfinavir†viraceptNFVPI1997-03-14delavirdine†rescriptorDLVNNRTI1997-04-04combivircombivir3TC+ZDVFDC1997-09-27efavirenzsustivaEFVNNRTI1998-09-17abacavirziagenABCNRTI1998-12-17amprenavir†ageneraseAPVPI1999-04-15kaletrakaletraLPV+RTVFDC2000-09-15didanosine-ec†videx-ecddI-ECNRTI2000-10-31trizivirtrizivirABC+3TC+ZDVFDC2000-11-14tenofovir-dfvireadTDFNRTI2001-10-26enfuvirtidefuzeonT-20FI2003-03-13atazanavirreyatazATCPI2003-06-20emtricitabineemtrivaFTCNRTI2003-07-02fosamprenavirlexivaFPVPI2003-10-20epzicomepzicomABC+3TCFDC2004-08-02truvadatruvadaFTC+TDFFDC2004-08-02tipranaviraptivusTPVPI2005-06-22darunavirprezistaDRVPI2006-06-23atriplaatriplaEFV+FTC+TDFFDC2006-07-12maravirocselzentryMVCCA2007-08-06raltegravirisentressRALINSTI2007-10-12etravirineintelenceETRNNRTI2008-01-18neviparine-xrviramune-xrNVP-XRNNRTI2011-03-25rilpivirineedurantRPVNNRTI2011-05-20compleracompleraFTC+RPV+TDFFDC2011-08-10stribildstribildEVG+COBI+FTC+TDFFDC2012-08-27dolutegravirtivicayDTGINSTI2013-08-12triumeqtriumeqABC+DTG+3TCFDC2014-08-22elvitegravir†vitektaEVGINSTI2014-09-14cobicistattybostCOBIPE2014-09-24evotazevotazATV+COBIFDC2015-01-29prezcobixprezcobixDRV+COBIFDC2015-01-29genvoyagenvoyaEVG+COBI+FTC+TAFFDC2015-11-05odefseyodefseyFTC+RPV+TAFFDC2016-03-01descovydescovyFTC+TAFFDC2016-04-04raltegravirisentress-hdRALINSTI2017-05-26julucajulucaDTG+RPVFDC2017-11-21symfi-losymfi-loEFV+3TC+TDFFDC2018-02-05biktarvybiktarvyBIC+FTC+TAFFDC2018-02-07cimduocimduo3TC+TDFFDC2018-02-28ibalizumab-uiyktrogarzoTNX-355PAI2018-03-06symfisymfiEFV+3TC+TDFFDC2018-03-22symtuzasymtuzaDRV+COBI+FTC+TAFFDC2018-07-17delstrigodelstrigoDOR+3TC+TDFFDC2018-08-30doravirinepifeltroDORNNRTI2018-08-30temixystemixys3TC+TDFFDC2018-11-16dovatodovatoDTG+3TCFDC2019-04-08dolutegravirtivicay-pdDTGINSTI2020-06-12fostemsavirrukobiaFTRAI2020-07-02cabenuvacabenuvaCAB+RPVFDC2021-01-22cabotegravirvocabriaCABINSTI2021-01-22 Table B.1: List of all antiretroviral drugs used in HIV therapy Zidovudine (ZDV) is also referred to as Azidothymidine (AZT) in litterature, Fixed Dose combinations (i.e. single pills combining multiple drugs) are referred to by their commercial name, the composition of these can be seen in the abbreviation. Drugs were ordered by FDA approval date. AI: Attachment Inhibitor, CA: CCR5 Antagonist, FDC: Fixed Dose Combination, FI: Fusion Inhibitor, INSTI: Integrase Inhibitor NNRTI: Non-Nucleoside Reverse Transcriptase Inhibitor, NRTI: Nucleoside Reverse Transcriptase Inhibitor, PE: Pharmacokinetic Enhancer, PAI: Post-Attachment Inhibitor, PI: Protease Inhibitor. AI, CA, FI and PAI can be grouped in a class of Entry inhibitors. * Although Ritonavir is originally a PI it is now mainly used as a PE to boost the action of other drugs. † These drugs are no longer available or recommended in HIV treatment guidelines. They may still be used in FDC regimens. Adapted from https://hivinfo.nih.gov/understanding-hiv/infographics/fda-approval-hiv-medicines and https://hivinfo.nih.gov/understanding-hiv/fact-sheets/fda-approved-hiv-medicines "],["HIV-appendix.html", "C Supporting Information for “Using Machine Learning and Big Data to Explore the Drug Resistance Landscape in HIV” C.1 S1 Appendix (Technical appendix). C.2 S1 Fig. C.3 S2 Fig. C.4 S3 Fig. C.5 S1 Table. C.6 S2 Appendix. (Fisher exact tests) C.7 S1 Data. C.8 S2 Data.", " C Supporting Information for “Using Machine Learning and Big Data to Explore the Drug Resistance Landscape in HIV” C.1 S1 Appendix (Technical appendix). C.1.1 Data C.1.1.1 Data Availability The policy of the UK HIV Drug Resistance Database is to make DNA sequences available to any bona fide researcher who submits a scientifically robust proposal, provided data exchange complies with Information Governance and Data Security Policies in all the relevant countries. This includes replication of findings from published studies, although the researcher would be encouraged to work with the main author of the published paper to understand the nuances of the data. Enquiries should be addressed to iph.hivrdb@ucl.ac.uk in the first instance. More information on the UK dataset is also available on the UK CHIC homepage: www.ukchic.org.uk. Amino acid sequences are made available along with a metadata file. The West and central African dataset is available as supplementary information along with a metadata file containing HIV subtype, treatment information and known RAM presence/absence for each sequence. Predictions made for each sequence of both datasets, by all of the trained classifiers are made available as part of the supplementary data as well as synthetic results from which the figures of the paper were drawn. The importance values for each mutation and each trained classifier are also made available. All the data and metadata files made available are hosted in the online repository linked to this project at the following URL: github.com/lucblassel/HIV-DRM-machine-learning/tree/main/data C.1.1.2 Data Preprocessing For both the African and UK datasets, the sequences were truncated to keep sites 41 to 235 of the RT protein sequence before encoding. This truncation was needed to avoid the perturbation to classifier training due to long gappy regions at the beginning and end of the UK RT alignment caused by shorter sequences. These positions were determined with the Gblocks software737 with default parameters, except for the Maximum number of sequences for a flanking position, set to 50,000, and the Allowed gap positions, which was set to “All”. The encoding was done with the OneHotEncoder from the category-encoders python module405. C.1.2 Classifiers We used classifier implementations from the scikit-learn python library738, RandomForestClassifier for the random forest classifier, MultinomialNB for Naïve Bayes and LogisticRegressionCV for logistic regression. RandomForestClassifier was used with default parameters except: \"n_jobs\"=4 \"n_estimators\"=5000 LogisticRegressionCV was used with the following parameters: \"n_jobs\"=4 \"cv\"=10 \"Cs\"=100 \"penalty\"=’l1’ \"multi_class\"=’multinomial’ \"solver\"=’saga’ \"scoring\"=’balanced_accuracy’ MultinomialNB was used with default parameters. For the Fisher exact tests, we used the implementation from the scipy python library739, and corrected p-values for multiple testing with the statsmodels python library740 using the \"Bonferroni\" method. C.1.3 Scoring To evaluate classifier performance several measures were used. We computed balanced accuracy instead of classical accuracy, because it can be overly optimistic, especially when assessing a highly biased classifier on an unbalanced test set376.The balanced accuracy is computed using the following formula, where \\(TP\\) and \\(TN\\) are the number of true positives and true negatives respectively, and \\(FP\\) and \\(FN\\) are the number of false positives and false negatives respectively: \\[ balanced~accuracy = \\frac{1}{2}\\left( \\frac{TP}{TP + FP} + \\frac{TN}{TN + FN} \\right) \\] We also computed adjusted mutual information (AMI). We chose it over mutual information (MI) because it has an upper bound of 1 for a perfect classifier and is not dependent on the size of the test set, allowing us to compare the performance for differently sized test sets149. The adjusted mutual information of variables \\(U\\) and \\(V\\) is defined by the following formula, where \\(MI(U,V)\\) is the mutual information between variables \\(U\\) and \\(V\\), \\(H(X)\\) is the entropy of the variable \\(X\\) (= \\(U\\) or \\(V\\)) and \\(E\\{MI(U,V)\\}\\) is the expected MI, as explained in741. \\[ AMI(U,V) = \\frac{ MI(U,V) - E\\{MI(U,V)\\} }{ \\frac{1}{2}[H(U) + H(V)] - E\\{MI(U,V)\\} } \\] MI was used to compute the \\(G\\) statistic, which follows the chi-square distribution under the null hypothesis742. This was used to compute p-values for each of our classifiers and assess the significance of their performance. \\(G\\) is defined by equation below, where \\(N\\) is the number of samples. \\[G = 2\\cdot N \\cdot MI(U,V)\\] Finally, to check the probabilistic predictive power of the classifiers we also computed the Brier score which is the mean squared difference between the ground truth and the predicted probability of being of the positive class for every sequence in the test set (therefore lower is better for this metric). The Brier score is defined in equation below, where \\(p_t\\) is the predicted probability of being of the positive class for sample \\(t\\) and \\(o_t\\) is the actual class (0 or 1, 1=positive class) of sample \\(t\\): \\[Brier~score=\\frac{1}{N}\\sum_{t=1}^N(p_t-o_t)^2\\] We used the following implementations from the scikit-learn python library738 with default options: balanced_accuracy_score mutual_info_score adjusted_mutual_info_score brier_score_loss We used the relative risk to observe the relationship between one of our new mutations and a binary character \\(X\\) such as treatment status or presence/absence of a known RAM. \\[ \\begin{aligned} RR(new, X) &amp;= \\frac{prevalence\\left(new~mutation\\mid X=1\\right)}{prevalence\\left(new~mutation\\mid X=0\\right)} \\nonumber\\\\ \\nonumber\\\\ &amp;= \\frac{|(new=1)\\cap(X=1)|}{|(X=1)|}\\div\\frac{|(new=1)\\cap(X=0)|}{|(X=0)|} \\\\ \\end{aligned} \\] C.2 S1 Fig. Figure C.1: Relative risks of the new mutations with regards to known RAMs on the African dataset (i.e. the prevalence of the new mutation in sequences with a given RAM divided by the prevalence of the new mutation in sequences without the RAM). RRs were only computed for mutations (new and RAMs) that appeared in at least 30 sequences, which is why RRs were not computed for H208Y and D218E. 95% confidence intervals, represented by vertical bars, were computed with 1000 bootstrap samples of the African sequences. Only RRs with a lower CI boundary greater than 2 are shown. The shape and color of the point represents the type of RAM as defined by Stanford’s HIVDB. Blue circle: NRTI, orange square: NNRTI, green diamond: Other. For the RR of L228H with regards to M184V, the upper CI bound is infinite. The new RAMs have high RR values for known RAMs similar to those obtained on the UK dataset. We also arrive at similar conclusions, I135L being associated with NNRTIs, E203K and L228H to NRTI and L228R to both. RR values are shown from left to right, by order of decreasing values on the lower bound of the 95% CI. C.3 S2 Fig. Figure C.2: Closeup structural view of the entrance of the NNIBP of HIV-1 RT The p66 subunit is colored in dark gray, the p51 subunit in light gray. The NNIBP is highlighted in yellow. The active site is colored in blue. We can see the physical proximity of I135 (red) to the entrance of the NNIBP. We can also see how L228 (red) is between 2 AAs of the NNIBP. C.4 S3 Fig. Figure C.3: Closeup structural view of the active site of HIV-1 RT. The p66 subunit is colored in dark gray, the p51 subunit in light gray. The active site is highlighted in blue. The NNIBP is colored in yellow. L228, E203 and D218 (red) are also very close on either side of the active site. C.5 S1 Table. .tabwid table{ border-spacing:0px !important; border-collapse:collapse; line-height:1; margin-left:auto; margin-right:auto; border-width: 0; display: table; margin-top: 1.275em; margin-bottom: 1.275em; border-color: transparent; } .tabwid_left table{ margin-left:0; } .tabwid_right table{ margin-right:0; } .tabwid td { padding: 0; } .tabwid a { text-decoration: none; } .tabwid thead { background-color: transparent; } .tabwid tfoot { background-color: transparent; } .tabwid table tr { background-color: transparent; } .cl-cc97365c{table-layout:auto;width:100%;}.cl-cc913acc{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cc913ae0{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-cc914878{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cc914882{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cc91488c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-cc919e9a{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ea4{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919eae{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919eb8{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919eb9{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ec2{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ecc{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ed6{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(102, 102, 102, 1.00);border-top: 2pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ed7{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-cc919ee0{background-color:transparent;vertical-align: middle;border-bottom: 2pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(102, 102, 102, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;} Table C.1: Detailed view of the characteristics of new potential RAMs Rank: For each new mutation we computed the aggregate feature importance ranks for the RTI-naive / RTI-experienced and known RAM present / known RAM absent classification tasks. Codon distance: We computed the minimum number of nucleotide mutations to go from the wild amino acid codons to those of the mutated amino acid, as well as the average codon distance between both amino acids, weighted by the prevalence of each wild and mutated codon in the UK and the African datasets. Count (both UK and Africa): We looked at the number of apparitions of each new potential RAM in the UK and African datasets and the corresponding prevalence in parentheses. Ratio (both UK and Africa): We computed the prevalence ratio \\(\\rho(new, treatment)\\) (e.g. L228R is 18.1 times more prevalent in RTI-experienced sequences compared to RTI-naive sequences in the UK dataset). We also computed the prevalence ratio \\(\\rho(new,any RAM)\\) (e.g. L228R is 115.7 times more prevalent in sequences that have at least one known RAM than in sequences that have none in the UK dataset). The 95% confidence intervals shown under each ratio were computed with 1000 bootstrap samples of size \\(n=55,000\\) drawn with replacement from the whole UK dataset (The same procedure was done on the African dataset with size \\(n=3990\\)). p-values: Fisher exact tests were done on the African dataset to see if each of these new mutations were more prevalent in RTI-experienced sequences; p-value were corrected with the Bonferroni method for the six simultaneous tests. B62: BLOSUM62 similarity values (e.g. D218E = 2, reflecting that E and D are both negatively charged and highly similar). Dayhoff category shift: The change in Dayhoff amino acid category is written thusly: “starting category \\(\\rightarrow\\) ending category”. These categories are as follows: a: Sulfur polymerization. b: Small, c: Acid and amide, d: Basic, e: Hydrophobic and f: aromatic. Physico-chemical change: Change in physicochemical properties was obtained by subtracting the property value of the wil-type amino acid from the mutated amino acid. All values were obtained from the AAindex database406 mutationrankcodon distanceUKAfricap‑valueB62Change inT/NW/WminUKAfricacountρ(new,treatment)ρ(new,with RAM)countρ(new,treatment)ρ(new,with RAM)Dayhoff categorynet chargepolarityhydrophobicitymolecular weightL228R0011.161.21227 (0.4%)18.1 [12.9;27.3]115.7 [55.1;507.3]98 (2.5%)32.5 [15.4;147.1]42.4 [17.8;∞]2.0e‑30-2e → d15.6-0.9343.03E203K1111.311.33256 (0.5%)11.0 [8.2;15.1]20.1 [13.7;32.1]56 (1.4%)14.1 [6.7;71.9]17.4 [8.2;83.7]6.4e‑141c → d2-1.00.68-0.94D218E2311.001.00168 (0.3%)13.1 [9.0;19.6]27.0 [16.3;57.0]25 (0.6%)∞ [∞;∞]∞ [∞;∞]2.0e‑092c → c0-0.70.0114.03L228H3411.121.17287 (0.5%)6.4 [5.1;8.4]9.2 [6.9;12.6]53 (1.3%)23.1 [9.4;∞]34.1 [12.0;∞]2.7e‑15-3e → d05.5-0.9223.99I135L4611.161.13540 (1.0%)1.8 [1.5;2.1]2.4 [2.0;2.8]134 (3.4%)2.6 [1.8;3.8]2.4 [1.7;3.4]2.6e‑072e → e0-0.3-0.690.00H208Y8911.101.12205 (0.4%)8.8 [6.5;12.5]14.9 [9.9;23.6]13 (0.3%)∞ [∞;∞]∞ [∞;∞]7.3e‑052d → f0-4.21.2726.03 C.6 S2 Appendix. (Fisher exact tests) Fisher exact tests on pairs of mutations. A detailed explanation of the procedure followed to test pairs of mutations for association with treatment. Detailed numerical results are also given. In order to study epistasis further we conducted conducted Fisher exact tests between every pair of mutations in the UK dataset (\\(n=867,903\\)) and the treatment status, corrected the p-values with the Bonferroni method with an overall risk level \\(\\alpha=0.05\\). Out of these tests, \\(1,309\\) pairs were significantly associated with treatment status. \\(424\\) out of \\(1,309\\) these pairs were two known RAMs, \\(806\\) of these pairs contained one known RAM and only \\(79\\) tests had pairs involving no known RAM at all. Furthermore out of these \\(1,309\\) significantly associated pairs, \\(829\\) contained two mutations that were significantly associated to treatment when testing mutations one by one. In \\(478\\) pairs, one of the two mutations is associated to treatment on its own, and the remaining 2 pairs, none of the mutations were significantly associated with treatment on their own. These 2 pairs were K103R + V179D and T165I + K173Q. The first pair, is a pair of known RAMs and this interaction is characterized in the HIVDb database (https://hivdb.stanford.edu/dr-summary/comments/NNRTI/). The second pair is made up of new mutations, and the corrected p-value is \\(0.02\\). In the Standford HIVDB, T165I has been associated to a reduction in EFV susceptibility. Out of the \\(1,309\\) pairs significantly associated to treatment, \\(151\\) contained at least one of our 6 new potential RAMs, in \\(6\\) cases the pair was made up of 2 of them. In the UK dataset, phylogenetic correlation is likely very impactful with regards to these tests. Indeed, the sequences are far from being independent. In order to alleviate this effect we decided to test the sigficative pairs again on the African dataset, and once more correct with the Bonferroni procedure. Out of the \\(1,309\\) tests \\(294\\) have significative p-values after correction. Out of these \\(221\\) pairs were composed of 2 mutations individually significatively associated with treatment. The remaining \\(73\\) pairs had one mutation significantly associated with treatment. Out of the \\(221\\) significative tests, 156 pairs were composed of 2 known RAMS while \\(135\\) had one known RAM in the pair. The remaining 3 pairs that do not contain a known RAM all contained either L228R or L228H which are both part of our 6 potential RAMS. C.7 S1 Data. Archive of figure generating data. A zip archive containing the processed data used to generate each panel of the main figures. Download data C.8 S2 Data. List of known DRMs. A .csv file containing all the known RAMs used in this project as well as the corresponding feature name in the encoded datasets. Obtained from (hivdb.stanford.edu/dr-summary/comments/NRTI/) and (hivdb.stanford.edu/dr-summary/comments/NNRTI/). Download data References 149. Vinh, N. X., Epps, J. &amp; Bailey, J. Information Theoretic Measures for Clusterings Comparison: Variants, Properties, Normalization and Correction for Chance. Journal of Machine Learning Research 11, 18 (2010). 376. Brodersen, K. H., Ong, C. S., Stephan, K. E. &amp; Buhmann, J. M. The Balanced Accuracy and Its Posterior Distribution. in 2010 20th International Conference on Pattern Recognition 3121–3124 (2010). doi:10.1109/ICPR.2010.764. 405. McGinnis, W. et al. Scikit-Learn-Contrib/Categorical-Encoding: Release For Zenodo. (2018) doi:10.5281/ZENODO.1157110. 406. Kawashima, S. et al. AAindex: amino acid index database, progress report 2008. Nucleic Acids Research 36, D202–D205 (2008). 737. Castresana, J. Selection of Conserved Blocks from Multiple Alignments for Their Use in Phylogenetic Analysis. Molecular Biology and Evolution 17, 540–552 (2000). 738. Pedregosa, F. et al. Scikit-learn: Machine Learning in Python. Journal of Machine Learning Research 12, 2825–2830 (2011). 739. Virtanen, P. et al. SciPy 1.0: Fundamental algorithms for scientific computing in Python. Nature Methods 17, 261–272 (2020). 740. Seabold, Skipper &amp; Perktold, Josef. Statsmodels: Econometric and Statistical Modeling with Python. in Proceedings of the 9th Python in Science Conference (eds. Walt, Stéfan van der &amp; Millman, Jarrod) 92–96 (2010). doi:10.25080/Majora-92bf1922-011 . 741. Vinh, N. X. &amp; Epps, J. A Novel Approach for Automatic Number of Clusters Detection in Microarray Data Based on Consensus Clustering. in 2009 Ninth IEEE International Conference on Bioinformatics and BioEngineering 84–91 (2009). doi:10.1109/BIBE.2009.19. 742. Harremoes, P. Mutual information of contingency tables and related inequalities. in 2014 IEEE International Symposium on Information Theory 2474–2478 (IEEE, 2014). doi:10.1109/ISIT.2014.6875279. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
